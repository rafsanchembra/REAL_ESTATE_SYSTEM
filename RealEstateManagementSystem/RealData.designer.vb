'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="RealEstateManagementSystemDataBase")>  _
Partial Public Class RealDataDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAPP_BankAccount(instance As APP_BankAccount)
    End Sub
  Partial Private Sub UpdateAPP_BankAccount(instance As APP_BankAccount)
    End Sub
  Partial Private Sub DeleteAPP_BankAccount(instance As APP_BankAccount)
    End Sub
  Partial Private Sub InsertUsersInRole(instance As UsersInRole)
    End Sub
  Partial Private Sub UpdateUsersInRole(instance As UsersInRole)
    End Sub
  Partial Private Sub DeleteUsersInRole(instance As UsersInRole)
    End Sub
  Partial Private Sub InsertAPP_BankAccountTransaction(instance As APP_BankAccountTransaction)
    End Sub
  Partial Private Sub UpdateAPP_BankAccountTransaction(instance As APP_BankAccountTransaction)
    End Sub
  Partial Private Sub DeleteAPP_BankAccountTransaction(instance As APP_BankAccountTransaction)
    End Sub
  Partial Private Sub InsertAPP_Bank(instance As APP_Bank)
    End Sub
  Partial Private Sub UpdateAPP_Bank(instance As APP_Bank)
    End Sub
  Partial Private Sub DeleteAPP_Bank(instance As APP_Bank)
    End Sub
  Partial Private Sub InsertAPP_BankTransactionBetweenAccount(instance As APP_BankTransactionBetweenAccount)
    End Sub
  Partial Private Sub UpdateAPP_BankTransactionBetweenAccount(instance As APP_BankTransactionBetweenAccount)
    End Sub
  Partial Private Sub DeleteAPP_BankTransactionBetweenAccount(instance As APP_BankTransactionBetweenAccount)
    End Sub
  Partial Private Sub InsertAPP_Client(instance As APP_Client)
    End Sub
  Partial Private Sub UpdateAPP_Client(instance As APP_Client)
    End Sub
  Partial Private Sub DeleteAPP_Client(instance As APP_Client)
    End Sub
  Partial Private Sub InsertAPP_Contact(instance As APP_Contact)
    End Sub
  Partial Private Sub UpdateAPP_Contact(instance As APP_Contact)
    End Sub
  Partial Private Sub DeleteAPP_Contact(instance As APP_Contact)
    End Sub
  Partial Private Sub InsertAPP_Country(instance As APP_Country)
    End Sub
  Partial Private Sub UpdateAPP_Country(instance As APP_Country)
    End Sub
  Partial Private Sub DeleteAPP_Country(instance As APP_Country)
    End Sub
  Partial Private Sub InsertAPP_FlatAttachment(instance As APP_FlatAttachment)
    End Sub
  Partial Private Sub UpdateAPP_FlatAttachment(instance As APP_FlatAttachment)
    End Sub
  Partial Private Sub DeleteAPP_FlatAttachment(instance As APP_FlatAttachment)
    End Sub
  Partial Private Sub InsertAPP_Flat(instance As APP_Flat)
    End Sub
  Partial Private Sub UpdateAPP_Flat(instance As APP_Flat)
    End Sub
  Partial Private Sub DeleteAPP_Flat(instance As APP_Flat)
    End Sub
  Partial Private Sub InsertAPP_FreeLandAttachment(instance As APP_FreeLandAttachment)
    End Sub
  Partial Private Sub UpdateAPP_FreeLandAttachment(instance As APP_FreeLandAttachment)
    End Sub
  Partial Private Sub DeleteAPP_FreeLandAttachment(instance As APP_FreeLandAttachment)
    End Sub
  Partial Private Sub InsertAPP_FreeLand(instance As APP_FreeLand)
    End Sub
  Partial Private Sub UpdateAPP_FreeLand(instance As APP_FreeLand)
    End Sub
  Partial Private Sub DeleteAPP_FreeLand(instance As APP_FreeLand)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingAttachment(instance As APP_MultiFloorBuildingAttachment)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingAttachment(instance As APP_MultiFloorBuildingAttachment)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingAttachment(instance As APP_MultiFloorBuildingAttachment)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingAttachmentTemp(instance As APP_MultiFloorBuildingAttachmentTemp)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingAttachmentTemp(instance As APP_MultiFloorBuildingAttachmentTemp)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingAttachmentTemp(instance As APP_MultiFloorBuildingAttachmentTemp)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingFlatAttachment(instance As APP_MultiFloorBuildingFlatAttachment)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingFlatAttachment(instance As APP_MultiFloorBuildingFlatAttachment)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingFlatAttachment(instance As APP_MultiFloorBuildingFlatAttachment)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingFlatAttachmentTemp(instance As APP_MultiFloorBuildingFlatAttachmentTemp)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingFlatAttachmentTemp(instance As APP_MultiFloorBuildingFlatAttachmentTemp)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingFlatAttachmentTemp(instance As APP_MultiFloorBuildingFlatAttachmentTemp)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingFlat(instance As APP_MultiFloorBuildingFlat)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingFlat(instance As APP_MultiFloorBuildingFlat)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingFlat(instance As APP_MultiFloorBuildingFlat)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingFlatTemp(instance As APP_MultiFloorBuildingFlatTemp)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingFlatTemp(instance As APP_MultiFloorBuildingFlatTemp)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingFlatTemp(instance As APP_MultiFloorBuildingFlatTemp)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingFloor(instance As APP_MultiFloorBuildingFloor)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingFloor(instance As APP_MultiFloorBuildingFloor)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingFloor(instance As APP_MultiFloorBuildingFloor)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingFloorTemp(instance As APP_MultiFloorBuildingFloorTemp)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingFloorTemp(instance As APP_MultiFloorBuildingFloorTemp)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingFloorTemp(instance As APP_MultiFloorBuildingFloorTemp)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingOfficeAttachment(instance As APP_MultiFloorBuildingOfficeAttachment)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingOfficeAttachment(instance As APP_MultiFloorBuildingOfficeAttachment)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingOfficeAttachment(instance As APP_MultiFloorBuildingOfficeAttachment)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingOfficeAttachmentTemp(instance As APP_MultiFloorBuildingOfficeAttachmentTemp)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingOfficeAttachmentTemp(instance As APP_MultiFloorBuildingOfficeAttachmentTemp)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingOfficeAttachmentTemp(instance As APP_MultiFloorBuildingOfficeAttachmentTemp)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingOffice(instance As APP_MultiFloorBuildingOffice)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingOffice(instance As APP_MultiFloorBuildingOffice)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingOffice(instance As APP_MultiFloorBuildingOffice)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingOfficeTemp(instance As APP_MultiFloorBuildingOfficeTemp)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingOfficeTemp(instance As APP_MultiFloorBuildingOfficeTemp)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingOfficeTemp(instance As APP_MultiFloorBuildingOfficeTemp)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuilding(instance As APP_MultiFloorBuilding)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuilding(instance As APP_MultiFloorBuilding)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuilding(instance As APP_MultiFloorBuilding)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingShopAttachment(instance As APP_MultiFloorBuildingShopAttachment)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingShopAttachment(instance As APP_MultiFloorBuildingShopAttachment)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingShopAttachment(instance As APP_MultiFloorBuildingShopAttachment)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingShopAttachmentTemp(instance As APP_MultiFloorBuildingShopAttachmentTemp)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingShopAttachmentTemp(instance As APP_MultiFloorBuildingShopAttachmentTemp)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingShopAttachmentTemp(instance As APP_MultiFloorBuildingShopAttachmentTemp)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingShop(instance As APP_MultiFloorBuildingShop)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingShop(instance As APP_MultiFloorBuildingShop)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingShop(instance As APP_MultiFloorBuildingShop)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingShopTemp(instance As APP_MultiFloorBuildingShopTemp)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingShopTemp(instance As APP_MultiFloorBuildingShopTemp)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingShopTemp(instance As APP_MultiFloorBuildingShopTemp)
    End Sub
  Partial Private Sub InsertAPP_MultiFloorBuildingTemp(instance As APP_MultiFloorBuildingTemp)
    End Sub
  Partial Private Sub UpdateAPP_MultiFloorBuildingTemp(instance As APP_MultiFloorBuildingTemp)
    End Sub
  Partial Private Sub DeleteAPP_MultiFloorBuildingTemp(instance As APP_MultiFloorBuildingTemp)
    End Sub
  Partial Private Sub InsertAPP_Owner(instance As APP_Owner)
    End Sub
  Partial Private Sub UpdateAPP_Owner(instance As APP_Owner)
    End Sub
  Partial Private Sub DeleteAPP_Owner(instance As APP_Owner)
    End Sub
  Partial Private Sub InsertAPP_Supplier(instance As APP_Supplier)
    End Sub
  Partial Private Sub UpdateAPP_Supplier(instance As APP_Supplier)
    End Sub
  Partial Private Sub DeleteAPP_Supplier(instance As APP_Supplier)
    End Sub
  Partial Private Sub InsertAPP_UserProfile(instance As APP_UserProfile)
    End Sub
  Partial Private Sub UpdateAPP_UserProfile(instance As APP_UserProfile)
    End Sub
  Partial Private Sub DeleteAPP_UserProfile(instance As APP_UserProfile)
    End Sub
  Partial Private Sub InsertAPP_VillaAttachment(instance As APP_VillaAttachment)
    End Sub
  Partial Private Sub UpdateAPP_VillaAttachment(instance As APP_VillaAttachment)
    End Sub
  Partial Private Sub DeleteAPP_VillaAttachment(instance As APP_VillaAttachment)
    End Sub
  Partial Private Sub InsertAPP_Villa(instance As APP_Villa)
    End Sub
  Partial Private Sub UpdateAPP_Villa(instance As APP_Villa)
    End Sub
  Partial Private Sub DeleteAPP_Villa(instance As APP_Villa)
    End Sub
  Partial Private Sub InsertProfile(instance As Profile)
    End Sub
  Partial Private Sub UpdateProfile(instance As Profile)
    End Sub
  Partial Private Sub DeleteProfile(instance As Profile)
    End Sub
  Partial Private Sub InsertRole(instance As Role)
    End Sub
  Partial Private Sub UpdateRole(instance As Role)
    End Sub
  Partial Private Sub DeleteRole(instance As Role)
    End Sub
  Partial Private Sub InsertSystemDetail(instance As SystemDetail)
    End Sub
  Partial Private Sub UpdateSystemDetail(instance As SystemDetail)
    End Sub
  Partial Private Sub DeleteSystemDetail(instance As SystemDetail)
    End Sub
  Partial Private Sub InsertUser(instance As User)
    End Sub
  Partial Private Sub UpdateUser(instance As User)
    End Sub
  Partial Private Sub DeleteUser(instance As User)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("RealEstateManagementSystemDataBaseConnection").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property APP_BankAccounts() As System.Data.Linq.Table(Of APP_BankAccount)
		Get
			Return Me.GetTable(Of APP_BankAccount)
		End Get
	End Property
	
	Public ReadOnly Property UsersInRoles() As System.Data.Linq.Table(Of UsersInRole)
		Get
			Return Me.GetTable(Of UsersInRole)
		End Get
	End Property
	
	Public ReadOnly Property APP_BankAccountTransactions() As System.Data.Linq.Table(Of APP_BankAccountTransaction)
		Get
			Return Me.GetTable(Of APP_BankAccountTransaction)
		End Get
	End Property
	
	Public ReadOnly Property APP_Banks() As System.Data.Linq.Table(Of APP_Bank)
		Get
			Return Me.GetTable(Of APP_Bank)
		End Get
	End Property
	
	Public ReadOnly Property APP_BankTransactionBetweenAccounts() As System.Data.Linq.Table(Of APP_BankTransactionBetweenAccount)
		Get
			Return Me.GetTable(Of APP_BankTransactionBetweenAccount)
		End Get
	End Property
	
	Public ReadOnly Property APP_Clients() As System.Data.Linq.Table(Of APP_Client)
		Get
			Return Me.GetTable(Of APP_Client)
		End Get
	End Property
	
	Public ReadOnly Property APP_Contacts() As System.Data.Linq.Table(Of APP_Contact)
		Get
			Return Me.GetTable(Of APP_Contact)
		End Get
	End Property
	
	Public ReadOnly Property APP_Countries() As System.Data.Linq.Table(Of APP_Country)
		Get
			Return Me.GetTable(Of APP_Country)
		End Get
	End Property
	
	Public ReadOnly Property APP_FlatAttachments() As System.Data.Linq.Table(Of APP_FlatAttachment)
		Get
			Return Me.GetTable(Of APP_FlatAttachment)
		End Get
	End Property
	
	Public ReadOnly Property APP_Flats() As System.Data.Linq.Table(Of APP_Flat)
		Get
			Return Me.GetTable(Of APP_Flat)
		End Get
	End Property
	
	Public ReadOnly Property APP_FreeLandAttachments() As System.Data.Linq.Table(Of APP_FreeLandAttachment)
		Get
			Return Me.GetTable(Of APP_FreeLandAttachment)
		End Get
	End Property
	
	Public ReadOnly Property APP_FreeLands() As System.Data.Linq.Table(Of APP_FreeLand)
		Get
			Return Me.GetTable(Of APP_FreeLand)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingAttachments() As System.Data.Linq.Table(Of APP_MultiFloorBuildingAttachment)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingAttachment)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingAttachmentTemps() As System.Data.Linq.Table(Of APP_MultiFloorBuildingAttachmentTemp)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingAttachmentTemp)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingFlatAttachments() As System.Data.Linq.Table(Of APP_MultiFloorBuildingFlatAttachment)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingFlatAttachment)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingFlatAttachmentTemps() As System.Data.Linq.Table(Of APP_MultiFloorBuildingFlatAttachmentTemp)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingFlatAttachmentTemp)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingFlats() As System.Data.Linq.Table(Of APP_MultiFloorBuildingFlat)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingFlat)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingFlatTemps() As System.Data.Linq.Table(Of APP_MultiFloorBuildingFlatTemp)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingFlatTemp)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingFloors() As System.Data.Linq.Table(Of APP_MultiFloorBuildingFloor)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingFloor)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingFloorTemps() As System.Data.Linq.Table(Of APP_MultiFloorBuildingFloorTemp)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingFloorTemp)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingOfficeAttachments() As System.Data.Linq.Table(Of APP_MultiFloorBuildingOfficeAttachment)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingOfficeAttachment)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingOfficeAttachmentTemps() As System.Data.Linq.Table(Of APP_MultiFloorBuildingOfficeAttachmentTemp)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingOfficeAttachmentTemp)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingOffices() As System.Data.Linq.Table(Of APP_MultiFloorBuildingOffice)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingOffice)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingOfficeTemps() As System.Data.Linq.Table(Of APP_MultiFloorBuildingOfficeTemp)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingOfficeTemp)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildings() As System.Data.Linq.Table(Of APP_MultiFloorBuilding)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuilding)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingShopAttachments() As System.Data.Linq.Table(Of APP_MultiFloorBuildingShopAttachment)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingShopAttachment)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingShopAttachmentTemps() As System.Data.Linq.Table(Of APP_MultiFloorBuildingShopAttachmentTemp)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingShopAttachmentTemp)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingShops() As System.Data.Linq.Table(Of APP_MultiFloorBuildingShop)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingShop)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingShopTemps() As System.Data.Linq.Table(Of APP_MultiFloorBuildingShopTemp)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingShopTemp)
		End Get
	End Property
	
	Public ReadOnly Property APP_MultiFloorBuildingTemps() As System.Data.Linq.Table(Of APP_MultiFloorBuildingTemp)
		Get
			Return Me.GetTable(Of APP_MultiFloorBuildingTemp)
		End Get
	End Property
	
	Public ReadOnly Property APP_Owners() As System.Data.Linq.Table(Of APP_Owner)
		Get
			Return Me.GetTable(Of APP_Owner)
		End Get
	End Property
	
	Public ReadOnly Property APP_Suppliers() As System.Data.Linq.Table(Of APP_Supplier)
		Get
			Return Me.GetTable(Of APP_Supplier)
		End Get
	End Property
	
	Public ReadOnly Property APP_UserProfiles() As System.Data.Linq.Table(Of APP_UserProfile)
		Get
			Return Me.GetTable(Of APP_UserProfile)
		End Get
	End Property
	
	Public ReadOnly Property APP_VillaAttachments() As System.Data.Linq.Table(Of APP_VillaAttachment)
		Get
			Return Me.GetTable(Of APP_VillaAttachment)
		End Get
	End Property
	
	Public ReadOnly Property APP_Villas() As System.Data.Linq.Table(Of APP_Villa)
		Get
			Return Me.GetTable(Of APP_Villa)
		End Get
	End Property
	
	Public ReadOnly Property Profiles() As System.Data.Linq.Table(Of Profile)
		Get
			Return Me.GetTable(Of Profile)
		End Get
	End Property
	
	Public ReadOnly Property Roles() As System.Data.Linq.Table(Of Role)
		Get
			Return Me.GetTable(Of Role)
		End Get
	End Property
	
	Public ReadOnly Property SystemDetails() As System.Data.Linq.Table(Of SystemDetail)
		Get
			Return Me.GetTable(Of SystemDetail)
		End Get
	End Property
	
	Public ReadOnly Property Users() As System.Data.Linq.Table(Of User)
		Get
			Return Me.GetTable(Of User)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.PROC_ClearAllData")>  _
	Public Function PROC_ClearAllData() As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.PROC_GetApplicationID")>  _
	Public Function PROC_GetApplicationID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationName", DbType:="NVarChar(MAX)")> ByVal applicationName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ApplicationID", DbType:="UniqueIdentifier")> ByRef applicationID As System.Nullable(Of System.Guid)) As ISingleResult(Of PROC_GetApplicationIDResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), applicationName, applicationID)
		applicationID = CType(result.GetParameterValue(1),System.Nullable(Of System.Guid))
		Return CType(result.ReturnValue,ISingleResult(Of PROC_GetApplicationIDResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.PROC_APP_MultiFloorBuildingFlatCopyFromTemp")>  _
	Public Function PROC_APP_MultiFloorBuildingFlatCopyFromTemp(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FlatTempID", DbType:="BigInt")> ByVal flatTempID As System.Nullable(Of Long), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="BuildingID", DbType:="BigInt")> ByVal buildingID As System.Nullable(Of Long), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FlatID", DbType:="BigInt")> ByRef flatID As System.Nullable(Of Long)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), flatTempID, buildingID, flatID)
		flatID = CType(result.GetParameterValue(2),System.Nullable(Of Long))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.PROC_APP_MultiFloorBuildingOfficeCopyFromTemp")>  _
	Public Function PROC_APP_MultiFloorBuildingOfficeCopyFromTemp(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="OfficeTempID", DbType:="BigInt")> ByVal officeTempID As System.Nullable(Of Long), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="BuildingID", DbType:="BigInt")> ByVal buildingID As System.Nullable(Of Long), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="OfficeID", DbType:="BigInt")> ByRef officeID As System.Nullable(Of Long)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), officeTempID, buildingID, officeID)
		officeID = CType(result.GetParameterValue(2),System.Nullable(Of Long))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.PROC_APP_MultiFloorBuildingShopCopyFromTemp")>  _
	Public Function PROC_APP_MultiFloorBuildingShopCopyFromTemp(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ShopTempID", DbType:="BigInt")> ByVal shopTempID As System.Nullable(Of Long), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="BuildingID", DbType:="BigInt")> ByVal buildingID As System.Nullable(Of Long), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ShopID", DbType:="BigInt")> ByRef shopID As System.Nullable(Of Long)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), shopTempID, buildingID, shopID)
		shopID = CType(result.GetParameterValue(2),System.Nullable(Of Long))
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.PROC_APP_MultiFloorBuildingCopyFromTemp")>  _
	Public Function PROC_APP_MultiFloorBuildingCopyFromTemp(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="BuildingTempID", DbType:="BigInt")> ByVal buildingTempID As System.Nullable(Of Long), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="BuildingID", DbType:="BigInt")> ByRef buildingID As System.Nullable(Of Long)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), buildingTempID, buildingID)
		buildingID = CType(result.GetParameterValue(1),System.Nullable(Of Long))
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_BankAccounts")>  _
Partial Public Class APP_BankAccount
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _BankID As System.Nullable(Of Long)
	
	Private _BankAccountNumber As String
	
	Private _BankAccountArabicName As String
	
	Private _BankAccountEnglishName As String
	
	Private _BankAccountOpeningBalance As System.Nullable(Of Decimal)
	
	Private _BankAccountTotalBalance As System.Nullable(Of Decimal)
	
	Private _BankAccountMemo As String
	
	Private _BankAccountStatus As System.Nullable(Of Boolean)
	
	Private _BankAccountOpeningBalanceMemo As String
	
	Private _BankAccountAddedBy As System.Nullable(Of System.Guid)
	
	Private _BankAccountAddedDate As System.Nullable(Of Date)
	
	Private _BankAccountUpdatedBy As System.Nullable(Of System.Guid)
	
	Private _BankAccountUpdatedDate As System.Nullable(Of Date)
	
	Private _BankAccountOpeningBalanceAddedBy As System.Nullable(Of System.Guid)
	
	Private _BankAccountOpeningBalanceAddedDate As System.Nullable(Of Date)
	
	Private _BankAccountOpeningBalanceUpdatedBy As System.Nullable(Of System.Guid)
	
	Private _BankAccountOpeningBalanceUpdatedDate As System.Nullable(Of Date)
	
	Private _APP_BankAccountTransactions As EntitySet(Of APP_BankAccountTransaction)
	
	Private _APP_BankTransactionBetweenAccounts As EntitySet(Of APP_BankTransactionBetweenAccount)
	
	Private _APP_BankTransactionBetweenAccounts1 As EntitySet(Of APP_BankTransactionBetweenAccount)
	
	Private _APP_Bank As EntityRef(Of APP_Bank)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnBankIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnBankIDChanged()
    End Sub
    Partial Private Sub OnBankAccountNumberChanging(value As String)
    End Sub
    Partial Private Sub OnBankAccountNumberChanged()
    End Sub
    Partial Private Sub OnBankAccountArabicNameChanging(value As String)
    End Sub
    Partial Private Sub OnBankAccountArabicNameChanged()
    End Sub
    Partial Private Sub OnBankAccountEnglishNameChanging(value As String)
    End Sub
    Partial Private Sub OnBankAccountEnglishNameChanged()
    End Sub
    Partial Private Sub OnBankAccountOpeningBalanceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBankAccountOpeningBalanceChanged()
    End Sub
    Partial Private Sub OnBankAccountTotalBalanceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBankAccountTotalBalanceChanged()
    End Sub
    Partial Private Sub OnBankAccountMemoChanging(value As String)
    End Sub
    Partial Private Sub OnBankAccountMemoChanged()
    End Sub
    Partial Private Sub OnBankAccountStatusChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnBankAccountStatusChanged()
    End Sub
    Partial Private Sub OnBankAccountOpeningBalanceMemoChanging(value As String)
    End Sub
    Partial Private Sub OnBankAccountOpeningBalanceMemoChanged()
    End Sub
    Partial Private Sub OnBankAccountAddedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnBankAccountAddedByChanged()
    End Sub
    Partial Private Sub OnBankAccountAddedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBankAccountAddedDateChanged()
    End Sub
    Partial Private Sub OnBankAccountUpdatedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnBankAccountUpdatedByChanged()
    End Sub
    Partial Private Sub OnBankAccountUpdatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBankAccountUpdatedDateChanged()
    End Sub
    Partial Private Sub OnBankAccountOpeningBalanceAddedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnBankAccountOpeningBalanceAddedByChanged()
    End Sub
    Partial Private Sub OnBankAccountOpeningBalanceAddedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBankAccountOpeningBalanceAddedDateChanged()
    End Sub
    Partial Private Sub OnBankAccountOpeningBalanceUpdatedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnBankAccountOpeningBalanceUpdatedByChanged()
    End Sub
    Partial Private Sub OnBankAccountOpeningBalanceUpdatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBankAccountOpeningBalanceUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_BankAccountTransactions = New EntitySet(Of APP_BankAccountTransaction)(AddressOf Me.attach_APP_BankAccountTransactions, AddressOf Me.detach_APP_BankAccountTransactions)
		Me._APP_BankTransactionBetweenAccounts = New EntitySet(Of APP_BankTransactionBetweenAccount)(AddressOf Me.attach_APP_BankTransactionBetweenAccounts, AddressOf Me.detach_APP_BankTransactionBetweenAccounts)
		Me._APP_BankTransactionBetweenAccounts1 = New EntitySet(Of APP_BankTransactionBetweenAccount)(AddressOf Me.attach_APP_BankTransactionBetweenAccounts1, AddressOf Me.detach_APP_BankTransactionBetweenAccounts1)
		Me._APP_Bank = CType(Nothing, EntityRef(Of APP_Bank))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankID", DbType:="BigInt")>  _
	Public Property BankID() As System.Nullable(Of Long)
		Get
			Return Me._BankID
		End Get
		Set
			If (Me._BankID.Equals(value) = false) Then
				If Me._APP_Bank.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBankIDChanging(value)
				Me.SendPropertyChanging
				Me._BankID = value
				Me.SendPropertyChanged("BankID")
				Me.OnBankIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountNumber", DbType:="NVarChar(40)")>  _
	Public Property BankAccountNumber() As String
		Get
			Return Me._BankAccountNumber
		End Get
		Set
			If (String.Equals(Me._BankAccountNumber, value) = false) Then
				Me.OnBankAccountNumberChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountNumber = value
				Me.SendPropertyChanged("BankAccountNumber")
				Me.OnBankAccountNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountArabicName", DbType:="NVarChar(30)")>  _
	Public Property BankAccountArabicName() As String
		Get
			Return Me._BankAccountArabicName
		End Get
		Set
			If (String.Equals(Me._BankAccountArabicName, value) = false) Then
				Me.OnBankAccountArabicNameChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountArabicName = value
				Me.SendPropertyChanged("BankAccountArabicName")
				Me.OnBankAccountArabicNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountEnglishName", DbType:="NVarChar(30)")>  _
	Public Property BankAccountEnglishName() As String
		Get
			Return Me._BankAccountEnglishName
		End Get
		Set
			If (String.Equals(Me._BankAccountEnglishName, value) = false) Then
				Me.OnBankAccountEnglishNameChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountEnglishName = value
				Me.SendPropertyChanged("BankAccountEnglishName")
				Me.OnBankAccountEnglishNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountOpeningBalance", DbType:="Money")>  _
	Public Property BankAccountOpeningBalance() As System.Nullable(Of Decimal)
		Get
			Return Me._BankAccountOpeningBalance
		End Get
		Set
			If (Me._BankAccountOpeningBalance.Equals(value) = false) Then
				Me.OnBankAccountOpeningBalanceChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountOpeningBalance = value
				Me.SendPropertyChanged("BankAccountOpeningBalance")
				Me.OnBankAccountOpeningBalanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountTotalBalance", DbType:="Money")>  _
	Public Property BankAccountTotalBalance() As System.Nullable(Of Decimal)
		Get
			Return Me._BankAccountTotalBalance
		End Get
		Set
			If (Me._BankAccountTotalBalance.Equals(value) = false) Then
				Me.OnBankAccountTotalBalanceChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountTotalBalance = value
				Me.SendPropertyChanged("BankAccountTotalBalance")
				Me.OnBankAccountTotalBalanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountMemo", DbType:="NVarChar(MAX)")>  _
	Public Property BankAccountMemo() As String
		Get
			Return Me._BankAccountMemo
		End Get
		Set
			If (String.Equals(Me._BankAccountMemo, value) = false) Then
				Me.OnBankAccountMemoChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountMemo = value
				Me.SendPropertyChanged("BankAccountMemo")
				Me.OnBankAccountMemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountStatus", DbType:="Bit")>  _
	Public Property BankAccountStatus() As System.Nullable(Of Boolean)
		Get
			Return Me._BankAccountStatus
		End Get
		Set
			If (Me._BankAccountStatus.Equals(value) = false) Then
				Me.OnBankAccountStatusChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountStatus = value
				Me.SendPropertyChanged("BankAccountStatus")
				Me.OnBankAccountStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountOpeningBalanceMemo", DbType:="NVarChar(MAX)")>  _
	Public Property BankAccountOpeningBalanceMemo() As String
		Get
			Return Me._BankAccountOpeningBalanceMemo
		End Get
		Set
			If (String.Equals(Me._BankAccountOpeningBalanceMemo, value) = false) Then
				Me.OnBankAccountOpeningBalanceMemoChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountOpeningBalanceMemo = value
				Me.SendPropertyChanged("BankAccountOpeningBalanceMemo")
				Me.OnBankAccountOpeningBalanceMemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountAddedBy", DbType:="UniqueIdentifier")>  _
	Public Property BankAccountAddedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._BankAccountAddedBy
		End Get
		Set
			If (Me._BankAccountAddedBy.Equals(value) = false) Then
				Me.OnBankAccountAddedByChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountAddedBy = value
				Me.SendPropertyChanged("BankAccountAddedBy")
				Me.OnBankAccountAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountAddedDate", DbType:="DateTime")>  _
	Public Property BankAccountAddedDate() As System.Nullable(Of Date)
		Get
			Return Me._BankAccountAddedDate
		End Get
		Set
			If (Me._BankAccountAddedDate.Equals(value) = false) Then
				Me.OnBankAccountAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountAddedDate = value
				Me.SendPropertyChanged("BankAccountAddedDate")
				Me.OnBankAccountAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountUpdatedBy", DbType:="UniqueIdentifier")>  _
	Public Property BankAccountUpdatedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._BankAccountUpdatedBy
		End Get
		Set
			If (Me._BankAccountUpdatedBy.Equals(value) = false) Then
				Me.OnBankAccountUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountUpdatedBy = value
				Me.SendPropertyChanged("BankAccountUpdatedBy")
				Me.OnBankAccountUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountUpdatedDate", DbType:="DateTime")>  _
	Public Property BankAccountUpdatedDate() As System.Nullable(Of Date)
		Get
			Return Me._BankAccountUpdatedDate
		End Get
		Set
			If (Me._BankAccountUpdatedDate.Equals(value) = false) Then
				Me.OnBankAccountUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountUpdatedDate = value
				Me.SendPropertyChanged("BankAccountUpdatedDate")
				Me.OnBankAccountUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountOpeningBalanceAddedBy", DbType:="UniqueIdentifier")>  _
	Public Property BankAccountOpeningBalanceAddedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._BankAccountOpeningBalanceAddedBy
		End Get
		Set
			If (Me._BankAccountOpeningBalanceAddedBy.Equals(value) = false) Then
				Me.OnBankAccountOpeningBalanceAddedByChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountOpeningBalanceAddedBy = value
				Me.SendPropertyChanged("BankAccountOpeningBalanceAddedBy")
				Me.OnBankAccountOpeningBalanceAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountOpeningBalanceAddedDate", DbType:="DateTime")>  _
	Public Property BankAccountOpeningBalanceAddedDate() As System.Nullable(Of Date)
		Get
			Return Me._BankAccountOpeningBalanceAddedDate
		End Get
		Set
			If (Me._BankAccountOpeningBalanceAddedDate.Equals(value) = false) Then
				Me.OnBankAccountOpeningBalanceAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountOpeningBalanceAddedDate = value
				Me.SendPropertyChanged("BankAccountOpeningBalanceAddedDate")
				Me.OnBankAccountOpeningBalanceAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountOpeningBalanceUpdatedBy", DbType:="UniqueIdentifier")>  _
	Public Property BankAccountOpeningBalanceUpdatedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._BankAccountOpeningBalanceUpdatedBy
		End Get
		Set
			If (Me._BankAccountOpeningBalanceUpdatedBy.Equals(value) = false) Then
				Me.OnBankAccountOpeningBalanceUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountOpeningBalanceUpdatedBy = value
				Me.SendPropertyChanged("BankAccountOpeningBalanceUpdatedBy")
				Me.OnBankAccountOpeningBalanceUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountOpeningBalanceUpdatedDate", DbType:="DateTime")>  _
	Public Property BankAccountOpeningBalanceUpdatedDate() As System.Nullable(Of Date)
		Get
			Return Me._BankAccountOpeningBalanceUpdatedDate
		End Get
		Set
			If (Me._BankAccountOpeningBalanceUpdatedDate.Equals(value) = false) Then
				Me.OnBankAccountOpeningBalanceUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountOpeningBalanceUpdatedDate = value
				Me.SendPropertyChanged("BankAccountOpeningBalanceUpdatedDate")
				Me.OnBankAccountOpeningBalanceUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_BankAccount_APP_BankAccountTransaction", Storage:="_APP_BankAccountTransactions", ThisKey:="ID", OtherKey:="TransactionBankAccountID")>  _
	Public Property APP_BankAccountTransactions() As EntitySet(Of APP_BankAccountTransaction)
		Get
			Return Me._APP_BankAccountTransactions
		End Get
		Set
			Me._APP_BankAccountTransactions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_BankAccount_APP_BankTransactionBetweenAccount", Storage:="_APP_BankTransactionBetweenAccounts", ThisKey:="ID", OtherKey:="TransactionReceiveBankAccountID")>  _
	Public Property APP_BankTransactionBetweenAccounts() As EntitySet(Of APP_BankTransactionBetweenAccount)
		Get
			Return Me._APP_BankTransactionBetweenAccounts
		End Get
		Set
			Me._APP_BankTransactionBetweenAccounts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_BankAccount_APP_BankTransactionBetweenAccount1", Storage:="_APP_BankTransactionBetweenAccounts1", ThisKey:="ID", OtherKey:="TransactionSenderBankAccountID")>  _
	Public Property APP_BankTransactionBetweenAccounts1() As EntitySet(Of APP_BankTransactionBetweenAccount)
		Get
			Return Me._APP_BankTransactionBetweenAccounts1
		End Get
		Set
			Me._APP_BankTransactionBetweenAccounts1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_Bank_APP_BankAccount", Storage:="_APP_Bank", ThisKey:="BankID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_Bank() As APP_Bank
		Get
			Return Me._APP_Bank.Entity
		End Get
		Set
			Dim previousValue As APP_Bank = Me._APP_Bank.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_Bank.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_Bank.Entity = Nothing
					previousValue.APP_BankAccounts.Remove(Me)
				End If
				Me._APP_Bank.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_BankAccounts.Add(Me)
					Me._BankID = value.ID
				Else
					Me._BankID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_Bank")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_APP_BankAccountTransactions(ByVal entity As APP_BankAccountTransaction)
		Me.SendPropertyChanging
		entity.APP_BankAccount = Me
	End Sub
	
	Private Sub detach_APP_BankAccountTransactions(ByVal entity As APP_BankAccountTransaction)
		Me.SendPropertyChanging
		entity.APP_BankAccount = Nothing
	End Sub
	
	Private Sub attach_APP_BankTransactionBetweenAccounts(ByVal entity As APP_BankTransactionBetweenAccount)
		Me.SendPropertyChanging
		entity.APP_BankAccount = Me
	End Sub
	
	Private Sub detach_APP_BankTransactionBetweenAccounts(ByVal entity As APP_BankTransactionBetweenAccount)
		Me.SendPropertyChanging
		entity.APP_BankAccount = Nothing
	End Sub
	
	Private Sub attach_APP_BankTransactionBetweenAccounts1(ByVal entity As APP_BankTransactionBetweenAccount)
		Me.SendPropertyChanging
		entity.APP_BankAccount1 = Me
	End Sub
	
	Private Sub detach_APP_BankTransactionBetweenAccounts1(ByVal entity As APP_BankTransactionBetweenAccount)
		Me.SendPropertyChanging
		entity.APP_BankAccount1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UsersInRoles")>  _
Partial Public Class UsersInRole
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As System.Guid
	
	Private _RoleId As System.Guid
	
	Private _Role As EntityRef(Of Role)
	
	Private _User As EntityRef(Of User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnRoleIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoleIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Role = CType(Nothing, EntityRef(Of Role))
		Me._User = CType(Nothing, EntityRef(Of User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				If Me._User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RoleId() As System.Guid
		Get
			Return Me._RoleId
		End Get
		Set
			If ((Me._RoleId = value)  _
						= false) Then
				If Me._Role.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRoleIdChanging(value)
				Me.SendPropertyChanging
				Me._RoleId = value
				Me.SendPropertyChanged("RoleId")
				Me.OnRoleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Role_UsersInRole", Storage:="_Role", ThisKey:="RoleId", OtherKey:="RoleId", IsForeignKey:=true)>  _
	Public Property Role() As Role
		Get
			Return Me._Role.Entity
		End Get
		Set
			Dim previousValue As Role = Me._Role.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Role.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Role.Entity = Nothing
					previousValue.UsersInRoles.Remove(Me)
				End If
				Me._Role.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UsersInRoles.Add(Me)
					Me._RoleId = value.RoleId
				Else
					Me._RoleId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("Role")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_UsersInRole", Storage:="_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property User() As User
		Get
			Return Me._User.Entity
		End Get
		Set
			Dim previousValue As User = Me._User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User.Entity = Nothing
					previousValue.UsersInRoles.Remove(Me)
				End If
				Me._User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.UsersInRoles.Add(Me)
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_BankAccountTransactions")>  _
Partial Public Class APP_BankAccountTransaction
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _TransactionBankAccountID As System.Nullable(Of Long)
	
	Private _TransactionAmount As System.Nullable(Of Decimal)
	
	Private _TransactionDocumentType As String
	
	Private _TransactionDocumentDate As System.Nullable(Of Date)
	
	Private _TransactionDocumentNumber As String
	
	Private _TransactionType As String
	
	Private _TransactionAttachment As String
	
	Private _TransactionMemo As String
	
	Private _TransactionStatus As System.Nullable(Of Boolean)
	
	Private _TransactionAddedBy As System.Nullable(Of System.Guid)
	
	Private _TransactionAddedDate As System.Nullable(Of Date)
	
	Private _TransactionUpdatedBy As System.Nullable(Of System.Guid)
	
	Private _TransactionUpdatedDate As System.Nullable(Of Date)
	
	Private _APP_BankAccount As EntityRef(Of APP_BankAccount)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTransactionBankAccountIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnTransactionBankAccountIDChanged()
    End Sub
    Partial Private Sub OnTransactionAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTransactionAmountChanged()
    End Sub
    Partial Private Sub OnTransactionDocumentTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTransactionDocumentTypeChanged()
    End Sub
    Partial Private Sub OnTransactionDocumentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTransactionDocumentDateChanged()
    End Sub
    Partial Private Sub OnTransactionDocumentNumberChanging(value As String)
    End Sub
    Partial Private Sub OnTransactionDocumentNumberChanged()
    End Sub
    Partial Private Sub OnTransactionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTransactionTypeChanged()
    End Sub
    Partial Private Sub OnTransactionAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnTransactionAttachmentChanged()
    End Sub
    Partial Private Sub OnTransactionMemoChanging(value As String)
    End Sub
    Partial Private Sub OnTransactionMemoChanged()
    End Sub
    Partial Private Sub OnTransactionStatusChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTransactionStatusChanged()
    End Sub
    Partial Private Sub OnTransactionAddedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnTransactionAddedByChanged()
    End Sub
    Partial Private Sub OnTransactionAddedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTransactionAddedDateChanged()
    End Sub
    Partial Private Sub OnTransactionUpdatedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnTransactionUpdatedByChanged()
    End Sub
    Partial Private Sub OnTransactionUpdatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTransactionUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_BankAccount = CType(Nothing, EntityRef(Of APP_BankAccount))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionBankAccountID", DbType:="BigInt")>  _
	Public Property TransactionBankAccountID() As System.Nullable(Of Long)
		Get
			Return Me._TransactionBankAccountID
		End Get
		Set
			If (Me._TransactionBankAccountID.Equals(value) = false) Then
				If Me._APP_BankAccount.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTransactionBankAccountIDChanging(value)
				Me.SendPropertyChanging
				Me._TransactionBankAccountID = value
				Me.SendPropertyChanged("TransactionBankAccountID")
				Me.OnTransactionBankAccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionAmount", DbType:="Money")>  _
	Public Property TransactionAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._TransactionAmount
		End Get
		Set
			If (Me._TransactionAmount.Equals(value) = false) Then
				Me.OnTransactionAmountChanging(value)
				Me.SendPropertyChanging
				Me._TransactionAmount = value
				Me.SendPropertyChanged("TransactionAmount")
				Me.OnTransactionAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionDocumentType", DbType:="NVarChar(10)")>  _
	Public Property TransactionDocumentType() As String
		Get
			Return Me._TransactionDocumentType
		End Get
		Set
			If (String.Equals(Me._TransactionDocumentType, value) = false) Then
				Me.OnTransactionDocumentTypeChanging(value)
				Me.SendPropertyChanging
				Me._TransactionDocumentType = value
				Me.SendPropertyChanged("TransactionDocumentType")
				Me.OnTransactionDocumentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionDocumentDate", DbType:="Date")>  _
	Public Property TransactionDocumentDate() As System.Nullable(Of Date)
		Get
			Return Me._TransactionDocumentDate
		End Get
		Set
			If (Me._TransactionDocumentDate.Equals(value) = false) Then
				Me.OnTransactionDocumentDateChanging(value)
				Me.SendPropertyChanging
				Me._TransactionDocumentDate = value
				Me.SendPropertyChanged("TransactionDocumentDate")
				Me.OnTransactionDocumentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionDocumentNumber", DbType:="NVarChar(30)")>  _
	Public Property TransactionDocumentNumber() As String
		Get
			Return Me._TransactionDocumentNumber
		End Get
		Set
			If (String.Equals(Me._TransactionDocumentNumber, value) = false) Then
				Me.OnTransactionDocumentNumberChanging(value)
				Me.SendPropertyChanging
				Me._TransactionDocumentNumber = value
				Me.SendPropertyChanged("TransactionDocumentNumber")
				Me.OnTransactionDocumentNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionType", DbType:="NVarChar(10)")>  _
	Public Property TransactionType() As String
		Get
			Return Me._TransactionType
		End Get
		Set
			If (String.Equals(Me._TransactionType, value) = false) Then
				Me.OnTransactionTypeChanging(value)
				Me.SendPropertyChanging
				Me._TransactionType = value
				Me.SendPropertyChanged("TransactionType")
				Me.OnTransactionTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionAttachment", DbType:="NVarChar(MAX)")>  _
	Public Property TransactionAttachment() As String
		Get
			Return Me._TransactionAttachment
		End Get
		Set
			If (String.Equals(Me._TransactionAttachment, value) = false) Then
				Me.OnTransactionAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._TransactionAttachment = value
				Me.SendPropertyChanged("TransactionAttachment")
				Me.OnTransactionAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionMemo", DbType:="NVarChar(MAX)")>  _
	Public Property TransactionMemo() As String
		Get
			Return Me._TransactionMemo
		End Get
		Set
			If (String.Equals(Me._TransactionMemo, value) = false) Then
				Me.OnTransactionMemoChanging(value)
				Me.SendPropertyChanging
				Me._TransactionMemo = value
				Me.SendPropertyChanged("TransactionMemo")
				Me.OnTransactionMemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionStatus", DbType:="Bit")>  _
	Public Property TransactionStatus() As System.Nullable(Of Boolean)
		Get
			Return Me._TransactionStatus
		End Get
		Set
			If (Me._TransactionStatus.Equals(value) = false) Then
				Me.OnTransactionStatusChanging(value)
				Me.SendPropertyChanging
				Me._TransactionStatus = value
				Me.SendPropertyChanged("TransactionStatus")
				Me.OnTransactionStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionAddedBy", DbType:="UniqueIdentifier")>  _
	Public Property TransactionAddedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._TransactionAddedBy
		End Get
		Set
			If (Me._TransactionAddedBy.Equals(value) = false) Then
				Me.OnTransactionAddedByChanging(value)
				Me.SendPropertyChanging
				Me._TransactionAddedBy = value
				Me.SendPropertyChanged("TransactionAddedBy")
				Me.OnTransactionAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionAddedDate", DbType:="DateTime")>  _
	Public Property TransactionAddedDate() As System.Nullable(Of Date)
		Get
			Return Me._TransactionAddedDate
		End Get
		Set
			If (Me._TransactionAddedDate.Equals(value) = false) Then
				Me.OnTransactionAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._TransactionAddedDate = value
				Me.SendPropertyChanged("TransactionAddedDate")
				Me.OnTransactionAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionUpdatedBy", DbType:="UniqueIdentifier")>  _
	Public Property TransactionUpdatedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._TransactionUpdatedBy
		End Get
		Set
			If (Me._TransactionUpdatedBy.Equals(value) = false) Then
				Me.OnTransactionUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._TransactionUpdatedBy = value
				Me.SendPropertyChanged("TransactionUpdatedBy")
				Me.OnTransactionUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionUpdatedDate", DbType:="DateTime")>  _
	Public Property TransactionUpdatedDate() As System.Nullable(Of Date)
		Get
			Return Me._TransactionUpdatedDate
		End Get
		Set
			If (Me._TransactionUpdatedDate.Equals(value) = false) Then
				Me.OnTransactionUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._TransactionUpdatedDate = value
				Me.SendPropertyChanged("TransactionUpdatedDate")
				Me.OnTransactionUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_BankAccount_APP_BankAccountTransaction", Storage:="_APP_BankAccount", ThisKey:="TransactionBankAccountID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_BankAccount() As APP_BankAccount
		Get
			Return Me._APP_BankAccount.Entity
		End Get
		Set
			Dim previousValue As APP_BankAccount = Me._APP_BankAccount.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_BankAccount.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_BankAccount.Entity = Nothing
					previousValue.APP_BankAccountTransactions.Remove(Me)
				End If
				Me._APP_BankAccount.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_BankAccountTransactions.Add(Me)
					Me._TransactionBankAccountID = value.ID
				Else
					Me._TransactionBankAccountID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_BankAccount")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_Banks")>  _
Partial Public Class APP_Bank
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _BankArabicName As String
	
	Private _BankEnglishName As String
	
	Private _BankSwiftCode As String
	
	Private _BankIBANCode As String
	
	Private _BankLatitudeCoordinates As String
	
	Private _BankLongitudeCoordinates As String
	
	Private _BankURLMap As String
	
	Private _BankWebsite As String
	
	Private _BankOnlineBankingURL As String
	
	Private _BankDescription As String
	
	Private _BankAddedBy As System.Nullable(Of System.Guid)
	
	Private _BankAddedDate As System.Nullable(Of Date)
	
	Private _BankUpdatedBy As System.Nullable(Of System.Guid)
	
	Private _BankUpdatedDate As System.Nullable(Of Date)
	
	Private _APP_BankAccounts As EntitySet(Of APP_BankAccount)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnBankArabicNameChanging(value As String)
    End Sub
    Partial Private Sub OnBankArabicNameChanged()
    End Sub
    Partial Private Sub OnBankEnglishNameChanging(value As String)
    End Sub
    Partial Private Sub OnBankEnglishNameChanged()
    End Sub
    Partial Private Sub OnBankSwiftCodeChanging(value As String)
    End Sub
    Partial Private Sub OnBankSwiftCodeChanged()
    End Sub
    Partial Private Sub OnBankIBANCodeChanging(value As String)
    End Sub
    Partial Private Sub OnBankIBANCodeChanged()
    End Sub
    Partial Private Sub OnBankLatitudeCoordinatesChanging(value As String)
    End Sub
    Partial Private Sub OnBankLatitudeCoordinatesChanged()
    End Sub
    Partial Private Sub OnBankLongitudeCoordinatesChanging(value As String)
    End Sub
    Partial Private Sub OnBankLongitudeCoordinatesChanged()
    End Sub
    Partial Private Sub OnBankURLMapChanging(value As String)
    End Sub
    Partial Private Sub OnBankURLMapChanged()
    End Sub
    Partial Private Sub OnBankWebsiteChanging(value As String)
    End Sub
    Partial Private Sub OnBankWebsiteChanged()
    End Sub
    Partial Private Sub OnBankOnlineBankingURLChanging(value As String)
    End Sub
    Partial Private Sub OnBankOnlineBankingURLChanged()
    End Sub
    Partial Private Sub OnBankDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnBankDescriptionChanged()
    End Sub
    Partial Private Sub OnBankAddedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnBankAddedByChanged()
    End Sub
    Partial Private Sub OnBankAddedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBankAddedDateChanged()
    End Sub
    Partial Private Sub OnBankUpdatedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnBankUpdatedByChanged()
    End Sub
    Partial Private Sub OnBankUpdatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBankUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_BankAccounts = New EntitySet(Of APP_BankAccount)(AddressOf Me.attach_APP_BankAccounts, AddressOf Me.detach_APP_BankAccounts)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankArabicName", DbType:="NVarChar(30)")>  _
	Public Property BankArabicName() As String
		Get
			Return Me._BankArabicName
		End Get
		Set
			If (String.Equals(Me._BankArabicName, value) = false) Then
				Me.OnBankArabicNameChanging(value)
				Me.SendPropertyChanging
				Me._BankArabicName = value
				Me.SendPropertyChanged("BankArabicName")
				Me.OnBankArabicNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankEnglishName", DbType:="NVarChar(30)")>  _
	Public Property BankEnglishName() As String
		Get
			Return Me._BankEnglishName
		End Get
		Set
			If (String.Equals(Me._BankEnglishName, value) = false) Then
				Me.OnBankEnglishNameChanging(value)
				Me.SendPropertyChanging
				Me._BankEnglishName = value
				Me.SendPropertyChanged("BankEnglishName")
				Me.OnBankEnglishNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankSwiftCode", DbType:="NVarChar(30)")>  _
	Public Property BankSwiftCode() As String
		Get
			Return Me._BankSwiftCode
		End Get
		Set
			If (String.Equals(Me._BankSwiftCode, value) = false) Then
				Me.OnBankSwiftCodeChanging(value)
				Me.SendPropertyChanging
				Me._BankSwiftCode = value
				Me.SendPropertyChanged("BankSwiftCode")
				Me.OnBankSwiftCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankIBANCode", DbType:="NVarChar(30)")>  _
	Public Property BankIBANCode() As String
		Get
			Return Me._BankIBANCode
		End Get
		Set
			If (String.Equals(Me._BankIBANCode, value) = false) Then
				Me.OnBankIBANCodeChanging(value)
				Me.SendPropertyChanging
				Me._BankIBANCode = value
				Me.SendPropertyChanged("BankIBANCode")
				Me.OnBankIBANCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankLatitudeCoordinates", DbType:="NVarChar(15)")>  _
	Public Property BankLatitudeCoordinates() As String
		Get
			Return Me._BankLatitudeCoordinates
		End Get
		Set
			If (String.Equals(Me._BankLatitudeCoordinates, value) = false) Then
				Me.OnBankLatitudeCoordinatesChanging(value)
				Me.SendPropertyChanging
				Me._BankLatitudeCoordinates = value
				Me.SendPropertyChanged("BankLatitudeCoordinates")
				Me.OnBankLatitudeCoordinatesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankLongitudeCoordinates", DbType:="NVarChar(15)")>  _
	Public Property BankLongitudeCoordinates() As String
		Get
			Return Me._BankLongitudeCoordinates
		End Get
		Set
			If (String.Equals(Me._BankLongitudeCoordinates, value) = false) Then
				Me.OnBankLongitudeCoordinatesChanging(value)
				Me.SendPropertyChanging
				Me._BankLongitudeCoordinates = value
				Me.SendPropertyChanged("BankLongitudeCoordinates")
				Me.OnBankLongitudeCoordinatesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankURLMap", DbType:="NVarChar(60)")>  _
	Public Property BankURLMap() As String
		Get
			Return Me._BankURLMap
		End Get
		Set
			If (String.Equals(Me._BankURLMap, value) = false) Then
				Me.OnBankURLMapChanging(value)
				Me.SendPropertyChanging
				Me._BankURLMap = value
				Me.SendPropertyChanged("BankURLMap")
				Me.OnBankURLMapChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankWebsite", DbType:="NVarChar(30)")>  _
	Public Property BankWebsite() As String
		Get
			Return Me._BankWebsite
		End Get
		Set
			If (String.Equals(Me._BankWebsite, value) = false) Then
				Me.OnBankWebsiteChanging(value)
				Me.SendPropertyChanging
				Me._BankWebsite = value
				Me.SendPropertyChanged("BankWebsite")
				Me.OnBankWebsiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankOnlineBankingURL", DbType:="NVarChar(60)")>  _
	Public Property BankOnlineBankingURL() As String
		Get
			Return Me._BankOnlineBankingURL
		End Get
		Set
			If (String.Equals(Me._BankOnlineBankingURL, value) = false) Then
				Me.OnBankOnlineBankingURLChanging(value)
				Me.SendPropertyChanging
				Me._BankOnlineBankingURL = value
				Me.SendPropertyChanged("BankOnlineBankingURL")
				Me.OnBankOnlineBankingURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankDescription", DbType:="NVarChar(MAX)")>  _
	Public Property BankDescription() As String
		Get
			Return Me._BankDescription
		End Get
		Set
			If (String.Equals(Me._BankDescription, value) = false) Then
				Me.OnBankDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._BankDescription = value
				Me.SendPropertyChanged("BankDescription")
				Me.OnBankDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAddedBy", DbType:="UniqueIdentifier")>  _
	Public Property BankAddedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._BankAddedBy
		End Get
		Set
			If (Me._BankAddedBy.Equals(value) = false) Then
				Me.OnBankAddedByChanging(value)
				Me.SendPropertyChanging
				Me._BankAddedBy = value
				Me.SendPropertyChanged("BankAddedBy")
				Me.OnBankAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAddedDate", DbType:="DateTime")>  _
	Public Property BankAddedDate() As System.Nullable(Of Date)
		Get
			Return Me._BankAddedDate
		End Get
		Set
			If (Me._BankAddedDate.Equals(value) = false) Then
				Me.OnBankAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._BankAddedDate = value
				Me.SendPropertyChanged("BankAddedDate")
				Me.OnBankAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankUpdatedBy", DbType:="UniqueIdentifier")>  _
	Public Property BankUpdatedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._BankUpdatedBy
		End Get
		Set
			If (Me._BankUpdatedBy.Equals(value) = false) Then
				Me.OnBankUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._BankUpdatedBy = value
				Me.SendPropertyChanged("BankUpdatedBy")
				Me.OnBankUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankUpdatedDate", DbType:="DateTime")>  _
	Public Property BankUpdatedDate() As System.Nullable(Of Date)
		Get
			Return Me._BankUpdatedDate
		End Get
		Set
			If (Me._BankUpdatedDate.Equals(value) = false) Then
				Me.OnBankUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._BankUpdatedDate = value
				Me.SendPropertyChanged("BankUpdatedDate")
				Me.OnBankUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_Bank_APP_BankAccount", Storage:="_APP_BankAccounts", ThisKey:="ID", OtherKey:="BankID")>  _
	Public Property APP_BankAccounts() As EntitySet(Of APP_BankAccount)
		Get
			Return Me._APP_BankAccounts
		End Get
		Set
			Me._APP_BankAccounts.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_APP_BankAccounts(ByVal entity As APP_BankAccount)
		Me.SendPropertyChanging
		entity.APP_Bank = Me
	End Sub
	
	Private Sub detach_APP_BankAccounts(ByVal entity As APP_BankAccount)
		Me.SendPropertyChanging
		entity.APP_Bank = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_BankTransactionBetweenAccounts")>  _
Partial Public Class APP_BankTransactionBetweenAccount
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _TransactionSenderBankAccountID As System.Nullable(Of Long)
	
	Private _TransactionReceiveBankAccountID As System.Nullable(Of Long)
	
	Private _TransactionAmount As System.Nullable(Of Decimal)
	
	Private _TransactionDocumentType As String
	
	Private _TransactionDocumentDate As System.Nullable(Of Date)
	
	Private _TransactionDocumentNumber As String
	
	Private _TransactionAttachment As String
	
	Private _TransactionMemo As String
	
	Private _TransactionStatus As System.Nullable(Of Boolean)
	
	Private _TransactionAddedBy As System.Nullable(Of System.Guid)
	
	Private _TransactionAddedDate As System.Nullable(Of Date)
	
	Private _TransactionUpdatedBy As System.Nullable(Of System.Guid)
	
	Private _TransactionUpdatedDate As System.Nullable(Of Date)
	
	Private _APP_BankAccount As EntityRef(Of APP_BankAccount)
	
	Private _APP_BankAccount1 As EntityRef(Of APP_BankAccount)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTransactionSenderBankAccountIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnTransactionSenderBankAccountIDChanged()
    End Sub
    Partial Private Sub OnTransactionReceiveBankAccountIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnTransactionReceiveBankAccountIDChanged()
    End Sub
    Partial Private Sub OnTransactionAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTransactionAmountChanged()
    End Sub
    Partial Private Sub OnTransactionDocumentTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTransactionDocumentTypeChanged()
    End Sub
    Partial Private Sub OnTransactionDocumentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTransactionDocumentDateChanged()
    End Sub
    Partial Private Sub OnTransactionDocumentNumberChanging(value As String)
    End Sub
    Partial Private Sub OnTransactionDocumentNumberChanged()
    End Sub
    Partial Private Sub OnTransactionAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnTransactionAttachmentChanged()
    End Sub
    Partial Private Sub OnTransactionMemoChanging(value As String)
    End Sub
    Partial Private Sub OnTransactionMemoChanged()
    End Sub
    Partial Private Sub OnTransactionStatusChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTransactionStatusChanged()
    End Sub
    Partial Private Sub OnTransactionAddedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnTransactionAddedByChanged()
    End Sub
    Partial Private Sub OnTransactionAddedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTransactionAddedDateChanged()
    End Sub
    Partial Private Sub OnTransactionUpdatedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnTransactionUpdatedByChanged()
    End Sub
    Partial Private Sub OnTransactionUpdatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnTransactionUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_BankAccount = CType(Nothing, EntityRef(Of APP_BankAccount))
		Me._APP_BankAccount1 = CType(Nothing, EntityRef(Of APP_BankAccount))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionSenderBankAccountID", DbType:="BigInt")>  _
	Public Property TransactionSenderBankAccountID() As System.Nullable(Of Long)
		Get
			Return Me._TransactionSenderBankAccountID
		End Get
		Set
			If (Me._TransactionSenderBankAccountID.Equals(value) = false) Then
				If Me._APP_BankAccount1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTransactionSenderBankAccountIDChanging(value)
				Me.SendPropertyChanging
				Me._TransactionSenderBankAccountID = value
				Me.SendPropertyChanged("TransactionSenderBankAccountID")
				Me.OnTransactionSenderBankAccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionReceiveBankAccountID", DbType:="BigInt")>  _
	Public Property TransactionReceiveBankAccountID() As System.Nullable(Of Long)
		Get
			Return Me._TransactionReceiveBankAccountID
		End Get
		Set
			If (Me._TransactionReceiveBankAccountID.Equals(value) = false) Then
				If Me._APP_BankAccount.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTransactionReceiveBankAccountIDChanging(value)
				Me.SendPropertyChanging
				Me._TransactionReceiveBankAccountID = value
				Me.SendPropertyChanged("TransactionReceiveBankAccountID")
				Me.OnTransactionReceiveBankAccountIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionAmount", DbType:="Money")>  _
	Public Property TransactionAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._TransactionAmount
		End Get
		Set
			If (Me._TransactionAmount.Equals(value) = false) Then
				Me.OnTransactionAmountChanging(value)
				Me.SendPropertyChanging
				Me._TransactionAmount = value
				Me.SendPropertyChanged("TransactionAmount")
				Me.OnTransactionAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionDocumentType", DbType:="NVarChar(10)")>  _
	Public Property TransactionDocumentType() As String
		Get
			Return Me._TransactionDocumentType
		End Get
		Set
			If (String.Equals(Me._TransactionDocumentType, value) = false) Then
				Me.OnTransactionDocumentTypeChanging(value)
				Me.SendPropertyChanging
				Me._TransactionDocumentType = value
				Me.SendPropertyChanged("TransactionDocumentType")
				Me.OnTransactionDocumentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionDocumentDate", DbType:="Date")>  _
	Public Property TransactionDocumentDate() As System.Nullable(Of Date)
		Get
			Return Me._TransactionDocumentDate
		End Get
		Set
			If (Me._TransactionDocumentDate.Equals(value) = false) Then
				Me.OnTransactionDocumentDateChanging(value)
				Me.SendPropertyChanging
				Me._TransactionDocumentDate = value
				Me.SendPropertyChanged("TransactionDocumentDate")
				Me.OnTransactionDocumentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionDocumentNumber", DbType:="NVarChar(30)")>  _
	Public Property TransactionDocumentNumber() As String
		Get
			Return Me._TransactionDocumentNumber
		End Get
		Set
			If (String.Equals(Me._TransactionDocumentNumber, value) = false) Then
				Me.OnTransactionDocumentNumberChanging(value)
				Me.SendPropertyChanging
				Me._TransactionDocumentNumber = value
				Me.SendPropertyChanged("TransactionDocumentNumber")
				Me.OnTransactionDocumentNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionAttachment", DbType:="NVarChar(120)")>  _
	Public Property TransactionAttachment() As String
		Get
			Return Me._TransactionAttachment
		End Get
		Set
			If (String.Equals(Me._TransactionAttachment, value) = false) Then
				Me.OnTransactionAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._TransactionAttachment = value
				Me.SendPropertyChanged("TransactionAttachment")
				Me.OnTransactionAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionMemo", DbType:="NVarChar(MAX)")>  _
	Public Property TransactionMemo() As String
		Get
			Return Me._TransactionMemo
		End Get
		Set
			If (String.Equals(Me._TransactionMemo, value) = false) Then
				Me.OnTransactionMemoChanging(value)
				Me.SendPropertyChanging
				Me._TransactionMemo = value
				Me.SendPropertyChanged("TransactionMemo")
				Me.OnTransactionMemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionStatus", DbType:="Bit")>  _
	Public Property TransactionStatus() As System.Nullable(Of Boolean)
		Get
			Return Me._TransactionStatus
		End Get
		Set
			If (Me._TransactionStatus.Equals(value) = false) Then
				Me.OnTransactionStatusChanging(value)
				Me.SendPropertyChanging
				Me._TransactionStatus = value
				Me.SendPropertyChanged("TransactionStatus")
				Me.OnTransactionStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionAddedBy", DbType:="UniqueIdentifier")>  _
	Public Property TransactionAddedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._TransactionAddedBy
		End Get
		Set
			If (Me._TransactionAddedBy.Equals(value) = false) Then
				Me.OnTransactionAddedByChanging(value)
				Me.SendPropertyChanging
				Me._TransactionAddedBy = value
				Me.SendPropertyChanged("TransactionAddedBy")
				Me.OnTransactionAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionAddedDate", DbType:="DateTime")>  _
	Public Property TransactionAddedDate() As System.Nullable(Of Date)
		Get
			Return Me._TransactionAddedDate
		End Get
		Set
			If (Me._TransactionAddedDate.Equals(value) = false) Then
				Me.OnTransactionAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._TransactionAddedDate = value
				Me.SendPropertyChanged("TransactionAddedDate")
				Me.OnTransactionAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionUpdatedBy", DbType:="UniqueIdentifier")>  _
	Public Property TransactionUpdatedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._TransactionUpdatedBy
		End Get
		Set
			If (Me._TransactionUpdatedBy.Equals(value) = false) Then
				Me.OnTransactionUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._TransactionUpdatedBy = value
				Me.SendPropertyChanged("TransactionUpdatedBy")
				Me.OnTransactionUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionUpdatedDate", DbType:="DateTime")>  _
	Public Property TransactionUpdatedDate() As System.Nullable(Of Date)
		Get
			Return Me._TransactionUpdatedDate
		End Get
		Set
			If (Me._TransactionUpdatedDate.Equals(value) = false) Then
				Me.OnTransactionUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._TransactionUpdatedDate = value
				Me.SendPropertyChanged("TransactionUpdatedDate")
				Me.OnTransactionUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_BankAccount_APP_BankTransactionBetweenAccount", Storage:="_APP_BankAccount", ThisKey:="TransactionReceiveBankAccountID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_BankAccount() As APP_BankAccount
		Get
			Return Me._APP_BankAccount.Entity
		End Get
		Set
			Dim previousValue As APP_BankAccount = Me._APP_BankAccount.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_BankAccount.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_BankAccount.Entity = Nothing
					previousValue.APP_BankTransactionBetweenAccounts.Remove(Me)
				End If
				Me._APP_BankAccount.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_BankTransactionBetweenAccounts.Add(Me)
					Me._TransactionReceiveBankAccountID = value.ID
				Else
					Me._TransactionReceiveBankAccountID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_BankAccount")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_BankAccount_APP_BankTransactionBetweenAccount1", Storage:="_APP_BankAccount1", ThisKey:="TransactionSenderBankAccountID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_BankAccount1() As APP_BankAccount
		Get
			Return Me._APP_BankAccount1.Entity
		End Get
		Set
			Dim previousValue As APP_BankAccount = Me._APP_BankAccount1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_BankAccount1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_BankAccount1.Entity = Nothing
					previousValue.APP_BankTransactionBetweenAccounts1.Remove(Me)
				End If
				Me._APP_BankAccount1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_BankTransactionBetweenAccounts1.Add(Me)
					Me._TransactionSenderBankAccountID = value.ID
				Else
					Me._TransactionSenderBankAccountID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_BankAccount1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_Clients")>  _
Partial Public Class APP_Client
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _ClientContactID As System.Nullable(Of Long)
	
	Private _ClientStaffName1 As String
	
	Private _ClientStaffName1GSM As String
	
	Private _ClientStaffName2 As String
	
	Private _ClientStaffName2GSM As String
	
	Private _ClientDocument As String
	
	Private _ClientMemo As String
	
	Private _ClientAddedBy As System.Nullable(Of System.Guid)
	
	Private _ClientAddedDate As System.Nullable(Of Date)
	
	Private _ClientUpdatedBy As System.Nullable(Of System.Guid)
	
	Private _ClientUpdatedDate As System.Nullable(Of Date)
	
	Private _ClientStatus As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnClientContactIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnClientContactIDChanged()
    End Sub
    Partial Private Sub OnClientStaffName1Changing(value As String)
    End Sub
    Partial Private Sub OnClientStaffName1Changed()
    End Sub
    Partial Private Sub OnClientStaffName1GSMChanging(value As String)
    End Sub
    Partial Private Sub OnClientStaffName1GSMChanged()
    End Sub
    Partial Private Sub OnClientStaffName2Changing(value As String)
    End Sub
    Partial Private Sub OnClientStaffName2Changed()
    End Sub
    Partial Private Sub OnClientStaffName2GSMChanging(value As String)
    End Sub
    Partial Private Sub OnClientStaffName2GSMChanged()
    End Sub
    Partial Private Sub OnClientDocumentChanging(value As String)
    End Sub
    Partial Private Sub OnClientDocumentChanged()
    End Sub
    Partial Private Sub OnClientMemoChanging(value As String)
    End Sub
    Partial Private Sub OnClientMemoChanged()
    End Sub
    Partial Private Sub OnClientAddedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnClientAddedByChanged()
    End Sub
    Partial Private Sub OnClientAddedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnClientAddedDateChanged()
    End Sub
    Partial Private Sub OnClientUpdatedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnClientUpdatedByChanged()
    End Sub
    Partial Private Sub OnClientUpdatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnClientUpdatedDateChanged()
    End Sub
    Partial Private Sub OnClientStatusChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnClientStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientContactID", DbType:="BigInt")>  _
	Public Property ClientContactID() As System.Nullable(Of Long)
		Get
			Return Me._ClientContactID
		End Get
		Set
			If (Me._ClientContactID.Equals(value) = false) Then
				Me.OnClientContactIDChanging(value)
				Me.SendPropertyChanging
				Me._ClientContactID = value
				Me.SendPropertyChanged("ClientContactID")
				Me.OnClientContactIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientStaffName1", DbType:="NVarChar(50)")>  _
	Public Property ClientStaffName1() As String
		Get
			Return Me._ClientStaffName1
		End Get
		Set
			If (String.Equals(Me._ClientStaffName1, value) = false) Then
				Me.OnClientStaffName1Changing(value)
				Me.SendPropertyChanging
				Me._ClientStaffName1 = value
				Me.SendPropertyChanged("ClientStaffName1")
				Me.OnClientStaffName1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientStaffName1GSM", DbType:="NVarChar(20)")>  _
	Public Property ClientStaffName1GSM() As String
		Get
			Return Me._ClientStaffName1GSM
		End Get
		Set
			If (String.Equals(Me._ClientStaffName1GSM, value) = false) Then
				Me.OnClientStaffName1GSMChanging(value)
				Me.SendPropertyChanging
				Me._ClientStaffName1GSM = value
				Me.SendPropertyChanged("ClientStaffName1GSM")
				Me.OnClientStaffName1GSMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientStaffName2", DbType:="NVarChar(50)")>  _
	Public Property ClientStaffName2() As String
		Get
			Return Me._ClientStaffName2
		End Get
		Set
			If (String.Equals(Me._ClientStaffName2, value) = false) Then
				Me.OnClientStaffName2Changing(value)
				Me.SendPropertyChanging
				Me._ClientStaffName2 = value
				Me.SendPropertyChanged("ClientStaffName2")
				Me.OnClientStaffName2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientStaffName2GSM", DbType:="NVarChar(20)")>  _
	Public Property ClientStaffName2GSM() As String
		Get
			Return Me._ClientStaffName2GSM
		End Get
		Set
			If (String.Equals(Me._ClientStaffName2GSM, value) = false) Then
				Me.OnClientStaffName2GSMChanging(value)
				Me.SendPropertyChanging
				Me._ClientStaffName2GSM = value
				Me.SendPropertyChanged("ClientStaffName2GSM")
				Me.OnClientStaffName2GSMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientDocument", DbType:="NVarChar(120)")>  _
	Public Property ClientDocument() As String
		Get
			Return Me._ClientDocument
		End Get
		Set
			If (String.Equals(Me._ClientDocument, value) = false) Then
				Me.OnClientDocumentChanging(value)
				Me.SendPropertyChanging
				Me._ClientDocument = value
				Me.SendPropertyChanged("ClientDocument")
				Me.OnClientDocumentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientMemo", DbType:="NVarChar(MAX)")>  _
	Public Property ClientMemo() As String
		Get
			Return Me._ClientMemo
		End Get
		Set
			If (String.Equals(Me._ClientMemo, value) = false) Then
				Me.OnClientMemoChanging(value)
				Me.SendPropertyChanging
				Me._ClientMemo = value
				Me.SendPropertyChanged("ClientMemo")
				Me.OnClientMemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientAddedBy", DbType:="UniqueIdentifier")>  _
	Public Property ClientAddedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._ClientAddedBy
		End Get
		Set
			If (Me._ClientAddedBy.Equals(value) = false) Then
				Me.OnClientAddedByChanging(value)
				Me.SendPropertyChanging
				Me._ClientAddedBy = value
				Me.SendPropertyChanged("ClientAddedBy")
				Me.OnClientAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientAddedDate", DbType:="DateTime")>  _
	Public Property ClientAddedDate() As System.Nullable(Of Date)
		Get
			Return Me._ClientAddedDate
		End Get
		Set
			If (Me._ClientAddedDate.Equals(value) = false) Then
				Me.OnClientAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._ClientAddedDate = value
				Me.SendPropertyChanged("ClientAddedDate")
				Me.OnClientAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientUpdatedBy", DbType:="UniqueIdentifier")>  _
	Public Property ClientUpdatedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._ClientUpdatedBy
		End Get
		Set
			If (Me._ClientUpdatedBy.Equals(value) = false) Then
				Me.OnClientUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._ClientUpdatedBy = value
				Me.SendPropertyChanged("ClientUpdatedBy")
				Me.OnClientUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientUpdatedDate", DbType:="DateTime")>  _
	Public Property ClientUpdatedDate() As System.Nullable(Of Date)
		Get
			Return Me._ClientUpdatedDate
		End Get
		Set
			If (Me._ClientUpdatedDate.Equals(value) = false) Then
				Me.OnClientUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._ClientUpdatedDate = value
				Me.SendPropertyChanged("ClientUpdatedDate")
				Me.OnClientUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClientStatus", DbType:="Bit")>  _
	Public Property ClientStatus() As System.Nullable(Of Boolean)
		Get
			Return Me._ClientStatus
		End Get
		Set
			If (Me._ClientStatus.Equals(value) = false) Then
				Me.OnClientStatusChanging(value)
				Me.SendPropertyChanging
				Me._ClientStatus = value
				Me.SendPropertyChanged("ClientStatus")
				Me.OnClientStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_Contacts")>  _
Partial Public Class APP_Contact
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _ContactName As String
	
	Private _ContactNickName As String
	
	Private _ContactIdentityNumber As String
	
	Private _ContactIdentityAttachment As String
	
	Private _ContactGSM1CountryCode As String
	
	Private _ContactGSM1 As String
	
	Private _ContactGSM2CountryCode As String
	
	Private _ContactGSM2 As String
	
	Private _ContactCommercialRegisterNumber As String
	
	Private _ContactCommercialRegisterAttachment As String
	
	Private _ContactEmail As String
	
	Private _ContactOfficePhone As String
	
	Private _ContactOfficeFax As String
	
	Private _ContactWebsite As String
	
	Private _ContactPOBox As String
	
	Private _ContactPostalCode As String
	
	Private _ContactLatitudeCoordinates As String
	
	Private _ContactLongitudeCoordinates As String
	
	Private _ContactURLMap As String
	
	Private _ContactMemo As String
	
	Private _ContactAddedBy As System.Nullable(Of System.Guid)
	
	Private _ContactAddedDate As System.Nullable(Of Date)
	
	Private _ContactUpdatedBy As System.Nullable(Of System.Guid)
	
	Private _ContactUpdatedDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnContactNameChanged()
    End Sub
    Partial Private Sub OnContactNickNameChanging(value As String)
    End Sub
    Partial Private Sub OnContactNickNameChanged()
    End Sub
    Partial Private Sub OnContactIdentityNumberChanging(value As String)
    End Sub
    Partial Private Sub OnContactIdentityNumberChanged()
    End Sub
    Partial Private Sub OnContactIdentityAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnContactIdentityAttachmentChanged()
    End Sub
    Partial Private Sub OnContactGSM1CountryCodeChanging(value As String)
    End Sub
    Partial Private Sub OnContactGSM1CountryCodeChanged()
    End Sub
    Partial Private Sub OnContactGSM1Changing(value As String)
    End Sub
    Partial Private Sub OnContactGSM1Changed()
    End Sub
    Partial Private Sub OnContactGSM2CountryCodeChanging(value As String)
    End Sub
    Partial Private Sub OnContactGSM2CountryCodeChanged()
    End Sub
    Partial Private Sub OnContactGSM2Changing(value As String)
    End Sub
    Partial Private Sub OnContactGSM2Changed()
    End Sub
    Partial Private Sub OnContactCommercialRegisterNumberChanging(value As String)
    End Sub
    Partial Private Sub OnContactCommercialRegisterNumberChanged()
    End Sub
    Partial Private Sub OnContactCommercialRegisterAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnContactCommercialRegisterAttachmentChanged()
    End Sub
    Partial Private Sub OnContactEmailChanging(value As String)
    End Sub
    Partial Private Sub OnContactEmailChanged()
    End Sub
    Partial Private Sub OnContactOfficePhoneChanging(value As String)
    End Sub
    Partial Private Sub OnContactOfficePhoneChanged()
    End Sub
    Partial Private Sub OnContactOfficeFaxChanging(value As String)
    End Sub
    Partial Private Sub OnContactOfficeFaxChanged()
    End Sub
    Partial Private Sub OnContactWebsiteChanging(value As String)
    End Sub
    Partial Private Sub OnContactWebsiteChanged()
    End Sub
    Partial Private Sub OnContactPOBoxChanging(value As String)
    End Sub
    Partial Private Sub OnContactPOBoxChanged()
    End Sub
    Partial Private Sub OnContactPostalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnContactPostalCodeChanged()
    End Sub
    Partial Private Sub OnContactLatitudeCoordinatesChanging(value As String)
    End Sub
    Partial Private Sub OnContactLatitudeCoordinatesChanged()
    End Sub
    Partial Private Sub OnContactLongitudeCoordinatesChanging(value As String)
    End Sub
    Partial Private Sub OnContactLongitudeCoordinatesChanged()
    End Sub
    Partial Private Sub OnContactURLMapChanging(value As String)
    End Sub
    Partial Private Sub OnContactURLMapChanged()
    End Sub
    Partial Private Sub OnContactMemoChanging(value As String)
    End Sub
    Partial Private Sub OnContactMemoChanged()
    End Sub
    Partial Private Sub OnContactAddedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnContactAddedByChanged()
    End Sub
    Partial Private Sub OnContactAddedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnContactAddedDateChanged()
    End Sub
    Partial Private Sub OnContactUpdatedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnContactUpdatedByChanged()
    End Sub
    Partial Private Sub OnContactUpdatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnContactUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="NVarChar(50)")>  _
	Public Property ContactName() As String
		Get
			Return Me._ContactName
		End Get
		Set
			If (String.Equals(Me._ContactName, value) = false) Then
				Me.OnContactNameChanging(value)
				Me.SendPropertyChanging
				Me._ContactName = value
				Me.SendPropertyChanged("ContactName")
				Me.OnContactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactNickName", DbType:="NVarChar(30)")>  _
	Public Property ContactNickName() As String
		Get
			Return Me._ContactNickName
		End Get
		Set
			If (String.Equals(Me._ContactNickName, value) = false) Then
				Me.OnContactNickNameChanging(value)
				Me.SendPropertyChanging
				Me._ContactNickName = value
				Me.SendPropertyChanged("ContactNickName")
				Me.OnContactNickNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactIdentityNumber", DbType:="NVarChar(20)")>  _
	Public Property ContactIdentityNumber() As String
		Get
			Return Me._ContactIdentityNumber
		End Get
		Set
			If (String.Equals(Me._ContactIdentityNumber, value) = false) Then
				Me.OnContactIdentityNumberChanging(value)
				Me.SendPropertyChanging
				Me._ContactIdentityNumber = value
				Me.SendPropertyChanged("ContactIdentityNumber")
				Me.OnContactIdentityNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactIdentityAttachment", DbType:="NVarChar(120)")>  _
	Public Property ContactIdentityAttachment() As String
		Get
			Return Me._ContactIdentityAttachment
		End Get
		Set
			If (String.Equals(Me._ContactIdentityAttachment, value) = false) Then
				Me.OnContactIdentityAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._ContactIdentityAttachment = value
				Me.SendPropertyChanged("ContactIdentityAttachment")
				Me.OnContactIdentityAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactGSM1CountryCode", DbType:="NVarChar(10)")>  _
	Public Property ContactGSM1CountryCode() As String
		Get
			Return Me._ContactGSM1CountryCode
		End Get
		Set
			If (String.Equals(Me._ContactGSM1CountryCode, value) = false) Then
				Me.OnContactGSM1CountryCodeChanging(value)
				Me.SendPropertyChanging
				Me._ContactGSM1CountryCode = value
				Me.SendPropertyChanged("ContactGSM1CountryCode")
				Me.OnContactGSM1CountryCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactGSM1", DbType:="NVarChar(20)")>  _
	Public Property ContactGSM1() As String
		Get
			Return Me._ContactGSM1
		End Get
		Set
			If (String.Equals(Me._ContactGSM1, value) = false) Then
				Me.OnContactGSM1Changing(value)
				Me.SendPropertyChanging
				Me._ContactGSM1 = value
				Me.SendPropertyChanged("ContactGSM1")
				Me.OnContactGSM1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactGSM2CountryCode", DbType:="NVarChar(10)")>  _
	Public Property ContactGSM2CountryCode() As String
		Get
			Return Me._ContactGSM2CountryCode
		End Get
		Set
			If (String.Equals(Me._ContactGSM2CountryCode, value) = false) Then
				Me.OnContactGSM2CountryCodeChanging(value)
				Me.SendPropertyChanging
				Me._ContactGSM2CountryCode = value
				Me.SendPropertyChanged("ContactGSM2CountryCode")
				Me.OnContactGSM2CountryCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactGSM2", DbType:="NVarChar(20)")>  _
	Public Property ContactGSM2() As String
		Get
			Return Me._ContactGSM2
		End Get
		Set
			If (String.Equals(Me._ContactGSM2, value) = false) Then
				Me.OnContactGSM2Changing(value)
				Me.SendPropertyChanging
				Me._ContactGSM2 = value
				Me.SendPropertyChanged("ContactGSM2")
				Me.OnContactGSM2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactCommercialRegisterNumber", DbType:="NVarChar(20)")>  _
	Public Property ContactCommercialRegisterNumber() As String
		Get
			Return Me._ContactCommercialRegisterNumber
		End Get
		Set
			If (String.Equals(Me._ContactCommercialRegisterNumber, value) = false) Then
				Me.OnContactCommercialRegisterNumberChanging(value)
				Me.SendPropertyChanging
				Me._ContactCommercialRegisterNumber = value
				Me.SendPropertyChanged("ContactCommercialRegisterNumber")
				Me.OnContactCommercialRegisterNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactCommercialRegisterAttachment", DbType:="NVarChar(120)")>  _
	Public Property ContactCommercialRegisterAttachment() As String
		Get
			Return Me._ContactCommercialRegisterAttachment
		End Get
		Set
			If (String.Equals(Me._ContactCommercialRegisterAttachment, value) = false) Then
				Me.OnContactCommercialRegisterAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._ContactCommercialRegisterAttachment = value
				Me.SendPropertyChanged("ContactCommercialRegisterAttachment")
				Me.OnContactCommercialRegisterAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactEmail", DbType:="NVarChar(50)")>  _
	Public Property ContactEmail() As String
		Get
			Return Me._ContactEmail
		End Get
		Set
			If (String.Equals(Me._ContactEmail, value) = false) Then
				Me.OnContactEmailChanging(value)
				Me.SendPropertyChanging
				Me._ContactEmail = value
				Me.SendPropertyChanged("ContactEmail")
				Me.OnContactEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactOfficePhone", DbType:="NVarChar(20)")>  _
	Public Property ContactOfficePhone() As String
		Get
			Return Me._ContactOfficePhone
		End Get
		Set
			If (String.Equals(Me._ContactOfficePhone, value) = false) Then
				Me.OnContactOfficePhoneChanging(value)
				Me.SendPropertyChanging
				Me._ContactOfficePhone = value
				Me.SendPropertyChanged("ContactOfficePhone")
				Me.OnContactOfficePhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactOfficeFax", DbType:="NVarChar(20)")>  _
	Public Property ContactOfficeFax() As String
		Get
			Return Me._ContactOfficeFax
		End Get
		Set
			If (String.Equals(Me._ContactOfficeFax, value) = false) Then
				Me.OnContactOfficeFaxChanging(value)
				Me.SendPropertyChanging
				Me._ContactOfficeFax = value
				Me.SendPropertyChanged("ContactOfficeFax")
				Me.OnContactOfficeFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactWebsite", DbType:="NVarChar(40)")>  _
	Public Property ContactWebsite() As String
		Get
			Return Me._ContactWebsite
		End Get
		Set
			If (String.Equals(Me._ContactWebsite, value) = false) Then
				Me.OnContactWebsiteChanging(value)
				Me.SendPropertyChanging
				Me._ContactWebsite = value
				Me.SendPropertyChanged("ContactWebsite")
				Me.OnContactWebsiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactPOBox", DbType:="NVarChar(15)")>  _
	Public Property ContactPOBox() As String
		Get
			Return Me._ContactPOBox
		End Get
		Set
			If (String.Equals(Me._ContactPOBox, value) = false) Then
				Me.OnContactPOBoxChanging(value)
				Me.SendPropertyChanging
				Me._ContactPOBox = value
				Me.SendPropertyChanged("ContactPOBox")
				Me.OnContactPOBoxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactPostalCode", DbType:="NVarChar(15)")>  _
	Public Property ContactPostalCode() As String
		Get
			Return Me._ContactPostalCode
		End Get
		Set
			If (String.Equals(Me._ContactPostalCode, value) = false) Then
				Me.OnContactPostalCodeChanging(value)
				Me.SendPropertyChanging
				Me._ContactPostalCode = value
				Me.SendPropertyChanged("ContactPostalCode")
				Me.OnContactPostalCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactLatitudeCoordinates", DbType:="NVarChar(15)")>  _
	Public Property ContactLatitudeCoordinates() As String
		Get
			Return Me._ContactLatitudeCoordinates
		End Get
		Set
			If (String.Equals(Me._ContactLatitudeCoordinates, value) = false) Then
				Me.OnContactLatitudeCoordinatesChanging(value)
				Me.SendPropertyChanging
				Me._ContactLatitudeCoordinates = value
				Me.SendPropertyChanged("ContactLatitudeCoordinates")
				Me.OnContactLatitudeCoordinatesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactLongitudeCoordinates", DbType:="NVarChar(15)")>  _
	Public Property ContactLongitudeCoordinates() As String
		Get
			Return Me._ContactLongitudeCoordinates
		End Get
		Set
			If (String.Equals(Me._ContactLongitudeCoordinates, value) = false) Then
				Me.OnContactLongitudeCoordinatesChanging(value)
				Me.SendPropertyChanging
				Me._ContactLongitudeCoordinates = value
				Me.SendPropertyChanged("ContactLongitudeCoordinates")
				Me.OnContactLongitudeCoordinatesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactURLMap", DbType:="NVarChar(60)")>  _
	Public Property ContactURLMap() As String
		Get
			Return Me._ContactURLMap
		End Get
		Set
			If (String.Equals(Me._ContactURLMap, value) = false) Then
				Me.OnContactURLMapChanging(value)
				Me.SendPropertyChanging
				Me._ContactURLMap = value
				Me.SendPropertyChanged("ContactURLMap")
				Me.OnContactURLMapChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactMemo", DbType:="NVarChar(MAX)")>  _
	Public Property ContactMemo() As String
		Get
			Return Me._ContactMemo
		End Get
		Set
			If (String.Equals(Me._ContactMemo, value) = false) Then
				Me.OnContactMemoChanging(value)
				Me.SendPropertyChanging
				Me._ContactMemo = value
				Me.SendPropertyChanged("ContactMemo")
				Me.OnContactMemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactAddedBy", DbType:="UniqueIdentifier")>  _
	Public Property ContactAddedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._ContactAddedBy
		End Get
		Set
			If (Me._ContactAddedBy.Equals(value) = false) Then
				Me.OnContactAddedByChanging(value)
				Me.SendPropertyChanging
				Me._ContactAddedBy = value
				Me.SendPropertyChanged("ContactAddedBy")
				Me.OnContactAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactAddedDate", DbType:="DateTime")>  _
	Public Property ContactAddedDate() As System.Nullable(Of Date)
		Get
			Return Me._ContactAddedDate
		End Get
		Set
			If (Me._ContactAddedDate.Equals(value) = false) Then
				Me.OnContactAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._ContactAddedDate = value
				Me.SendPropertyChanged("ContactAddedDate")
				Me.OnContactAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactUpdatedBy", DbType:="UniqueIdentifier")>  _
	Public Property ContactUpdatedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._ContactUpdatedBy
		End Get
		Set
			If (Me._ContactUpdatedBy.Equals(value) = false) Then
				Me.OnContactUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._ContactUpdatedBy = value
				Me.SendPropertyChanged("ContactUpdatedBy")
				Me.OnContactUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactUpdatedDate", DbType:="DateTime")>  _
	Public Property ContactUpdatedDate() As System.Nullable(Of Date)
		Get
			Return Me._ContactUpdatedDate
		End Get
		Set
			If (Me._ContactUpdatedDate.Equals(value) = false) Then
				Me.OnContactUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._ContactUpdatedDate = value
				Me.SendPropertyChanged("ContactUpdatedDate")
				Me.OnContactUpdatedDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_Countries")>  _
Partial Public Class APP_Country
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Name As String
	
	Private _NiceName As String
	
	Private _ISO As String
	
	Private _ISO3 As String
	
	Private _NumCode As String
	
	Private _PhoneCode As Long
	
	Private _Flag As System.Data.Linq.Binary
	
	Private _CurrencyCode As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnNiceNameChanging(value As String)
    End Sub
    Partial Private Sub OnNiceNameChanged()
    End Sub
    Partial Private Sub OnISOChanging(value As String)
    End Sub
    Partial Private Sub OnISOChanged()
    End Sub
    Partial Private Sub OnISO3Changing(value As String)
    End Sub
    Partial Private Sub OnISO3Changed()
    End Sub
    Partial Private Sub OnNumCodeChanging(value As String)
    End Sub
    Partial Private Sub OnNumCodeChanged()
    End Sub
    Partial Private Sub OnPhoneCodeChanging(value As Long)
    End Sub
    Partial Private Sub OnPhoneCodeChanged()
    End Sub
    Partial Private Sub OnFlagChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnFlagChanged()
    End Sub
    Partial Private Sub OnCurrencyCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCurrencyCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NiceName", DbType:="NVarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property NiceName() As String
		Get
			Return Me._NiceName
		End Get
		Set
			If (String.Equals(Me._NiceName, value) = false) Then
				Me.OnNiceNameChanging(value)
				Me.SendPropertyChanging
				Me._NiceName = value
				Me.SendPropertyChanged("NiceName")
				Me.OnNiceNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ISO", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property ISO() As String
		Get
			Return Me._ISO
		End Get
		Set
			If (String.Equals(Me._ISO, value) = false) Then
				Me.OnISOChanging(value)
				Me.SendPropertyChanging
				Me._ISO = value
				Me.SendPropertyChanged("ISO")
				Me.OnISOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ISO3", DbType:="Char(3)")>  _
	Public Property ISO3() As String
		Get
			Return Me._ISO3
		End Get
		Set
			If (String.Equals(Me._ISO3, value) = false) Then
				Me.OnISO3Changing(value)
				Me.SendPropertyChanging
				Me._ISO3 = value
				Me.SendPropertyChanged("ISO3")
				Me.OnISO3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumCode", DbType:="NVarChar(6)")>  _
	Public Property NumCode() As String
		Get
			Return Me._NumCode
		End Get
		Set
			If (String.Equals(Me._NumCode, value) = false) Then
				Me.OnNumCodeChanging(value)
				Me.SendPropertyChanging
				Me._NumCode = value
				Me.SendPropertyChanged("NumCode")
				Me.OnNumCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneCode", DbType:="BigInt NOT NULL")>  _
	Public Property PhoneCode() As Long
		Get
			Return Me._PhoneCode
		End Get
		Set
			If ((Me._PhoneCode = value)  _
						= false) Then
				Me.OnPhoneCodeChanging(value)
				Me.SendPropertyChanging
				Me._PhoneCode = value
				Me.SendPropertyChanged("PhoneCode")
				Me.OnPhoneCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Flag", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Flag() As System.Data.Linq.Binary
		Get
			Return Me._Flag
		End Get
		Set
			If (Object.Equals(Me._Flag, value) = false) Then
				Me.OnFlagChanging(value)
				Me.SendPropertyChanging
				Me._Flag = value
				Me.SendPropertyChanged("Flag")
				Me.OnFlagChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrencyCode", DbType:="NVarChar(6)")>  _
	Public Property CurrencyCode() As String
		Get
			Return Me._CurrencyCode
		End Get
		Set
			If (String.Equals(Me._CurrencyCode, value) = false) Then
				Me.OnCurrencyCodeChanging(value)
				Me.SendPropertyChanging
				Me._CurrencyCode = value
				Me.SendPropertyChanged("CurrencyCode")
				Me.OnCurrencyCodeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_FlatAttachments")>  _
Partial Public Class APP_FlatAttachment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _FlatID As System.Nullable(Of Long)
	
	Private _FlatAttachmentName As String
	
	Private _FlatAttachment As String
	
	Private _APP_Flat As EntityRef(Of APP_Flat)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFlatIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFlatIDChanged()
    End Sub
    Partial Private Sub OnFlatAttachmentNameChanging(value As String)
    End Sub
    Partial Private Sub OnFlatAttachmentNameChanged()
    End Sub
    Partial Private Sub OnFlatAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnFlatAttachmentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_Flat = CType(Nothing, EntityRef(Of APP_Flat))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatID", DbType:="BigInt")>  _
	Public Property FlatID() As System.Nullable(Of Long)
		Get
			Return Me._FlatID
		End Get
		Set
			If (Me._FlatID.Equals(value) = false) Then
				If Me._APP_Flat.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFlatIDChanging(value)
				Me.SendPropertyChanging
				Me._FlatID = value
				Me.SendPropertyChanged("FlatID")
				Me.OnFlatIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatAttachmentName", DbType:="NVarChar(50)")>  _
	Public Property FlatAttachmentName() As String
		Get
			Return Me._FlatAttachmentName
		End Get
		Set
			If (String.Equals(Me._FlatAttachmentName, value) = false) Then
				Me.OnFlatAttachmentNameChanging(value)
				Me.SendPropertyChanging
				Me._FlatAttachmentName = value
				Me.SendPropertyChanged("FlatAttachmentName")
				Me.OnFlatAttachmentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatAttachment", DbType:="NVarChar(MAX)")>  _
	Public Property FlatAttachment() As String
		Get
			Return Me._FlatAttachment
		End Get
		Set
			If (String.Equals(Me._FlatAttachment, value) = false) Then
				Me.OnFlatAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._FlatAttachment = value
				Me.SendPropertyChanged("FlatAttachment")
				Me.OnFlatAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_Flat_APP_FlatAttachment", Storage:="_APP_Flat", ThisKey:="FlatID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_Flat() As APP_Flat
		Get
			Return Me._APP_Flat.Entity
		End Get
		Set
			Dim previousValue As APP_Flat = Me._APP_Flat.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_Flat.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_Flat.Entity = Nothing
					previousValue.APP_FlatAttachments.Remove(Me)
				End If
				Me._APP_Flat.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_FlatAttachments.Add(Me)
					Me._FlatID = value.ID
				Else
					Me._FlatID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_Flat")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_Flats")>  _
Partial Public Class APP_Flat
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _FlatName As String
	
	Private _FlatOfficialName As String
	
	Private _FlatCompanyName As String
	
	Private _FlatRentingPrice As System.Nullable(Of Decimal)
	
	Private _FlatProvince As System.Nullable(Of Long)
	
	Private _FlatCity As System.Nullable(Of Long)
	
	Private _FlatVillage As System.Nullable(Of Long)
	
	Private _FlatPlace As String
	
	Private _FlatMemo As String
	
	Private _FlatRoomNumber As System.Nullable(Of Long)
	
	Private _FlatBathroomNumber As System.Nullable(Of Long)
	
	Private _FlatBathroomType As String
	
	Private _FlatAddedBy As System.Nullable(Of System.Guid)
	
	Private _FlatAddedDate As System.Nullable(Of Date)
	
	Private _FlatUpdatedBy As System.Nullable(Of System.Guid)
	
	Private _FlatUpdatedDate As System.Nullable(Of Date)
	
	Private _APP_FlatAttachments As EntitySet(Of APP_FlatAttachment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFlatNameChanging(value As String)
    End Sub
    Partial Private Sub OnFlatNameChanged()
    End Sub
    Partial Private Sub OnFlatOfficialNameChanging(value As String)
    End Sub
    Partial Private Sub OnFlatOfficialNameChanged()
    End Sub
    Partial Private Sub OnFlatCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnFlatCompanyNameChanged()
    End Sub
    Partial Private Sub OnFlatRentingPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFlatRentingPriceChanged()
    End Sub
    Partial Private Sub OnFlatProvinceChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFlatProvinceChanged()
    End Sub
    Partial Private Sub OnFlatCityChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFlatCityChanged()
    End Sub
    Partial Private Sub OnFlatVillageChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFlatVillageChanged()
    End Sub
    Partial Private Sub OnFlatPlaceChanging(value As String)
    End Sub
    Partial Private Sub OnFlatPlaceChanged()
    End Sub
    Partial Private Sub OnFlatMemoChanging(value As String)
    End Sub
    Partial Private Sub OnFlatMemoChanged()
    End Sub
    Partial Private Sub OnFlatRoomNumberChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFlatRoomNumberChanged()
    End Sub
    Partial Private Sub OnFlatBathroomNumberChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFlatBathroomNumberChanged()
    End Sub
    Partial Private Sub OnFlatBathroomTypeChanging(value As String)
    End Sub
    Partial Private Sub OnFlatBathroomTypeChanged()
    End Sub
    Partial Private Sub OnFlatAddedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnFlatAddedByChanged()
    End Sub
    Partial Private Sub OnFlatAddedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFlatAddedDateChanged()
    End Sub
    Partial Private Sub OnFlatUpdatedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnFlatUpdatedByChanged()
    End Sub
    Partial Private Sub OnFlatUpdatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFlatUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_FlatAttachments = New EntitySet(Of APP_FlatAttachment)(AddressOf Me.attach_APP_FlatAttachments, AddressOf Me.detach_APP_FlatAttachments)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatName", DbType:="NVarChar(150)")>  _
	Public Property FlatName() As String
		Get
			Return Me._FlatName
		End Get
		Set
			If (String.Equals(Me._FlatName, value) = false) Then
				Me.OnFlatNameChanging(value)
				Me.SendPropertyChanging
				Me._FlatName = value
				Me.SendPropertyChanged("FlatName")
				Me.OnFlatNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatOfficialName", DbType:="NVarChar(150)")>  _
	Public Property FlatOfficialName() As String
		Get
			Return Me._FlatOfficialName
		End Get
		Set
			If (String.Equals(Me._FlatOfficialName, value) = false) Then
				Me.OnFlatOfficialNameChanging(value)
				Me.SendPropertyChanging
				Me._FlatOfficialName = value
				Me.SendPropertyChanged("FlatOfficialName")
				Me.OnFlatOfficialNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatCompanyName", DbType:="NVarChar(150)")>  _
	Public Property FlatCompanyName() As String
		Get
			Return Me._FlatCompanyName
		End Get
		Set
			If (String.Equals(Me._FlatCompanyName, value) = false) Then
				Me.OnFlatCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._FlatCompanyName = value
				Me.SendPropertyChanged("FlatCompanyName")
				Me.OnFlatCompanyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatRentingPrice", DbType:="Money")>  _
	Public Property FlatRentingPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._FlatRentingPrice
		End Get
		Set
			If (Me._FlatRentingPrice.Equals(value) = false) Then
				Me.OnFlatRentingPriceChanging(value)
				Me.SendPropertyChanging
				Me._FlatRentingPrice = value
				Me.SendPropertyChanged("FlatRentingPrice")
				Me.OnFlatRentingPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatProvince", DbType:="BigInt")>  _
	Public Property FlatProvince() As System.Nullable(Of Long)
		Get
			Return Me._FlatProvince
		End Get
		Set
			If (Me._FlatProvince.Equals(value) = false) Then
				Me.OnFlatProvinceChanging(value)
				Me.SendPropertyChanging
				Me._FlatProvince = value
				Me.SendPropertyChanged("FlatProvince")
				Me.OnFlatProvinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatCity", DbType:="BigInt")>  _
	Public Property FlatCity() As System.Nullable(Of Long)
		Get
			Return Me._FlatCity
		End Get
		Set
			If (Me._FlatCity.Equals(value) = false) Then
				Me.OnFlatCityChanging(value)
				Me.SendPropertyChanging
				Me._FlatCity = value
				Me.SendPropertyChanged("FlatCity")
				Me.OnFlatCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatVillage", DbType:="BigInt")>  _
	Public Property FlatVillage() As System.Nullable(Of Long)
		Get
			Return Me._FlatVillage
		End Get
		Set
			If (Me._FlatVillage.Equals(value) = false) Then
				Me.OnFlatVillageChanging(value)
				Me.SendPropertyChanging
				Me._FlatVillage = value
				Me.SendPropertyChanged("FlatVillage")
				Me.OnFlatVillageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatPlace", DbType:="NVarChar(50)")>  _
	Public Property FlatPlace() As String
		Get
			Return Me._FlatPlace
		End Get
		Set
			If (String.Equals(Me._FlatPlace, value) = false) Then
				Me.OnFlatPlaceChanging(value)
				Me.SendPropertyChanging
				Me._FlatPlace = value
				Me.SendPropertyChanged("FlatPlace")
				Me.OnFlatPlaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatMemo", DbType:="NVarChar(MAX)")>  _
	Public Property FlatMemo() As String
		Get
			Return Me._FlatMemo
		End Get
		Set
			If (String.Equals(Me._FlatMemo, value) = false) Then
				Me.OnFlatMemoChanging(value)
				Me.SendPropertyChanging
				Me._FlatMemo = value
				Me.SendPropertyChanged("FlatMemo")
				Me.OnFlatMemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatRoomNumber", DbType:="BigInt")>  _
	Public Property FlatRoomNumber() As System.Nullable(Of Long)
		Get
			Return Me._FlatRoomNumber
		End Get
		Set
			If (Me._FlatRoomNumber.Equals(value) = false) Then
				Me.OnFlatRoomNumberChanging(value)
				Me.SendPropertyChanging
				Me._FlatRoomNumber = value
				Me.SendPropertyChanged("FlatRoomNumber")
				Me.OnFlatRoomNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatBathroomNumber", DbType:="BigInt")>  _
	Public Property FlatBathroomNumber() As System.Nullable(Of Long)
		Get
			Return Me._FlatBathroomNumber
		End Get
		Set
			If (Me._FlatBathroomNumber.Equals(value) = false) Then
				Me.OnFlatBathroomNumberChanging(value)
				Me.SendPropertyChanging
				Me._FlatBathroomNumber = value
				Me.SendPropertyChanged("FlatBathroomNumber")
				Me.OnFlatBathroomNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatBathroomType", DbType:="NVarChar(50)")>  _
	Public Property FlatBathroomType() As String
		Get
			Return Me._FlatBathroomType
		End Get
		Set
			If (String.Equals(Me._FlatBathroomType, value) = false) Then
				Me.OnFlatBathroomTypeChanging(value)
				Me.SendPropertyChanging
				Me._FlatBathroomType = value
				Me.SendPropertyChanged("FlatBathroomType")
				Me.OnFlatBathroomTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatAddedBy", DbType:="UniqueIdentifier")>  _
	Public Property FlatAddedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._FlatAddedBy
		End Get
		Set
			If (Me._FlatAddedBy.Equals(value) = false) Then
				Me.OnFlatAddedByChanging(value)
				Me.SendPropertyChanging
				Me._FlatAddedBy = value
				Me.SendPropertyChanged("FlatAddedBy")
				Me.OnFlatAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatAddedDate", DbType:="DateTime")>  _
	Public Property FlatAddedDate() As System.Nullable(Of Date)
		Get
			Return Me._FlatAddedDate
		End Get
		Set
			If (Me._FlatAddedDate.Equals(value) = false) Then
				Me.OnFlatAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._FlatAddedDate = value
				Me.SendPropertyChanged("FlatAddedDate")
				Me.OnFlatAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatUpdatedBy", DbType:="UniqueIdentifier")>  _
	Public Property FlatUpdatedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._FlatUpdatedBy
		End Get
		Set
			If (Me._FlatUpdatedBy.Equals(value) = false) Then
				Me.OnFlatUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._FlatUpdatedBy = value
				Me.SendPropertyChanged("FlatUpdatedBy")
				Me.OnFlatUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatUpdatedDate", DbType:="DateTime")>  _
	Public Property FlatUpdatedDate() As System.Nullable(Of Date)
		Get
			Return Me._FlatUpdatedDate
		End Get
		Set
			If (Me._FlatUpdatedDate.Equals(value) = false) Then
				Me.OnFlatUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._FlatUpdatedDate = value
				Me.SendPropertyChanged("FlatUpdatedDate")
				Me.OnFlatUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_Flat_APP_FlatAttachment", Storage:="_APP_FlatAttachments", ThisKey:="ID", OtherKey:="FlatID")>  _
	Public Property APP_FlatAttachments() As EntitySet(Of APP_FlatAttachment)
		Get
			Return Me._APP_FlatAttachments
		End Get
		Set
			Me._APP_FlatAttachments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_APP_FlatAttachments(ByVal entity As APP_FlatAttachment)
		Me.SendPropertyChanging
		entity.APP_Flat = Me
	End Sub
	
	Private Sub detach_APP_FlatAttachments(ByVal entity As APP_FlatAttachment)
		Me.SendPropertyChanging
		entity.APP_Flat = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_FreeLandAttachments")>  _
Partial Public Class APP_FreeLandAttachment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _FreeLandID As System.Nullable(Of Long)
	
	Private _FreeLandAttachmentName As String
	
	Private _FreeLandAttachment As String
	
	Private _APP_FreeLand As EntityRef(Of APP_FreeLand)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFreeLandIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFreeLandIDChanged()
    End Sub
    Partial Private Sub OnFreeLandAttachmentNameChanging(value As String)
    End Sub
    Partial Private Sub OnFreeLandAttachmentNameChanged()
    End Sub
    Partial Private Sub OnFreeLandAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnFreeLandAttachmentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_FreeLand = CType(Nothing, EntityRef(Of APP_FreeLand))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandID", DbType:="BigInt")>  _
	Public Property FreeLandID() As System.Nullable(Of Long)
		Get
			Return Me._FreeLandID
		End Get
		Set
			If (Me._FreeLandID.Equals(value) = false) Then
				If Me._APP_FreeLand.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFreeLandIDChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandID = value
				Me.SendPropertyChanged("FreeLandID")
				Me.OnFreeLandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandAttachmentName", DbType:="NVarChar(50)")>  _
	Public Property FreeLandAttachmentName() As String
		Get
			Return Me._FreeLandAttachmentName
		End Get
		Set
			If (String.Equals(Me._FreeLandAttachmentName, value) = false) Then
				Me.OnFreeLandAttachmentNameChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandAttachmentName = value
				Me.SendPropertyChanged("FreeLandAttachmentName")
				Me.OnFreeLandAttachmentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandAttachment", DbType:="NVarChar(MAX)")>  _
	Public Property FreeLandAttachment() As String
		Get
			Return Me._FreeLandAttachment
		End Get
		Set
			If (String.Equals(Me._FreeLandAttachment, value) = false) Then
				Me.OnFreeLandAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandAttachment = value
				Me.SendPropertyChanged("FreeLandAttachment")
				Me.OnFreeLandAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_FreeLand_APP_FreeLandAttachment", Storage:="_APP_FreeLand", ThisKey:="FreeLandID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_FreeLand() As APP_FreeLand
		Get
			Return Me._APP_FreeLand.Entity
		End Get
		Set
			Dim previousValue As APP_FreeLand = Me._APP_FreeLand.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_FreeLand.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_FreeLand.Entity = Nothing
					previousValue.APP_FreeLandAttachments.Remove(Me)
				End If
				Me._APP_FreeLand.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_FreeLandAttachments.Add(Me)
					Me._FreeLandID = value.ID
				Else
					Me._FreeLandID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_FreeLand")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_FreeLands")>  _
Partial Public Class APP_FreeLand
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _FreeLandName As String
	
	Private _FreeLandOfficialName As String
	
	Private _FreeLandCompanyName As String
	
	Private _FreeLandRentingPrice As System.Nullable(Of Decimal)
	
	Private _FreeLandProvince As System.Nullable(Of Long)
	
	Private _FreeLandCity As System.Nullable(Of Long)
	
	Private _FreeLandVillage As System.Nullable(Of Long)
	
	Private _FreeLandPlace As String
	
	Private _FreeLandMemo As String
	
	Private _FreeLandAddedBy As System.Nullable(Of System.Guid)
	
	Private _FreeLandAddedDate As System.Nullable(Of Date)
	
	Private _FreeLandUpdatedBy As System.Nullable(Of System.Guid)
	
	Private _FreeLandUpdatedDate As System.Nullable(Of Date)
	
	Private _APP_FreeLandAttachments As EntitySet(Of APP_FreeLandAttachment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFreeLandNameChanging(value As String)
    End Sub
    Partial Private Sub OnFreeLandNameChanged()
    End Sub
    Partial Private Sub OnFreeLandOfficialNameChanging(value As String)
    End Sub
    Partial Private Sub OnFreeLandOfficialNameChanged()
    End Sub
    Partial Private Sub OnFreeLandCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnFreeLandCompanyNameChanged()
    End Sub
    Partial Private Sub OnFreeLandRentingPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFreeLandRentingPriceChanged()
    End Sub
    Partial Private Sub OnFreeLandProvinceChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFreeLandProvinceChanged()
    End Sub
    Partial Private Sub OnFreeLandCityChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFreeLandCityChanged()
    End Sub
    Partial Private Sub OnFreeLandVillageChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFreeLandVillageChanged()
    End Sub
    Partial Private Sub OnFreeLandPlaceChanging(value As String)
    End Sub
    Partial Private Sub OnFreeLandPlaceChanged()
    End Sub
    Partial Private Sub OnFreeLandMemoChanging(value As String)
    End Sub
    Partial Private Sub OnFreeLandMemoChanged()
    End Sub
    Partial Private Sub OnFreeLandAddedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnFreeLandAddedByChanged()
    End Sub
    Partial Private Sub OnFreeLandAddedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFreeLandAddedDateChanged()
    End Sub
    Partial Private Sub OnFreeLandUpdatedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnFreeLandUpdatedByChanged()
    End Sub
    Partial Private Sub OnFreeLandUpdatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFreeLandUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_FreeLandAttachments = New EntitySet(Of APP_FreeLandAttachment)(AddressOf Me.attach_APP_FreeLandAttachments, AddressOf Me.detach_APP_FreeLandAttachments)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandName", DbType:="NVarChar(150)")>  _
	Public Property FreeLandName() As String
		Get
			Return Me._FreeLandName
		End Get
		Set
			If (String.Equals(Me._FreeLandName, value) = false) Then
				Me.OnFreeLandNameChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandName = value
				Me.SendPropertyChanged("FreeLandName")
				Me.OnFreeLandNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandOfficialName", DbType:="NVarChar(150)")>  _
	Public Property FreeLandOfficialName() As String
		Get
			Return Me._FreeLandOfficialName
		End Get
		Set
			If (String.Equals(Me._FreeLandOfficialName, value) = false) Then
				Me.OnFreeLandOfficialNameChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandOfficialName = value
				Me.SendPropertyChanged("FreeLandOfficialName")
				Me.OnFreeLandOfficialNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandCompanyName", DbType:="NVarChar(150)")>  _
	Public Property FreeLandCompanyName() As String
		Get
			Return Me._FreeLandCompanyName
		End Get
		Set
			If (String.Equals(Me._FreeLandCompanyName, value) = false) Then
				Me.OnFreeLandCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandCompanyName = value
				Me.SendPropertyChanged("FreeLandCompanyName")
				Me.OnFreeLandCompanyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandRentingPrice", DbType:="Money")>  _
	Public Property FreeLandRentingPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._FreeLandRentingPrice
		End Get
		Set
			If (Me._FreeLandRentingPrice.Equals(value) = false) Then
				Me.OnFreeLandRentingPriceChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandRentingPrice = value
				Me.SendPropertyChanged("FreeLandRentingPrice")
				Me.OnFreeLandRentingPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandProvince", DbType:="BigInt")>  _
	Public Property FreeLandProvince() As System.Nullable(Of Long)
		Get
			Return Me._FreeLandProvince
		End Get
		Set
			If (Me._FreeLandProvince.Equals(value) = false) Then
				Me.OnFreeLandProvinceChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandProvince = value
				Me.SendPropertyChanged("FreeLandProvince")
				Me.OnFreeLandProvinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandCity", DbType:="BigInt")>  _
	Public Property FreeLandCity() As System.Nullable(Of Long)
		Get
			Return Me._FreeLandCity
		End Get
		Set
			If (Me._FreeLandCity.Equals(value) = false) Then
				Me.OnFreeLandCityChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandCity = value
				Me.SendPropertyChanged("FreeLandCity")
				Me.OnFreeLandCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandVillage", DbType:="BigInt")>  _
	Public Property FreeLandVillage() As System.Nullable(Of Long)
		Get
			Return Me._FreeLandVillage
		End Get
		Set
			If (Me._FreeLandVillage.Equals(value) = false) Then
				Me.OnFreeLandVillageChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandVillage = value
				Me.SendPropertyChanged("FreeLandVillage")
				Me.OnFreeLandVillageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandPlace", DbType:="NVarChar(50)")>  _
	Public Property FreeLandPlace() As String
		Get
			Return Me._FreeLandPlace
		End Get
		Set
			If (String.Equals(Me._FreeLandPlace, value) = false) Then
				Me.OnFreeLandPlaceChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandPlace = value
				Me.SendPropertyChanged("FreeLandPlace")
				Me.OnFreeLandPlaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandMemo", DbType:="NVarChar(MAX)")>  _
	Public Property FreeLandMemo() As String
		Get
			Return Me._FreeLandMemo
		End Get
		Set
			If (String.Equals(Me._FreeLandMemo, value) = false) Then
				Me.OnFreeLandMemoChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandMemo = value
				Me.SendPropertyChanged("FreeLandMemo")
				Me.OnFreeLandMemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandAddedBy", DbType:="UniqueIdentifier")>  _
	Public Property FreeLandAddedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._FreeLandAddedBy
		End Get
		Set
			If (Me._FreeLandAddedBy.Equals(value) = false) Then
				Me.OnFreeLandAddedByChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandAddedBy = value
				Me.SendPropertyChanged("FreeLandAddedBy")
				Me.OnFreeLandAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandAddedDate", DbType:="DateTime")>  _
	Public Property FreeLandAddedDate() As System.Nullable(Of Date)
		Get
			Return Me._FreeLandAddedDate
		End Get
		Set
			If (Me._FreeLandAddedDate.Equals(value) = false) Then
				Me.OnFreeLandAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandAddedDate = value
				Me.SendPropertyChanged("FreeLandAddedDate")
				Me.OnFreeLandAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandUpdatedBy", DbType:="UniqueIdentifier")>  _
	Public Property FreeLandUpdatedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._FreeLandUpdatedBy
		End Get
		Set
			If (Me._FreeLandUpdatedBy.Equals(value) = false) Then
				Me.OnFreeLandUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandUpdatedBy = value
				Me.SendPropertyChanged("FreeLandUpdatedBy")
				Me.OnFreeLandUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FreeLandUpdatedDate", DbType:="DateTime")>  _
	Public Property FreeLandUpdatedDate() As System.Nullable(Of Date)
		Get
			Return Me._FreeLandUpdatedDate
		End Get
		Set
			If (Me._FreeLandUpdatedDate.Equals(value) = false) Then
				Me.OnFreeLandUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._FreeLandUpdatedDate = value
				Me.SendPropertyChanged("FreeLandUpdatedDate")
				Me.OnFreeLandUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_FreeLand_APP_FreeLandAttachment", Storage:="_APP_FreeLandAttachments", ThisKey:="ID", OtherKey:="FreeLandID")>  _
	Public Property APP_FreeLandAttachments() As EntitySet(Of APP_FreeLandAttachment)
		Get
			Return Me._APP_FreeLandAttachments
		End Get
		Set
			Me._APP_FreeLandAttachments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_APP_FreeLandAttachments(ByVal entity As APP_FreeLandAttachment)
		Me.SendPropertyChanging
		entity.APP_FreeLand = Me
	End Sub
	
	Private Sub detach_APP_FreeLandAttachments(ByVal entity As APP_FreeLandAttachment)
		Me.SendPropertyChanging
		entity.APP_FreeLand = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingAttachments")>  _
Partial Public Class APP_MultiFloorBuildingAttachment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _BuildingID As System.Nullable(Of Long)
	
	Private _BuildingAttachmentName As String
	
	Private _BuildingAttachment As String
	
	Private _BuildingAttachmentType As System.Nullable(Of Char)
	
	Private _APP_MultiFloorBuilding As EntityRef(Of APP_MultiFloorBuilding)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnBuildingIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnBuildingIDChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_MultiFloorBuilding = CType(Nothing, EntityRef(Of APP_MultiFloorBuilding))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingID", DbType:="BigInt")>  _
	Public Property BuildingID() As System.Nullable(Of Long)
		Get
			Return Me._BuildingID
		End Get
		Set
			If (Me._BuildingID.Equals(value) = false) Then
				If Me._APP_MultiFloorBuilding.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBuildingIDChanging(value)
				Me.SendPropertyChanging
				Me._BuildingID = value
				Me.SendPropertyChanged("BuildingID")
				Me.OnBuildingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentName", DbType:="NVarChar(50)")>  _
	Public Property BuildingAttachmentName() As String
		Get
			Return Me._BuildingAttachmentName
		End Get
		Set
			If (String.Equals(Me._BuildingAttachmentName, value) = false) Then
				Me.OnBuildingAttachmentNameChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentName = value
				Me.SendPropertyChanged("BuildingAttachmentName")
				Me.OnBuildingAttachmentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachment", DbType:="NVarChar(MAX)")>  _
	Public Property BuildingAttachment() As String
		Get
			Return Me._BuildingAttachment
		End Get
		Set
			If (String.Equals(Me._BuildingAttachment, value) = false) Then
				Me.OnBuildingAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachment = value
				Me.SendPropertyChanged("BuildingAttachment")
				Me.OnBuildingAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentType", DbType:="Char(1)")>  _
	Public Property BuildingAttachmentType() As System.Nullable(Of Char)
		Get
			Return Me._BuildingAttachmentType
		End Get
		Set
			If (Me._BuildingAttachmentType.Equals(value) = false) Then
				Me.OnBuildingAttachmentTypeChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentType = value
				Me.SendPropertyChanged("BuildingAttachmentType")
				Me.OnBuildingAttachmentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuilding_APP_MultiFloorBuildingAttachment", Storage:="_APP_MultiFloorBuilding", ThisKey:="BuildingID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_MultiFloorBuilding() As APP_MultiFloorBuilding
		Get
			Return Me._APP_MultiFloorBuilding.Entity
		End Get
		Set
			Dim previousValue As APP_MultiFloorBuilding = Me._APP_MultiFloorBuilding.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_MultiFloorBuilding.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_MultiFloorBuilding.Entity = Nothing
					previousValue.APP_MultiFloorBuildingAttachments.Remove(Me)
				End If
				Me._APP_MultiFloorBuilding.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_MultiFloorBuildingAttachments.Add(Me)
					Me._BuildingID = value.ID
				Else
					Me._BuildingID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_MultiFloorBuilding")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingAttachmentTemps")>  _
Partial Public Class APP_MultiFloorBuildingAttachmentTemp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _BuildingAttachmentName As String
	
	Private _BuildingAttachment As String
	
	Private _BuildingAttachmentType As System.Nullable(Of Char)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentName", DbType:="NVarChar(50)")>  _
	Public Property BuildingAttachmentName() As String
		Get
			Return Me._BuildingAttachmentName
		End Get
		Set
			If (String.Equals(Me._BuildingAttachmentName, value) = false) Then
				Me.OnBuildingAttachmentNameChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentName = value
				Me.SendPropertyChanged("BuildingAttachmentName")
				Me.OnBuildingAttachmentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachment", DbType:="NVarChar(MAX)")>  _
	Public Property BuildingAttachment() As String
		Get
			Return Me._BuildingAttachment
		End Get
		Set
			If (String.Equals(Me._BuildingAttachment, value) = false) Then
				Me.OnBuildingAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachment = value
				Me.SendPropertyChanged("BuildingAttachment")
				Me.OnBuildingAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentType", DbType:="Char(1)")>  _
	Public Property BuildingAttachmentType() As System.Nullable(Of Char)
		Get
			Return Me._BuildingAttachmentType
		End Get
		Set
			If (Me._BuildingAttachmentType.Equals(value) = false) Then
				Me.OnBuildingAttachmentTypeChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentType = value
				Me.SendPropertyChanged("BuildingAttachmentType")
				Me.OnBuildingAttachmentTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingFlatAttachments")>  _
Partial Public Class APP_MultiFloorBuildingFlatAttachment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _BuildingFlatID As System.Nullable(Of Long)
	
	Private _BuildingAttachmentName As String
	
	Private _BuildingAttachment As String
	
	Private _BuildingAttachmentType As System.Nullable(Of Char)
	
	Private _APP_MultiFloorBuildingFlat As EntityRef(Of APP_MultiFloorBuildingFlat)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnBuildingFlatIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnBuildingFlatIDChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_MultiFloorBuildingFlat = CType(Nothing, EntityRef(Of APP_MultiFloorBuildingFlat))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingFlatID", DbType:="BigInt")>  _
	Public Property BuildingFlatID() As System.Nullable(Of Long)
		Get
			Return Me._BuildingFlatID
		End Get
		Set
			If (Me._BuildingFlatID.Equals(value) = false) Then
				If Me._APP_MultiFloorBuildingFlat.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBuildingFlatIDChanging(value)
				Me.SendPropertyChanging
				Me._BuildingFlatID = value
				Me.SendPropertyChanged("BuildingFlatID")
				Me.OnBuildingFlatIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentName", DbType:="NVarChar(50)")>  _
	Public Property BuildingAttachmentName() As String
		Get
			Return Me._BuildingAttachmentName
		End Get
		Set
			If (String.Equals(Me._BuildingAttachmentName, value) = false) Then
				Me.OnBuildingAttachmentNameChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentName = value
				Me.SendPropertyChanged("BuildingAttachmentName")
				Me.OnBuildingAttachmentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachment", DbType:="NVarChar(MAX)")>  _
	Public Property BuildingAttachment() As String
		Get
			Return Me._BuildingAttachment
		End Get
		Set
			If (String.Equals(Me._BuildingAttachment, value) = false) Then
				Me.OnBuildingAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachment = value
				Me.SendPropertyChanged("BuildingAttachment")
				Me.OnBuildingAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentType", DbType:="Char(1)")>  _
	Public Property BuildingAttachmentType() As System.Nullable(Of Char)
		Get
			Return Me._BuildingAttachmentType
		End Get
		Set
			If (Me._BuildingAttachmentType.Equals(value) = false) Then
				Me.OnBuildingAttachmentTypeChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentType = value
				Me.SendPropertyChanged("BuildingAttachmentType")
				Me.OnBuildingAttachmentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuildingFlat_APP_MultiFloorBuildingFlatAttachment", Storage:="_APP_MultiFloorBuildingFlat", ThisKey:="BuildingFlatID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_MultiFloorBuildingFlat() As APP_MultiFloorBuildingFlat
		Get
			Return Me._APP_MultiFloorBuildingFlat.Entity
		End Get
		Set
			Dim previousValue As APP_MultiFloorBuildingFlat = Me._APP_MultiFloorBuildingFlat.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_MultiFloorBuildingFlat.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_MultiFloorBuildingFlat.Entity = Nothing
					previousValue.APP_MultiFloorBuildingFlatAttachments.Remove(Me)
				End If
				Me._APP_MultiFloorBuildingFlat.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_MultiFloorBuildingFlatAttachments.Add(Me)
					Me._BuildingFlatID = value.ID
				Else
					Me._BuildingFlatID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_MultiFloorBuildingFlat")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingFlatAttachmentTemps")>  _
Partial Public Class APP_MultiFloorBuildingFlatAttachmentTemp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _BuildingFlatID As System.Nullable(Of Long)
	
	Private _BuildingAttachmentName As String
	
	Private _BuildingAttachment As String
	
	Private _BuildingAttachmentType As System.Nullable(Of Char)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnBuildingFlatIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnBuildingFlatIDChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingFlatID", DbType:="BigInt")>  _
	Public Property BuildingFlatID() As System.Nullable(Of Long)
		Get
			Return Me._BuildingFlatID
		End Get
		Set
			If (Me._BuildingFlatID.Equals(value) = false) Then
				Me.OnBuildingFlatIDChanging(value)
				Me.SendPropertyChanging
				Me._BuildingFlatID = value
				Me.SendPropertyChanged("BuildingFlatID")
				Me.OnBuildingFlatIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentName", DbType:="NVarChar(50)")>  _
	Public Property BuildingAttachmentName() As String
		Get
			Return Me._BuildingAttachmentName
		End Get
		Set
			If (String.Equals(Me._BuildingAttachmentName, value) = false) Then
				Me.OnBuildingAttachmentNameChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentName = value
				Me.SendPropertyChanged("BuildingAttachmentName")
				Me.OnBuildingAttachmentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachment", DbType:="NVarChar(MAX)")>  _
	Public Property BuildingAttachment() As String
		Get
			Return Me._BuildingAttachment
		End Get
		Set
			If (String.Equals(Me._BuildingAttachment, value) = false) Then
				Me.OnBuildingAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachment = value
				Me.SendPropertyChanged("BuildingAttachment")
				Me.OnBuildingAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentType", DbType:="Char(1)")>  _
	Public Property BuildingAttachmentType() As System.Nullable(Of Char)
		Get
			Return Me._BuildingAttachmentType
		End Get
		Set
			If (Me._BuildingAttachmentType.Equals(value) = false) Then
				Me.OnBuildingAttachmentTypeChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentType = value
				Me.SendPropertyChanged("BuildingAttachmentType")
				Me.OnBuildingAttachmentTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingFlats")>  _
Partial Public Class APP_MultiFloorBuildingFlat
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _MultiFloorBuildingID As System.Nullable(Of Long)
	
	Private _FlatFloorNo As System.Nullable(Of Long)
	
	Private _FlatName As String
	
	Private _FlatNumber As String
	
	Private _FlatDescription As String
	
	Private _APP_MultiFloorBuildingFlatAttachments As EntitySet(Of APP_MultiFloorBuildingFlatAttachment)
	
	Private _APP_MultiFloorBuilding As EntityRef(Of APP_MultiFloorBuilding)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMultiFloorBuildingIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMultiFloorBuildingIDChanged()
    End Sub
    Partial Private Sub OnFlatFloorNoChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFlatFloorNoChanged()
    End Sub
    Partial Private Sub OnFlatNameChanging(value As String)
    End Sub
    Partial Private Sub OnFlatNameChanged()
    End Sub
    Partial Private Sub OnFlatNumberChanging(value As String)
    End Sub
    Partial Private Sub OnFlatNumberChanged()
    End Sub
    Partial Private Sub OnFlatDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnFlatDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_MultiFloorBuildingFlatAttachments = New EntitySet(Of APP_MultiFloorBuildingFlatAttachment)(AddressOf Me.attach_APP_MultiFloorBuildingFlatAttachments, AddressOf Me.detach_APP_MultiFloorBuildingFlatAttachments)
		Me._APP_MultiFloorBuilding = CType(Nothing, EntityRef(Of APP_MultiFloorBuilding))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MultiFloorBuildingID", DbType:="BigInt")>  _
	Public Property MultiFloorBuildingID() As System.Nullable(Of Long)
		Get
			Return Me._MultiFloorBuildingID
		End Get
		Set
			If (Me._MultiFloorBuildingID.Equals(value) = false) Then
				If Me._APP_MultiFloorBuilding.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMultiFloorBuildingIDChanging(value)
				Me.SendPropertyChanging
				Me._MultiFloorBuildingID = value
				Me.SendPropertyChanged("MultiFloorBuildingID")
				Me.OnMultiFloorBuildingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatFloorNo", DbType:="BigInt")>  _
	Public Property FlatFloorNo() As System.Nullable(Of Long)
		Get
			Return Me._FlatFloorNo
		End Get
		Set
			If (Me._FlatFloorNo.Equals(value) = false) Then
				Me.OnFlatFloorNoChanging(value)
				Me.SendPropertyChanging
				Me._FlatFloorNo = value
				Me.SendPropertyChanged("FlatFloorNo")
				Me.OnFlatFloorNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatName", DbType:="NVarChar(50)")>  _
	Public Property FlatName() As String
		Get
			Return Me._FlatName
		End Get
		Set
			If (String.Equals(Me._FlatName, value) = false) Then
				Me.OnFlatNameChanging(value)
				Me.SendPropertyChanging
				Me._FlatName = value
				Me.SendPropertyChanged("FlatName")
				Me.OnFlatNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatNumber", DbType:="NVarChar(10)")>  _
	Public Property FlatNumber() As String
		Get
			Return Me._FlatNumber
		End Get
		Set
			If (String.Equals(Me._FlatNumber, value) = false) Then
				Me.OnFlatNumberChanging(value)
				Me.SendPropertyChanging
				Me._FlatNumber = value
				Me.SendPropertyChanged("FlatNumber")
				Me.OnFlatNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatDescription", DbType:="NVarChar(MAX)")>  _
	Public Property FlatDescription() As String
		Get
			Return Me._FlatDescription
		End Get
		Set
			If (String.Equals(Me._FlatDescription, value) = false) Then
				Me.OnFlatDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._FlatDescription = value
				Me.SendPropertyChanged("FlatDescription")
				Me.OnFlatDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuildingFlat_APP_MultiFloorBuildingFlatAttachment", Storage:="_APP_MultiFloorBuildingFlatAttachments", ThisKey:="ID", OtherKey:="BuildingFlatID")>  _
	Public Property APP_MultiFloorBuildingFlatAttachments() As EntitySet(Of APP_MultiFloorBuildingFlatAttachment)
		Get
			Return Me._APP_MultiFloorBuildingFlatAttachments
		End Get
		Set
			Me._APP_MultiFloorBuildingFlatAttachments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuilding_APP_MultiFloorBuildingFlat", Storage:="_APP_MultiFloorBuilding", ThisKey:="MultiFloorBuildingID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_MultiFloorBuilding() As APP_MultiFloorBuilding
		Get
			Return Me._APP_MultiFloorBuilding.Entity
		End Get
		Set
			Dim previousValue As APP_MultiFloorBuilding = Me._APP_MultiFloorBuilding.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_MultiFloorBuilding.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_MultiFloorBuilding.Entity = Nothing
					previousValue.APP_MultiFloorBuildingFlats.Remove(Me)
				End If
				Me._APP_MultiFloorBuilding.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_MultiFloorBuildingFlats.Add(Me)
					Me._MultiFloorBuildingID = value.ID
				Else
					Me._MultiFloorBuildingID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_MultiFloorBuilding")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_APP_MultiFloorBuildingFlatAttachments(ByVal entity As APP_MultiFloorBuildingFlatAttachment)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuildingFlat = Me
	End Sub
	
	Private Sub detach_APP_MultiFloorBuildingFlatAttachments(ByVal entity As APP_MultiFloorBuildingFlatAttachment)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuildingFlat = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingFlatTemps")>  _
Partial Public Class APP_MultiFloorBuildingFlatTemp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _MultiFloorBuildingID As System.Nullable(Of Long)
	
	Private _FlatFloorNo As System.Nullable(Of Long)
	
	Private _FlatName As String
	
	Private _FlatNumber As String
	
	Private _FlatDescription As String
	
	Private _APP_MultiFloorBuildingTemp As EntityRef(Of APP_MultiFloorBuildingTemp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMultiFloorBuildingIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMultiFloorBuildingIDChanged()
    End Sub
    Partial Private Sub OnFlatFloorNoChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFlatFloorNoChanged()
    End Sub
    Partial Private Sub OnFlatNameChanging(value As String)
    End Sub
    Partial Private Sub OnFlatNameChanged()
    End Sub
    Partial Private Sub OnFlatNumberChanging(value As String)
    End Sub
    Partial Private Sub OnFlatNumberChanged()
    End Sub
    Partial Private Sub OnFlatDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnFlatDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_MultiFloorBuildingTemp = CType(Nothing, EntityRef(Of APP_MultiFloorBuildingTemp))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MultiFloorBuildingID", DbType:="BigInt")>  _
	Public Property MultiFloorBuildingID() As System.Nullable(Of Long)
		Get
			Return Me._MultiFloorBuildingID
		End Get
		Set
			If (Me._MultiFloorBuildingID.Equals(value) = false) Then
				If Me._APP_MultiFloorBuildingTemp.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMultiFloorBuildingIDChanging(value)
				Me.SendPropertyChanging
				Me._MultiFloorBuildingID = value
				Me.SendPropertyChanged("MultiFloorBuildingID")
				Me.OnMultiFloorBuildingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatFloorNo", DbType:="BigInt")>  _
	Public Property FlatFloorNo() As System.Nullable(Of Long)
		Get
			Return Me._FlatFloorNo
		End Get
		Set
			If (Me._FlatFloorNo.Equals(value) = false) Then
				Me.OnFlatFloorNoChanging(value)
				Me.SendPropertyChanging
				Me._FlatFloorNo = value
				Me.SendPropertyChanged("FlatFloorNo")
				Me.OnFlatFloorNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatName", DbType:="NVarChar(50)")>  _
	Public Property FlatName() As String
		Get
			Return Me._FlatName
		End Get
		Set
			If (String.Equals(Me._FlatName, value) = false) Then
				Me.OnFlatNameChanging(value)
				Me.SendPropertyChanging
				Me._FlatName = value
				Me.SendPropertyChanged("FlatName")
				Me.OnFlatNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatNumber", DbType:="NVarChar(10)")>  _
	Public Property FlatNumber() As String
		Get
			Return Me._FlatNumber
		End Get
		Set
			If (String.Equals(Me._FlatNumber, value) = false) Then
				Me.OnFlatNumberChanging(value)
				Me.SendPropertyChanging
				Me._FlatNumber = value
				Me.SendPropertyChanged("FlatNumber")
				Me.OnFlatNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FlatDescription", DbType:="NVarChar(MAX)")>  _
	Public Property FlatDescription() As String
		Get
			Return Me._FlatDescription
		End Get
		Set
			If (String.Equals(Me._FlatDescription, value) = false) Then
				Me.OnFlatDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._FlatDescription = value
				Me.SendPropertyChanged("FlatDescription")
				Me.OnFlatDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuildingTemp_APP_MultiFloorBuildingFlatTemp", Storage:="_APP_MultiFloorBuildingTemp", ThisKey:="MultiFloorBuildingID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_MultiFloorBuildingTemp() As APP_MultiFloorBuildingTemp
		Get
			Return Me._APP_MultiFloorBuildingTemp.Entity
		End Get
		Set
			Dim previousValue As APP_MultiFloorBuildingTemp = Me._APP_MultiFloorBuildingTemp.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_MultiFloorBuildingTemp.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_MultiFloorBuildingTemp.Entity = Nothing
					previousValue.APP_MultiFloorBuildingFlatTemps.Remove(Me)
				End If
				Me._APP_MultiFloorBuildingTemp.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_MultiFloorBuildingFlatTemps.Add(Me)
					Me._MultiFloorBuildingID = value.ID
				Else
					Me._MultiFloorBuildingID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_MultiFloorBuildingTemp")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingFloors")>  _
Partial Public Class APP_MultiFloorBuildingFloor
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _MultiFloorBuildingID As System.Nullable(Of Long)
	
	Private _FloorNo As System.Nullable(Of Long)
	
	Private _FloorName As String
	
	Private _APP_MultiFloorBuilding As EntityRef(Of APP_MultiFloorBuilding)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMultiFloorBuildingIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMultiFloorBuildingIDChanged()
    End Sub
    Partial Private Sub OnFloorNoChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFloorNoChanged()
    End Sub
    Partial Private Sub OnFloorNameChanging(value As String)
    End Sub
    Partial Private Sub OnFloorNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_MultiFloorBuilding = CType(Nothing, EntityRef(Of APP_MultiFloorBuilding))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MultiFloorBuildingID", DbType:="BigInt")>  _
	Public Property MultiFloorBuildingID() As System.Nullable(Of Long)
		Get
			Return Me._MultiFloorBuildingID
		End Get
		Set
			If (Me._MultiFloorBuildingID.Equals(value) = false) Then
				If Me._APP_MultiFloorBuilding.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMultiFloorBuildingIDChanging(value)
				Me.SendPropertyChanging
				Me._MultiFloorBuildingID = value
				Me.SendPropertyChanged("MultiFloorBuildingID")
				Me.OnMultiFloorBuildingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FloorNo", DbType:="BigInt")>  _
	Public Property FloorNo() As System.Nullable(Of Long)
		Get
			Return Me._FloorNo
		End Get
		Set
			If (Me._FloorNo.Equals(value) = false) Then
				Me.OnFloorNoChanging(value)
				Me.SendPropertyChanging
				Me._FloorNo = value
				Me.SendPropertyChanged("FloorNo")
				Me.OnFloorNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FloorName", DbType:="NVarChar(50)")>  _
	Public Property FloorName() As String
		Get
			Return Me._FloorName
		End Get
		Set
			If (String.Equals(Me._FloorName, value) = false) Then
				Me.OnFloorNameChanging(value)
				Me.SendPropertyChanging
				Me._FloorName = value
				Me.SendPropertyChanged("FloorName")
				Me.OnFloorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuilding_APP_MultiFloorBuildingFloor", Storage:="_APP_MultiFloorBuilding", ThisKey:="MultiFloorBuildingID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_MultiFloorBuilding() As APP_MultiFloorBuilding
		Get
			Return Me._APP_MultiFloorBuilding.Entity
		End Get
		Set
			Dim previousValue As APP_MultiFloorBuilding = Me._APP_MultiFloorBuilding.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_MultiFloorBuilding.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_MultiFloorBuilding.Entity = Nothing
					previousValue.APP_MultiFloorBuildingFloors.Remove(Me)
				End If
				Me._APP_MultiFloorBuilding.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_MultiFloorBuildingFloors.Add(Me)
					Me._MultiFloorBuildingID = value.ID
				Else
					Me._MultiFloorBuildingID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_MultiFloorBuilding")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingFloorTemps")>  _
Partial Public Class APP_MultiFloorBuildingFloorTemp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _MultiFloorBuildingTempID As System.Nullable(Of Long)
	
	Private _FloorNo As System.Nullable(Of Long)
	
	Private _FloorName As String
	
	Private _APP_MultiFloorBuildingTemp As EntityRef(Of APP_MultiFloorBuildingTemp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMultiFloorBuildingTempIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMultiFloorBuildingTempIDChanged()
    End Sub
    Partial Private Sub OnFloorNoChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFloorNoChanged()
    End Sub
    Partial Private Sub OnFloorNameChanging(value As String)
    End Sub
    Partial Private Sub OnFloorNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_MultiFloorBuildingTemp = CType(Nothing, EntityRef(Of APP_MultiFloorBuildingTemp))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MultiFloorBuildingTempID", DbType:="BigInt")>  _
	Public Property MultiFloorBuildingTempID() As System.Nullable(Of Long)
		Get
			Return Me._MultiFloorBuildingTempID
		End Get
		Set
			If (Me._MultiFloorBuildingTempID.Equals(value) = false) Then
				If Me._APP_MultiFloorBuildingTemp.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMultiFloorBuildingTempIDChanging(value)
				Me.SendPropertyChanging
				Me._MultiFloorBuildingTempID = value
				Me.SendPropertyChanged("MultiFloorBuildingTempID")
				Me.OnMultiFloorBuildingTempIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FloorNo", DbType:="BigInt")>  _
	Public Property FloorNo() As System.Nullable(Of Long)
		Get
			Return Me._FloorNo
		End Get
		Set
			If (Me._FloorNo.Equals(value) = false) Then
				Me.OnFloorNoChanging(value)
				Me.SendPropertyChanging
				Me._FloorNo = value
				Me.SendPropertyChanged("FloorNo")
				Me.OnFloorNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FloorName", DbType:="NVarChar(50)")>  _
	Public Property FloorName() As String
		Get
			Return Me._FloorName
		End Get
		Set
			If (String.Equals(Me._FloorName, value) = false) Then
				Me.OnFloorNameChanging(value)
				Me.SendPropertyChanging
				Me._FloorName = value
				Me.SendPropertyChanged("FloorName")
				Me.OnFloorNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuildingTemp_APP_MultiFloorBuildingFloorTemp", Storage:="_APP_MultiFloorBuildingTemp", ThisKey:="MultiFloorBuildingTempID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_MultiFloorBuildingTemp() As APP_MultiFloorBuildingTemp
		Get
			Return Me._APP_MultiFloorBuildingTemp.Entity
		End Get
		Set
			Dim previousValue As APP_MultiFloorBuildingTemp = Me._APP_MultiFloorBuildingTemp.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_MultiFloorBuildingTemp.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_MultiFloorBuildingTemp.Entity = Nothing
					previousValue.APP_MultiFloorBuildingFloorTemps.Remove(Me)
				End If
				Me._APP_MultiFloorBuildingTemp.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_MultiFloorBuildingFloorTemps.Add(Me)
					Me._MultiFloorBuildingTempID = value.ID
				Else
					Me._MultiFloorBuildingTempID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_MultiFloorBuildingTemp")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingOfficeAttachments")>  _
Partial Public Class APP_MultiFloorBuildingOfficeAttachment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _BuildingOfficeID As System.Nullable(Of Long)
	
	Private _BuildingAttachmentName As String
	
	Private _BuildingAttachment As String
	
	Private _BuildingAttachmentType As System.Nullable(Of Char)
	
	Private _APP_MultiFloorBuildingOffice As EntityRef(Of APP_MultiFloorBuildingOffice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnBuildingOfficeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnBuildingOfficeIDChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_MultiFloorBuildingOffice = CType(Nothing, EntityRef(Of APP_MultiFloorBuildingOffice))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingOfficeID", DbType:="BigInt")>  _
	Public Property BuildingOfficeID() As System.Nullable(Of Long)
		Get
			Return Me._BuildingOfficeID
		End Get
		Set
			If (Me._BuildingOfficeID.Equals(value) = false) Then
				If Me._APP_MultiFloorBuildingOffice.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBuildingOfficeIDChanging(value)
				Me.SendPropertyChanging
				Me._BuildingOfficeID = value
				Me.SendPropertyChanged("BuildingOfficeID")
				Me.OnBuildingOfficeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentName", DbType:="NVarChar(50)")>  _
	Public Property BuildingAttachmentName() As String
		Get
			Return Me._BuildingAttachmentName
		End Get
		Set
			If (String.Equals(Me._BuildingAttachmentName, value) = false) Then
				Me.OnBuildingAttachmentNameChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentName = value
				Me.SendPropertyChanged("BuildingAttachmentName")
				Me.OnBuildingAttachmentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachment", DbType:="NVarChar(MAX)")>  _
	Public Property BuildingAttachment() As String
		Get
			Return Me._BuildingAttachment
		End Get
		Set
			If (String.Equals(Me._BuildingAttachment, value) = false) Then
				Me.OnBuildingAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachment = value
				Me.SendPropertyChanged("BuildingAttachment")
				Me.OnBuildingAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentType", DbType:="Char(1)")>  _
	Public Property BuildingAttachmentType() As System.Nullable(Of Char)
		Get
			Return Me._BuildingAttachmentType
		End Get
		Set
			If (Me._BuildingAttachmentType.Equals(value) = false) Then
				Me.OnBuildingAttachmentTypeChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentType = value
				Me.SendPropertyChanged("BuildingAttachmentType")
				Me.OnBuildingAttachmentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuildingOffice_APP_MultiFloorBuildingOfficeAttachment", Storage:="_APP_MultiFloorBuildingOffice", ThisKey:="BuildingOfficeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_MultiFloorBuildingOffice() As APP_MultiFloorBuildingOffice
		Get
			Return Me._APP_MultiFloorBuildingOffice.Entity
		End Get
		Set
			Dim previousValue As APP_MultiFloorBuildingOffice = Me._APP_MultiFloorBuildingOffice.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_MultiFloorBuildingOffice.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_MultiFloorBuildingOffice.Entity = Nothing
					previousValue.APP_MultiFloorBuildingOfficeAttachments.Remove(Me)
				End If
				Me._APP_MultiFloorBuildingOffice.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_MultiFloorBuildingOfficeAttachments.Add(Me)
					Me._BuildingOfficeID = value.ID
				Else
					Me._BuildingOfficeID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_MultiFloorBuildingOffice")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingOfficeAttachmentTemps")>  _
Partial Public Class APP_MultiFloorBuildingOfficeAttachmentTemp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _BuildingOfficeID As System.Nullable(Of Long)
	
	Private _BuildingAttachmentName As String
	
	Private _BuildingAttachment As String
	
	Private _BuildingAttachmentType As System.Nullable(Of Char)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnBuildingOfficeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnBuildingOfficeIDChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingOfficeID", DbType:="BigInt")>  _
	Public Property BuildingOfficeID() As System.Nullable(Of Long)
		Get
			Return Me._BuildingOfficeID
		End Get
		Set
			If (Me._BuildingOfficeID.Equals(value) = false) Then
				Me.OnBuildingOfficeIDChanging(value)
				Me.SendPropertyChanging
				Me._BuildingOfficeID = value
				Me.SendPropertyChanged("BuildingOfficeID")
				Me.OnBuildingOfficeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentName", DbType:="NVarChar(50)")>  _
	Public Property BuildingAttachmentName() As String
		Get
			Return Me._BuildingAttachmentName
		End Get
		Set
			If (String.Equals(Me._BuildingAttachmentName, value) = false) Then
				Me.OnBuildingAttachmentNameChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentName = value
				Me.SendPropertyChanged("BuildingAttachmentName")
				Me.OnBuildingAttachmentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachment", DbType:="NVarChar(MAX)")>  _
	Public Property BuildingAttachment() As String
		Get
			Return Me._BuildingAttachment
		End Get
		Set
			If (String.Equals(Me._BuildingAttachment, value) = false) Then
				Me.OnBuildingAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachment = value
				Me.SendPropertyChanged("BuildingAttachment")
				Me.OnBuildingAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentType", DbType:="Char(1)")>  _
	Public Property BuildingAttachmentType() As System.Nullable(Of Char)
		Get
			Return Me._BuildingAttachmentType
		End Get
		Set
			If (Me._BuildingAttachmentType.Equals(value) = false) Then
				Me.OnBuildingAttachmentTypeChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentType = value
				Me.SendPropertyChanged("BuildingAttachmentType")
				Me.OnBuildingAttachmentTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingOffices")>  _
Partial Public Class APP_MultiFloorBuildingOffice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _MultiFloorBuildingID As System.Nullable(Of Long)
	
	Private _OfficeFloorNo As System.Nullable(Of Long)
	
	Private _OfficeName As String
	
	Private _OfficeNumber As String
	
	Private _OfficeDescription As String
	
	Private _APP_MultiFloorBuildingOfficeAttachments As EntitySet(Of APP_MultiFloorBuildingOfficeAttachment)
	
	Private _APP_MultiFloorBuilding As EntityRef(Of APP_MultiFloorBuilding)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMultiFloorBuildingIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMultiFloorBuildingIDChanged()
    End Sub
    Partial Private Sub OnOfficeFloorNoChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnOfficeFloorNoChanged()
    End Sub
    Partial Private Sub OnOfficeNameChanging(value As String)
    End Sub
    Partial Private Sub OnOfficeNameChanged()
    End Sub
    Partial Private Sub OnOfficeNumberChanging(value As String)
    End Sub
    Partial Private Sub OnOfficeNumberChanged()
    End Sub
    Partial Private Sub OnOfficeDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnOfficeDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_MultiFloorBuildingOfficeAttachments = New EntitySet(Of APP_MultiFloorBuildingOfficeAttachment)(AddressOf Me.attach_APP_MultiFloorBuildingOfficeAttachments, AddressOf Me.detach_APP_MultiFloorBuildingOfficeAttachments)
		Me._APP_MultiFloorBuilding = CType(Nothing, EntityRef(Of APP_MultiFloorBuilding))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MultiFloorBuildingID", DbType:="BigInt")>  _
	Public Property MultiFloorBuildingID() As System.Nullable(Of Long)
		Get
			Return Me._MultiFloorBuildingID
		End Get
		Set
			If (Me._MultiFloorBuildingID.Equals(value) = false) Then
				If Me._APP_MultiFloorBuilding.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMultiFloorBuildingIDChanging(value)
				Me.SendPropertyChanging
				Me._MultiFloorBuildingID = value
				Me.SendPropertyChanged("MultiFloorBuildingID")
				Me.OnMultiFloorBuildingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfficeFloorNo", DbType:="BigInt")>  _
	Public Property OfficeFloorNo() As System.Nullable(Of Long)
		Get
			Return Me._OfficeFloorNo
		End Get
		Set
			If (Me._OfficeFloorNo.Equals(value) = false) Then
				Me.OnOfficeFloorNoChanging(value)
				Me.SendPropertyChanging
				Me._OfficeFloorNo = value
				Me.SendPropertyChanged("OfficeFloorNo")
				Me.OnOfficeFloorNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfficeName", DbType:="NVarChar(50)")>  _
	Public Property OfficeName() As String
		Get
			Return Me._OfficeName
		End Get
		Set
			If (String.Equals(Me._OfficeName, value) = false) Then
				Me.OnOfficeNameChanging(value)
				Me.SendPropertyChanging
				Me._OfficeName = value
				Me.SendPropertyChanged("OfficeName")
				Me.OnOfficeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfficeNumber", DbType:="NVarChar(10)")>  _
	Public Property OfficeNumber() As String
		Get
			Return Me._OfficeNumber
		End Get
		Set
			If (String.Equals(Me._OfficeNumber, value) = false) Then
				Me.OnOfficeNumberChanging(value)
				Me.SendPropertyChanging
				Me._OfficeNumber = value
				Me.SendPropertyChanged("OfficeNumber")
				Me.OnOfficeNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfficeDescription", DbType:="NVarChar(MAX)")>  _
	Public Property OfficeDescription() As String
		Get
			Return Me._OfficeDescription
		End Get
		Set
			If (String.Equals(Me._OfficeDescription, value) = false) Then
				Me.OnOfficeDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._OfficeDescription = value
				Me.SendPropertyChanged("OfficeDescription")
				Me.OnOfficeDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuildingOffice_APP_MultiFloorBuildingOfficeAttachment", Storage:="_APP_MultiFloorBuildingOfficeAttachments", ThisKey:="ID", OtherKey:="BuildingOfficeID")>  _
	Public Property APP_MultiFloorBuildingOfficeAttachments() As EntitySet(Of APP_MultiFloorBuildingOfficeAttachment)
		Get
			Return Me._APP_MultiFloorBuildingOfficeAttachments
		End Get
		Set
			Me._APP_MultiFloorBuildingOfficeAttachments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuilding_APP_MultiFloorBuildingOffice", Storage:="_APP_MultiFloorBuilding", ThisKey:="MultiFloorBuildingID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_MultiFloorBuilding() As APP_MultiFloorBuilding
		Get
			Return Me._APP_MultiFloorBuilding.Entity
		End Get
		Set
			Dim previousValue As APP_MultiFloorBuilding = Me._APP_MultiFloorBuilding.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_MultiFloorBuilding.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_MultiFloorBuilding.Entity = Nothing
					previousValue.APP_MultiFloorBuildingOffices.Remove(Me)
				End If
				Me._APP_MultiFloorBuilding.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_MultiFloorBuildingOffices.Add(Me)
					Me._MultiFloorBuildingID = value.ID
				Else
					Me._MultiFloorBuildingID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_MultiFloorBuilding")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_APP_MultiFloorBuildingOfficeAttachments(ByVal entity As APP_MultiFloorBuildingOfficeAttachment)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuildingOffice = Me
	End Sub
	
	Private Sub detach_APP_MultiFloorBuildingOfficeAttachments(ByVal entity As APP_MultiFloorBuildingOfficeAttachment)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuildingOffice = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingOfficeTemps")>  _
Partial Public Class APP_MultiFloorBuildingOfficeTemp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _MultiFloorBuildingID As System.Nullable(Of Long)
	
	Private _OfficeFloorNo As System.Nullable(Of Long)
	
	Private _OfficeName As String
	
	Private _OfficeNumber As String
	
	Private _OfficeDescription As String
	
	Private _APP_MultiFloorBuildingTemp As EntityRef(Of APP_MultiFloorBuildingTemp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMultiFloorBuildingIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMultiFloorBuildingIDChanged()
    End Sub
    Partial Private Sub OnOfficeFloorNoChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnOfficeFloorNoChanged()
    End Sub
    Partial Private Sub OnOfficeNameChanging(value As String)
    End Sub
    Partial Private Sub OnOfficeNameChanged()
    End Sub
    Partial Private Sub OnOfficeNumberChanging(value As String)
    End Sub
    Partial Private Sub OnOfficeNumberChanged()
    End Sub
    Partial Private Sub OnOfficeDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnOfficeDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_MultiFloorBuildingTemp = CType(Nothing, EntityRef(Of APP_MultiFloorBuildingTemp))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MultiFloorBuildingID", DbType:="BigInt")>  _
	Public Property MultiFloorBuildingID() As System.Nullable(Of Long)
		Get
			Return Me._MultiFloorBuildingID
		End Get
		Set
			If (Me._MultiFloorBuildingID.Equals(value) = false) Then
				If Me._APP_MultiFloorBuildingTemp.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMultiFloorBuildingIDChanging(value)
				Me.SendPropertyChanging
				Me._MultiFloorBuildingID = value
				Me.SendPropertyChanged("MultiFloorBuildingID")
				Me.OnMultiFloorBuildingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfficeFloorNo", DbType:="BigInt")>  _
	Public Property OfficeFloorNo() As System.Nullable(Of Long)
		Get
			Return Me._OfficeFloorNo
		End Get
		Set
			If (Me._OfficeFloorNo.Equals(value) = false) Then
				Me.OnOfficeFloorNoChanging(value)
				Me.SendPropertyChanging
				Me._OfficeFloorNo = value
				Me.SendPropertyChanged("OfficeFloorNo")
				Me.OnOfficeFloorNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfficeName", DbType:="NVarChar(50)")>  _
	Public Property OfficeName() As String
		Get
			Return Me._OfficeName
		End Get
		Set
			If (String.Equals(Me._OfficeName, value) = false) Then
				Me.OnOfficeNameChanging(value)
				Me.SendPropertyChanging
				Me._OfficeName = value
				Me.SendPropertyChanged("OfficeName")
				Me.OnOfficeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfficeNumber", DbType:="NVarChar(10)")>  _
	Public Property OfficeNumber() As String
		Get
			Return Me._OfficeNumber
		End Get
		Set
			If (String.Equals(Me._OfficeNumber, value) = false) Then
				Me.OnOfficeNumberChanging(value)
				Me.SendPropertyChanging
				Me._OfficeNumber = value
				Me.SendPropertyChanged("OfficeNumber")
				Me.OnOfficeNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfficeDescription", DbType:="NVarChar(MAX)")>  _
	Public Property OfficeDescription() As String
		Get
			Return Me._OfficeDescription
		End Get
		Set
			If (String.Equals(Me._OfficeDescription, value) = false) Then
				Me.OnOfficeDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._OfficeDescription = value
				Me.SendPropertyChanged("OfficeDescription")
				Me.OnOfficeDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuildingTemp_APP_MultiFloorBuildingOfficeTemp", Storage:="_APP_MultiFloorBuildingTemp", ThisKey:="MultiFloorBuildingID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_MultiFloorBuildingTemp() As APP_MultiFloorBuildingTemp
		Get
			Return Me._APP_MultiFloorBuildingTemp.Entity
		End Get
		Set
			Dim previousValue As APP_MultiFloorBuildingTemp = Me._APP_MultiFloorBuildingTemp.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_MultiFloorBuildingTemp.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_MultiFloorBuildingTemp.Entity = Nothing
					previousValue.APP_MultiFloorBuildingOfficeTemps.Remove(Me)
				End If
				Me._APP_MultiFloorBuildingTemp.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_MultiFloorBuildingOfficeTemps.Add(Me)
					Me._MultiFloorBuildingID = value.ID
				Else
					Me._MultiFloorBuildingID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_MultiFloorBuildingTemp")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildings")>  _
Partial Public Class APP_MultiFloorBuilding
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _MFBuildingName As String
	
	Private _MFBuildingOfficialName As String
	
	Private _MFBuildingOwnerID As System.Nullable(Of Long)
	
	Private _MFBuildingContactName As String
	
	Private _MFBuildingContactGSMCountryCodeID As System.Nullable(Of Long)
	
	Private _MFBuildingContactGSM As String
	
	Private _MFCurrencyTypeCountryCodeID As String
	
	Private _MFBuildingRentingPrice As System.Nullable(Of Decimal)
	
	Private _MFBuildingAddress As String
	
	Private _MFBuildingGPS As String
	
	Private _MFBuildingMapUrl As String
	
	Private _MFBuildingMemo As String
	
	Private _MFBuildingFloorCount As System.Nullable(Of Long)
	
	Private _MFBuildingShopCount As System.Nullable(Of Long)
	
	Private _MFBuildingFlatCount As System.Nullable(Of Long)
	
	Private _MFBuildingOfficeCount As System.Nullable(Of Long)
	
	Private _MFBuildingAddedBy As System.Nullable(Of System.Guid)
	
	Private _MFBuildingAddedDate As System.Nullable(Of Date)
	
	Private _MFBuildingUpdatedBy As System.Nullable(Of System.Guid)
	
	Private _MFBuildingUpdatedDate As System.Nullable(Of Date)
	
	Private _APP_MultiFloorBuildingAttachments As EntitySet(Of APP_MultiFloorBuildingAttachment)
	
	Private _APP_MultiFloorBuildingFlats As EntitySet(Of APP_MultiFloorBuildingFlat)
	
	Private _APP_MultiFloorBuildingFloors As EntitySet(Of APP_MultiFloorBuildingFloor)
	
	Private _APP_MultiFloorBuildingOffices As EntitySet(Of APP_MultiFloorBuildingOffice)
	
	Private _APP_MultiFloorBuildingShops As EntitySet(Of APP_MultiFloorBuildingShop)
	
	Private _APP_Owner As EntityRef(Of APP_Owner)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMFBuildingNameChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingNameChanged()
    End Sub
    Partial Private Sub OnMFBuildingOfficialNameChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingOfficialNameChanged()
    End Sub
    Partial Private Sub OnMFBuildingOwnerIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMFBuildingOwnerIDChanged()
    End Sub
    Partial Private Sub OnMFBuildingContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingContactNameChanged()
    End Sub
    Partial Private Sub OnMFBuildingContactGSMCountryCodeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMFBuildingContactGSMCountryCodeIDChanged()
    End Sub
    Partial Private Sub OnMFBuildingContactGSMChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingContactGSMChanged()
    End Sub
    Partial Private Sub OnMFCurrencyTypeCountryCodeIDChanging(value As String)
    End Sub
    Partial Private Sub OnMFCurrencyTypeCountryCodeIDChanged()
    End Sub
    Partial Private Sub OnMFBuildingRentingPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMFBuildingRentingPriceChanged()
    End Sub
    Partial Private Sub OnMFBuildingAddressChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingAddressChanged()
    End Sub
    Partial Private Sub OnMFBuildingGPSChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingGPSChanged()
    End Sub
    Partial Private Sub OnMFBuildingMapUrlChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingMapUrlChanged()
    End Sub
    Partial Private Sub OnMFBuildingMemoChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingMemoChanged()
    End Sub
    Partial Private Sub OnMFBuildingFloorCountChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMFBuildingFloorCountChanged()
    End Sub
    Partial Private Sub OnMFBuildingShopCountChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMFBuildingShopCountChanged()
    End Sub
    Partial Private Sub OnMFBuildingFlatCountChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMFBuildingFlatCountChanged()
    End Sub
    Partial Private Sub OnMFBuildingOfficeCountChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMFBuildingOfficeCountChanged()
    End Sub
    Partial Private Sub OnMFBuildingAddedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnMFBuildingAddedByChanged()
    End Sub
    Partial Private Sub OnMFBuildingAddedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnMFBuildingAddedDateChanged()
    End Sub
    Partial Private Sub OnMFBuildingUpdatedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnMFBuildingUpdatedByChanged()
    End Sub
    Partial Private Sub OnMFBuildingUpdatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnMFBuildingUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_MultiFloorBuildingAttachments = New EntitySet(Of APP_MultiFloorBuildingAttachment)(AddressOf Me.attach_APP_MultiFloorBuildingAttachments, AddressOf Me.detach_APP_MultiFloorBuildingAttachments)
		Me._APP_MultiFloorBuildingFlats = New EntitySet(Of APP_MultiFloorBuildingFlat)(AddressOf Me.attach_APP_MultiFloorBuildingFlats, AddressOf Me.detach_APP_MultiFloorBuildingFlats)
		Me._APP_MultiFloorBuildingFloors = New EntitySet(Of APP_MultiFloorBuildingFloor)(AddressOf Me.attach_APP_MultiFloorBuildingFloors, AddressOf Me.detach_APP_MultiFloorBuildingFloors)
		Me._APP_MultiFloorBuildingOffices = New EntitySet(Of APP_MultiFloorBuildingOffice)(AddressOf Me.attach_APP_MultiFloorBuildingOffices, AddressOf Me.detach_APP_MultiFloorBuildingOffices)
		Me._APP_MultiFloorBuildingShops = New EntitySet(Of APP_MultiFloorBuildingShop)(AddressOf Me.attach_APP_MultiFloorBuildingShops, AddressOf Me.detach_APP_MultiFloorBuildingShops)
		Me._APP_Owner = CType(Nothing, EntityRef(Of APP_Owner))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingName", DbType:="NVarChar(150)")>  _
	Public Property MFBuildingName() As String
		Get
			Return Me._MFBuildingName
		End Get
		Set
			If (String.Equals(Me._MFBuildingName, value) = false) Then
				Me.OnMFBuildingNameChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingName = value
				Me.SendPropertyChanged("MFBuildingName")
				Me.OnMFBuildingNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingOfficialName", DbType:="NVarChar(150)")>  _
	Public Property MFBuildingOfficialName() As String
		Get
			Return Me._MFBuildingOfficialName
		End Get
		Set
			If (String.Equals(Me._MFBuildingOfficialName, value) = false) Then
				Me.OnMFBuildingOfficialNameChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingOfficialName = value
				Me.SendPropertyChanged("MFBuildingOfficialName")
				Me.OnMFBuildingOfficialNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingOwnerID", DbType:="BigInt")>  _
	Public Property MFBuildingOwnerID() As System.Nullable(Of Long)
		Get
			Return Me._MFBuildingOwnerID
		End Get
		Set
			If (Me._MFBuildingOwnerID.Equals(value) = false) Then
				If Me._APP_Owner.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMFBuildingOwnerIDChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingOwnerID = value
				Me.SendPropertyChanged("MFBuildingOwnerID")
				Me.OnMFBuildingOwnerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingContactName", DbType:="NVarChar(150)")>  _
	Public Property MFBuildingContactName() As String
		Get
			Return Me._MFBuildingContactName
		End Get
		Set
			If (String.Equals(Me._MFBuildingContactName, value) = false) Then
				Me.OnMFBuildingContactNameChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingContactName = value
				Me.SendPropertyChanged("MFBuildingContactName")
				Me.OnMFBuildingContactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingContactGSMCountryCodeID", DbType:="BigInt")>  _
	Public Property MFBuildingContactGSMCountryCodeID() As System.Nullable(Of Long)
		Get
			Return Me._MFBuildingContactGSMCountryCodeID
		End Get
		Set
			If (Me._MFBuildingContactGSMCountryCodeID.Equals(value) = false) Then
				Me.OnMFBuildingContactGSMCountryCodeIDChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingContactGSMCountryCodeID = value
				Me.SendPropertyChanged("MFBuildingContactGSMCountryCodeID")
				Me.OnMFBuildingContactGSMCountryCodeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingContactGSM", DbType:="NVarChar(10)")>  _
	Public Property MFBuildingContactGSM() As String
		Get
			Return Me._MFBuildingContactGSM
		End Get
		Set
			If (String.Equals(Me._MFBuildingContactGSM, value) = false) Then
				Me.OnMFBuildingContactGSMChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingContactGSM = value
				Me.SendPropertyChanged("MFBuildingContactGSM")
				Me.OnMFBuildingContactGSMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFCurrencyTypeCountryCodeID", DbType:="NVarChar(6)")>  _
	Public Property MFCurrencyTypeCountryCodeID() As String
		Get
			Return Me._MFCurrencyTypeCountryCodeID
		End Get
		Set
			If (String.Equals(Me._MFCurrencyTypeCountryCodeID, value) = false) Then
				Me.OnMFCurrencyTypeCountryCodeIDChanging(value)
				Me.SendPropertyChanging
				Me._MFCurrencyTypeCountryCodeID = value
				Me.SendPropertyChanged("MFCurrencyTypeCountryCodeID")
				Me.OnMFCurrencyTypeCountryCodeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingRentingPrice", DbType:="Money")>  _
	Public Property MFBuildingRentingPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._MFBuildingRentingPrice
		End Get
		Set
			If (Me._MFBuildingRentingPrice.Equals(value) = false) Then
				Me.OnMFBuildingRentingPriceChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingRentingPrice = value
				Me.SendPropertyChanged("MFBuildingRentingPrice")
				Me.OnMFBuildingRentingPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingAddress", DbType:="NVarChar(MAX)")>  _
	Public Property MFBuildingAddress() As String
		Get
			Return Me._MFBuildingAddress
		End Get
		Set
			If (String.Equals(Me._MFBuildingAddress, value) = false) Then
				Me.OnMFBuildingAddressChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingAddress = value
				Me.SendPropertyChanged("MFBuildingAddress")
				Me.OnMFBuildingAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingGPS", DbType:="NVarChar(150)")>  _
	Public Property MFBuildingGPS() As String
		Get
			Return Me._MFBuildingGPS
		End Get
		Set
			If (String.Equals(Me._MFBuildingGPS, value) = false) Then
				Me.OnMFBuildingGPSChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingGPS = value
				Me.SendPropertyChanged("MFBuildingGPS")
				Me.OnMFBuildingGPSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingMapUrl", DbType:="NVarChar(150)")>  _
	Public Property MFBuildingMapUrl() As String
		Get
			Return Me._MFBuildingMapUrl
		End Get
		Set
			If (String.Equals(Me._MFBuildingMapUrl, value) = false) Then
				Me.OnMFBuildingMapUrlChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingMapUrl = value
				Me.SendPropertyChanged("MFBuildingMapUrl")
				Me.OnMFBuildingMapUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingMemo", DbType:="NVarChar(MAX)")>  _
	Public Property MFBuildingMemo() As String
		Get
			Return Me._MFBuildingMemo
		End Get
		Set
			If (String.Equals(Me._MFBuildingMemo, value) = false) Then
				Me.OnMFBuildingMemoChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingMemo = value
				Me.SendPropertyChanged("MFBuildingMemo")
				Me.OnMFBuildingMemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingFloorCount", DbType:="BigInt")>  _
	Public Property MFBuildingFloorCount() As System.Nullable(Of Long)
		Get
			Return Me._MFBuildingFloorCount
		End Get
		Set
			If (Me._MFBuildingFloorCount.Equals(value) = false) Then
				Me.OnMFBuildingFloorCountChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingFloorCount = value
				Me.SendPropertyChanged("MFBuildingFloorCount")
				Me.OnMFBuildingFloorCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingShopCount", DbType:="BigInt")>  _
	Public Property MFBuildingShopCount() As System.Nullable(Of Long)
		Get
			Return Me._MFBuildingShopCount
		End Get
		Set
			If (Me._MFBuildingShopCount.Equals(value) = false) Then
				Me.OnMFBuildingShopCountChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingShopCount = value
				Me.SendPropertyChanged("MFBuildingShopCount")
				Me.OnMFBuildingShopCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingFlatCount", DbType:="BigInt")>  _
	Public Property MFBuildingFlatCount() As System.Nullable(Of Long)
		Get
			Return Me._MFBuildingFlatCount
		End Get
		Set
			If (Me._MFBuildingFlatCount.Equals(value) = false) Then
				Me.OnMFBuildingFlatCountChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingFlatCount = value
				Me.SendPropertyChanged("MFBuildingFlatCount")
				Me.OnMFBuildingFlatCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingOfficeCount", DbType:="BigInt")>  _
	Public Property MFBuildingOfficeCount() As System.Nullable(Of Long)
		Get
			Return Me._MFBuildingOfficeCount
		End Get
		Set
			If (Me._MFBuildingOfficeCount.Equals(value) = false) Then
				Me.OnMFBuildingOfficeCountChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingOfficeCount = value
				Me.SendPropertyChanged("MFBuildingOfficeCount")
				Me.OnMFBuildingOfficeCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingAddedBy", DbType:="UniqueIdentifier")>  _
	Public Property MFBuildingAddedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._MFBuildingAddedBy
		End Get
		Set
			If (Me._MFBuildingAddedBy.Equals(value) = false) Then
				Me.OnMFBuildingAddedByChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingAddedBy = value
				Me.SendPropertyChanged("MFBuildingAddedBy")
				Me.OnMFBuildingAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingAddedDate", DbType:="DateTime")>  _
	Public Property MFBuildingAddedDate() As System.Nullable(Of Date)
		Get
			Return Me._MFBuildingAddedDate
		End Get
		Set
			If (Me._MFBuildingAddedDate.Equals(value) = false) Then
				Me.OnMFBuildingAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingAddedDate = value
				Me.SendPropertyChanged("MFBuildingAddedDate")
				Me.OnMFBuildingAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingUpdatedBy", DbType:="UniqueIdentifier")>  _
	Public Property MFBuildingUpdatedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._MFBuildingUpdatedBy
		End Get
		Set
			If (Me._MFBuildingUpdatedBy.Equals(value) = false) Then
				Me.OnMFBuildingUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingUpdatedBy = value
				Me.SendPropertyChanged("MFBuildingUpdatedBy")
				Me.OnMFBuildingUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingUpdatedDate", DbType:="DateTime")>  _
	Public Property MFBuildingUpdatedDate() As System.Nullable(Of Date)
		Get
			Return Me._MFBuildingUpdatedDate
		End Get
		Set
			If (Me._MFBuildingUpdatedDate.Equals(value) = false) Then
				Me.OnMFBuildingUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingUpdatedDate = value
				Me.SendPropertyChanged("MFBuildingUpdatedDate")
				Me.OnMFBuildingUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuilding_APP_MultiFloorBuildingAttachment", Storage:="_APP_MultiFloorBuildingAttachments", ThisKey:="ID", OtherKey:="BuildingID")>  _
	Public Property APP_MultiFloorBuildingAttachments() As EntitySet(Of APP_MultiFloorBuildingAttachment)
		Get
			Return Me._APP_MultiFloorBuildingAttachments
		End Get
		Set
			Me._APP_MultiFloorBuildingAttachments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuilding_APP_MultiFloorBuildingFlat", Storage:="_APP_MultiFloorBuildingFlats", ThisKey:="ID", OtherKey:="MultiFloorBuildingID")>  _
	Public Property APP_MultiFloorBuildingFlats() As EntitySet(Of APP_MultiFloorBuildingFlat)
		Get
			Return Me._APP_MultiFloorBuildingFlats
		End Get
		Set
			Me._APP_MultiFloorBuildingFlats.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuilding_APP_MultiFloorBuildingFloor", Storage:="_APP_MultiFloorBuildingFloors", ThisKey:="ID", OtherKey:="MultiFloorBuildingID")>  _
	Public Property APP_MultiFloorBuildingFloors() As EntitySet(Of APP_MultiFloorBuildingFloor)
		Get
			Return Me._APP_MultiFloorBuildingFloors
		End Get
		Set
			Me._APP_MultiFloorBuildingFloors.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuilding_APP_MultiFloorBuildingOffice", Storage:="_APP_MultiFloorBuildingOffices", ThisKey:="ID", OtherKey:="MultiFloorBuildingID")>  _
	Public Property APP_MultiFloorBuildingOffices() As EntitySet(Of APP_MultiFloorBuildingOffice)
		Get
			Return Me._APP_MultiFloorBuildingOffices
		End Get
		Set
			Me._APP_MultiFloorBuildingOffices.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuilding_APP_MultiFloorBuildingShop", Storage:="_APP_MultiFloorBuildingShops", ThisKey:="ID", OtherKey:="MultiFloorBuildingID")>  _
	Public Property APP_MultiFloorBuildingShops() As EntitySet(Of APP_MultiFloorBuildingShop)
		Get
			Return Me._APP_MultiFloorBuildingShops
		End Get
		Set
			Me._APP_MultiFloorBuildingShops.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_Owner_APP_MultiFloorBuilding", Storage:="_APP_Owner", ThisKey:="MFBuildingOwnerID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_Owner() As APP_Owner
		Get
			Return Me._APP_Owner.Entity
		End Get
		Set
			Dim previousValue As APP_Owner = Me._APP_Owner.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_Owner.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_Owner.Entity = Nothing
					previousValue.APP_MultiFloorBuildings.Remove(Me)
				End If
				Me._APP_Owner.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_MultiFloorBuildings.Add(Me)
					Me._MFBuildingOwnerID = value.ID
				Else
					Me._MFBuildingOwnerID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_Owner")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_APP_MultiFloorBuildingAttachments(ByVal entity As APP_MultiFloorBuildingAttachment)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuilding = Me
	End Sub
	
	Private Sub detach_APP_MultiFloorBuildingAttachments(ByVal entity As APP_MultiFloorBuildingAttachment)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuilding = Nothing
	End Sub
	
	Private Sub attach_APP_MultiFloorBuildingFlats(ByVal entity As APP_MultiFloorBuildingFlat)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuilding = Me
	End Sub
	
	Private Sub detach_APP_MultiFloorBuildingFlats(ByVal entity As APP_MultiFloorBuildingFlat)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuilding = Nothing
	End Sub
	
	Private Sub attach_APP_MultiFloorBuildingFloors(ByVal entity As APP_MultiFloorBuildingFloor)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuilding = Me
	End Sub
	
	Private Sub detach_APP_MultiFloorBuildingFloors(ByVal entity As APP_MultiFloorBuildingFloor)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuilding = Nothing
	End Sub
	
	Private Sub attach_APP_MultiFloorBuildingOffices(ByVal entity As APP_MultiFloorBuildingOffice)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuilding = Me
	End Sub
	
	Private Sub detach_APP_MultiFloorBuildingOffices(ByVal entity As APP_MultiFloorBuildingOffice)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuilding = Nothing
	End Sub
	
	Private Sub attach_APP_MultiFloorBuildingShops(ByVal entity As APP_MultiFloorBuildingShop)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuilding = Me
	End Sub
	
	Private Sub detach_APP_MultiFloorBuildingShops(ByVal entity As APP_MultiFloorBuildingShop)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuilding = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingShopAttachments")>  _
Partial Public Class APP_MultiFloorBuildingShopAttachment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _BuildingShopID As System.Nullable(Of Long)
	
	Private _BuildingAttachmentName As String
	
	Private _BuildingAttachment As String
	
	Private _BuildingAttachmentType As System.Nullable(Of Char)
	
	Private _APP_MultiFloorBuildingShop As EntityRef(Of APP_MultiFloorBuildingShop)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnBuildingShopIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnBuildingShopIDChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_MultiFloorBuildingShop = CType(Nothing, EntityRef(Of APP_MultiFloorBuildingShop))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingShopID", DbType:="BigInt")>  _
	Public Property BuildingShopID() As System.Nullable(Of Long)
		Get
			Return Me._BuildingShopID
		End Get
		Set
			If (Me._BuildingShopID.Equals(value) = false) Then
				If Me._APP_MultiFloorBuildingShop.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBuildingShopIDChanging(value)
				Me.SendPropertyChanging
				Me._BuildingShopID = value
				Me.SendPropertyChanged("BuildingShopID")
				Me.OnBuildingShopIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentName", DbType:="NVarChar(50)")>  _
	Public Property BuildingAttachmentName() As String
		Get
			Return Me._BuildingAttachmentName
		End Get
		Set
			If (String.Equals(Me._BuildingAttachmentName, value) = false) Then
				Me.OnBuildingAttachmentNameChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentName = value
				Me.SendPropertyChanged("BuildingAttachmentName")
				Me.OnBuildingAttachmentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachment", DbType:="NVarChar(MAX)")>  _
	Public Property BuildingAttachment() As String
		Get
			Return Me._BuildingAttachment
		End Get
		Set
			If (String.Equals(Me._BuildingAttachment, value) = false) Then
				Me.OnBuildingAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachment = value
				Me.SendPropertyChanged("BuildingAttachment")
				Me.OnBuildingAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentType", DbType:="Char(1)")>  _
	Public Property BuildingAttachmentType() As System.Nullable(Of Char)
		Get
			Return Me._BuildingAttachmentType
		End Get
		Set
			If (Me._BuildingAttachmentType.Equals(value) = false) Then
				Me.OnBuildingAttachmentTypeChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentType = value
				Me.SendPropertyChanged("BuildingAttachmentType")
				Me.OnBuildingAttachmentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuildingShop_APP_MultiFloorBuildingShopAttachment", Storage:="_APP_MultiFloorBuildingShop", ThisKey:="BuildingShopID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_MultiFloorBuildingShop() As APP_MultiFloorBuildingShop
		Get
			Return Me._APP_MultiFloorBuildingShop.Entity
		End Get
		Set
			Dim previousValue As APP_MultiFloorBuildingShop = Me._APP_MultiFloorBuildingShop.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_MultiFloorBuildingShop.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_MultiFloorBuildingShop.Entity = Nothing
					previousValue.APP_MultiFloorBuildingShopAttachments.Remove(Me)
				End If
				Me._APP_MultiFloorBuildingShop.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_MultiFloorBuildingShopAttachments.Add(Me)
					Me._BuildingShopID = value.ID
				Else
					Me._BuildingShopID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_MultiFloorBuildingShop")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingShopAttachmentTemps")>  _
Partial Public Class APP_MultiFloorBuildingShopAttachmentTemp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _BuildingShopID As System.Nullable(Of Long)
	
	Private _BuildingAttachmentName As String
	
	Private _BuildingAttachment As String
	
	Private _BuildingAttachmentType As System.Nullable(Of Char)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnBuildingShopIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnBuildingShopIDChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentNameChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingAttachmentChanged()
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnBuildingAttachmentTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingShopID", DbType:="BigInt")>  _
	Public Property BuildingShopID() As System.Nullable(Of Long)
		Get
			Return Me._BuildingShopID
		End Get
		Set
			If (Me._BuildingShopID.Equals(value) = false) Then
				Me.OnBuildingShopIDChanging(value)
				Me.SendPropertyChanging
				Me._BuildingShopID = value
				Me.SendPropertyChanged("BuildingShopID")
				Me.OnBuildingShopIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentName", DbType:="NVarChar(50)")>  _
	Public Property BuildingAttachmentName() As String
		Get
			Return Me._BuildingAttachmentName
		End Get
		Set
			If (String.Equals(Me._BuildingAttachmentName, value) = false) Then
				Me.OnBuildingAttachmentNameChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentName = value
				Me.SendPropertyChanged("BuildingAttachmentName")
				Me.OnBuildingAttachmentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachment", DbType:="NVarChar(MAX)")>  _
	Public Property BuildingAttachment() As String
		Get
			Return Me._BuildingAttachment
		End Get
		Set
			If (String.Equals(Me._BuildingAttachment, value) = false) Then
				Me.OnBuildingAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachment = value
				Me.SendPropertyChanged("BuildingAttachment")
				Me.OnBuildingAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BuildingAttachmentType", DbType:="Char(1)")>  _
	Public Property BuildingAttachmentType() As System.Nullable(Of Char)
		Get
			Return Me._BuildingAttachmentType
		End Get
		Set
			If (Me._BuildingAttachmentType.Equals(value) = false) Then
				Me.OnBuildingAttachmentTypeChanging(value)
				Me.SendPropertyChanging
				Me._BuildingAttachmentType = value
				Me.SendPropertyChanged("BuildingAttachmentType")
				Me.OnBuildingAttachmentTypeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingShops")>  _
Partial Public Class APP_MultiFloorBuildingShop
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _MultiFloorBuildingID As System.Nullable(Of Long)
	
	Private _ShopFloorNo As System.Nullable(Of Long)
	
	Private _ShopName As String
	
	Private _ShopNumber As String
	
	Private _ShopDescription As String
	
	Private _APP_MultiFloorBuildingShopAttachments As EntitySet(Of APP_MultiFloorBuildingShopAttachment)
	
	Private _APP_MultiFloorBuilding As EntityRef(Of APP_MultiFloorBuilding)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMultiFloorBuildingIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMultiFloorBuildingIDChanged()
    End Sub
    Partial Private Sub OnShopFloorNoChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnShopFloorNoChanged()
    End Sub
    Partial Private Sub OnShopNameChanging(value As String)
    End Sub
    Partial Private Sub OnShopNameChanged()
    End Sub
    Partial Private Sub OnShopNumberChanging(value As String)
    End Sub
    Partial Private Sub OnShopNumberChanged()
    End Sub
    Partial Private Sub OnShopDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnShopDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_MultiFloorBuildingShopAttachments = New EntitySet(Of APP_MultiFloorBuildingShopAttachment)(AddressOf Me.attach_APP_MultiFloorBuildingShopAttachments, AddressOf Me.detach_APP_MultiFloorBuildingShopAttachments)
		Me._APP_MultiFloorBuilding = CType(Nothing, EntityRef(Of APP_MultiFloorBuilding))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MultiFloorBuildingID", DbType:="BigInt")>  _
	Public Property MultiFloorBuildingID() As System.Nullable(Of Long)
		Get
			Return Me._MultiFloorBuildingID
		End Get
		Set
			If (Me._MultiFloorBuildingID.Equals(value) = false) Then
				If Me._APP_MultiFloorBuilding.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMultiFloorBuildingIDChanging(value)
				Me.SendPropertyChanging
				Me._MultiFloorBuildingID = value
				Me.SendPropertyChanged("MultiFloorBuildingID")
				Me.OnMultiFloorBuildingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopFloorNo", DbType:="BigInt")>  _
	Public Property ShopFloorNo() As System.Nullable(Of Long)
		Get
			Return Me._ShopFloorNo
		End Get
		Set
			If (Me._ShopFloorNo.Equals(value) = false) Then
				Me.OnShopFloorNoChanging(value)
				Me.SendPropertyChanging
				Me._ShopFloorNo = value
				Me.SendPropertyChanged("ShopFloorNo")
				Me.OnShopFloorNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopName", DbType:="NVarChar(50)")>  _
	Public Property ShopName() As String
		Get
			Return Me._ShopName
		End Get
		Set
			If (String.Equals(Me._ShopName, value) = false) Then
				Me.OnShopNameChanging(value)
				Me.SendPropertyChanging
				Me._ShopName = value
				Me.SendPropertyChanged("ShopName")
				Me.OnShopNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopNumber", DbType:="NVarChar(10)")>  _
	Public Property ShopNumber() As String
		Get
			Return Me._ShopNumber
		End Get
		Set
			If (String.Equals(Me._ShopNumber, value) = false) Then
				Me.OnShopNumberChanging(value)
				Me.SendPropertyChanging
				Me._ShopNumber = value
				Me.SendPropertyChanged("ShopNumber")
				Me.OnShopNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopDescription", DbType:="NVarChar(MAX)")>  _
	Public Property ShopDescription() As String
		Get
			Return Me._ShopDescription
		End Get
		Set
			If (String.Equals(Me._ShopDescription, value) = false) Then
				Me.OnShopDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ShopDescription = value
				Me.SendPropertyChanged("ShopDescription")
				Me.OnShopDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuildingShop_APP_MultiFloorBuildingShopAttachment", Storage:="_APP_MultiFloorBuildingShopAttachments", ThisKey:="ID", OtherKey:="BuildingShopID")>  _
	Public Property APP_MultiFloorBuildingShopAttachments() As EntitySet(Of APP_MultiFloorBuildingShopAttachment)
		Get
			Return Me._APP_MultiFloorBuildingShopAttachments
		End Get
		Set
			Me._APP_MultiFloorBuildingShopAttachments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuilding_APP_MultiFloorBuildingShop", Storage:="_APP_MultiFloorBuilding", ThisKey:="MultiFloorBuildingID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_MultiFloorBuilding() As APP_MultiFloorBuilding
		Get
			Return Me._APP_MultiFloorBuilding.Entity
		End Get
		Set
			Dim previousValue As APP_MultiFloorBuilding = Me._APP_MultiFloorBuilding.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_MultiFloorBuilding.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_MultiFloorBuilding.Entity = Nothing
					previousValue.APP_MultiFloorBuildingShops.Remove(Me)
				End If
				Me._APP_MultiFloorBuilding.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_MultiFloorBuildingShops.Add(Me)
					Me._MultiFloorBuildingID = value.ID
				Else
					Me._MultiFloorBuildingID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_MultiFloorBuilding")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_APP_MultiFloorBuildingShopAttachments(ByVal entity As APP_MultiFloorBuildingShopAttachment)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuildingShop = Me
	End Sub
	
	Private Sub detach_APP_MultiFloorBuildingShopAttachments(ByVal entity As APP_MultiFloorBuildingShopAttachment)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuildingShop = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingShopTemps")>  _
Partial Public Class APP_MultiFloorBuildingShopTemp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _MultiFloorBuildingID As System.Nullable(Of Long)
	
	Private _ShopFloorNo As System.Nullable(Of Long)
	
	Private _ShopName As String
	
	Private _ShopNumber As String
	
	Private _ShopDescription As String
	
	Private _APP_MultiFloorBuildingTemp As EntityRef(Of APP_MultiFloorBuildingTemp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMultiFloorBuildingIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMultiFloorBuildingIDChanged()
    End Sub
    Partial Private Sub OnShopFloorNoChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnShopFloorNoChanged()
    End Sub
    Partial Private Sub OnShopNameChanging(value As String)
    End Sub
    Partial Private Sub OnShopNameChanged()
    End Sub
    Partial Private Sub OnShopNumberChanging(value As String)
    End Sub
    Partial Private Sub OnShopNumberChanged()
    End Sub
    Partial Private Sub OnShopDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnShopDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_MultiFloorBuildingTemp = CType(Nothing, EntityRef(Of APP_MultiFloorBuildingTemp))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MultiFloorBuildingID", DbType:="BigInt")>  _
	Public Property MultiFloorBuildingID() As System.Nullable(Of Long)
		Get
			Return Me._MultiFloorBuildingID
		End Get
		Set
			If (Me._MultiFloorBuildingID.Equals(value) = false) Then
				If Me._APP_MultiFloorBuildingTemp.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMultiFloorBuildingIDChanging(value)
				Me.SendPropertyChanging
				Me._MultiFloorBuildingID = value
				Me.SendPropertyChanged("MultiFloorBuildingID")
				Me.OnMultiFloorBuildingIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopFloorNo", DbType:="BigInt")>  _
	Public Property ShopFloorNo() As System.Nullable(Of Long)
		Get
			Return Me._ShopFloorNo
		End Get
		Set
			If (Me._ShopFloorNo.Equals(value) = false) Then
				Me.OnShopFloorNoChanging(value)
				Me.SendPropertyChanging
				Me._ShopFloorNo = value
				Me.SendPropertyChanged("ShopFloorNo")
				Me.OnShopFloorNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopName", DbType:="NVarChar(50)")>  _
	Public Property ShopName() As String
		Get
			Return Me._ShopName
		End Get
		Set
			If (String.Equals(Me._ShopName, value) = false) Then
				Me.OnShopNameChanging(value)
				Me.SendPropertyChanging
				Me._ShopName = value
				Me.SendPropertyChanged("ShopName")
				Me.OnShopNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopNumber", DbType:="NVarChar(10)")>  _
	Public Property ShopNumber() As String
		Get
			Return Me._ShopNumber
		End Get
		Set
			If (String.Equals(Me._ShopNumber, value) = false) Then
				Me.OnShopNumberChanging(value)
				Me.SendPropertyChanging
				Me._ShopNumber = value
				Me.SendPropertyChanged("ShopNumber")
				Me.OnShopNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShopDescription", DbType:="NVarChar(MAX)")>  _
	Public Property ShopDescription() As String
		Get
			Return Me._ShopDescription
		End Get
		Set
			If (String.Equals(Me._ShopDescription, value) = false) Then
				Me.OnShopDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ShopDescription = value
				Me.SendPropertyChanged("ShopDescription")
				Me.OnShopDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuildingTemp_APP_MultiFloorBuildingShopTemp", Storage:="_APP_MultiFloorBuildingTemp", ThisKey:="MultiFloorBuildingID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_MultiFloorBuildingTemp() As APP_MultiFloorBuildingTemp
		Get
			Return Me._APP_MultiFloorBuildingTemp.Entity
		End Get
		Set
			Dim previousValue As APP_MultiFloorBuildingTemp = Me._APP_MultiFloorBuildingTemp.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_MultiFloorBuildingTemp.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_MultiFloorBuildingTemp.Entity = Nothing
					previousValue.APP_MultiFloorBuildingShopTemps.Remove(Me)
				End If
				Me._APP_MultiFloorBuildingTemp.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_MultiFloorBuildingShopTemps.Add(Me)
					Me._MultiFloorBuildingID = value.ID
				Else
					Me._MultiFloorBuildingID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_MultiFloorBuildingTemp")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_MultiFloorBuildingTemps")>  _
Partial Public Class APP_MultiFloorBuildingTemp
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _UserID As System.Nullable(Of System.Guid)
	
	Private _MFBuildingName As String
	
	Private _MFBuildingOfficialName As String
	
	Private _MFBuildingOwnerID As System.Nullable(Of Long)
	
	Private _MFBuildingContactName As String
	
	Private _MFBuildingContactGSMCountryCodeID As System.Nullable(Of Long)
	
	Private _MFBuildingContactGSM As String
	
	Private _MFCurrencyTypeCountryCodeID As String
	
	Private _MFBuildingRentingPrice As System.Nullable(Of Decimal)
	
	Private _MFBuildingAddress As String
	
	Private _MFBuildingGPS As String
	
	Private _MFBuildingMapUrl As String
	
	Private _MFBuildingMemo As String
	
	Private _MFBuildingFloorCount As System.Nullable(Of Long)
	
	Private _MFBuildingShopCount As System.Nullable(Of Long)
	
	Private _MFBuildingFlatCount As System.Nullable(Of Long)
	
	Private _MFBuildingOfficeCount As System.Nullable(Of Long)
	
	Private _APP_MultiFloorBuildingFlatTemps As EntitySet(Of APP_MultiFloorBuildingFlatTemp)
	
	Private _APP_MultiFloorBuildingFloorTemps As EntitySet(Of APP_MultiFloorBuildingFloorTemp)
	
	Private _APP_MultiFloorBuildingOfficeTemps As EntitySet(Of APP_MultiFloorBuildingOfficeTemp)
	
	Private _APP_MultiFloorBuildingShopTemps As EntitySet(Of APP_MultiFloorBuildingShopTemp)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnUserIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnUserIDChanged()
    End Sub
    Partial Private Sub OnMFBuildingNameChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingNameChanged()
    End Sub
    Partial Private Sub OnMFBuildingOfficialNameChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingOfficialNameChanged()
    End Sub
    Partial Private Sub OnMFBuildingOwnerIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMFBuildingOwnerIDChanged()
    End Sub
    Partial Private Sub OnMFBuildingContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingContactNameChanged()
    End Sub
    Partial Private Sub OnMFBuildingContactGSMCountryCodeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMFBuildingContactGSMCountryCodeIDChanged()
    End Sub
    Partial Private Sub OnMFBuildingContactGSMChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingContactGSMChanged()
    End Sub
    Partial Private Sub OnMFCurrencyTypeCountryCodeIDChanging(value As String)
    End Sub
    Partial Private Sub OnMFCurrencyTypeCountryCodeIDChanged()
    End Sub
    Partial Private Sub OnMFBuildingRentingPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMFBuildingRentingPriceChanged()
    End Sub
    Partial Private Sub OnMFBuildingAddressChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingAddressChanged()
    End Sub
    Partial Private Sub OnMFBuildingGPSChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingGPSChanged()
    End Sub
    Partial Private Sub OnMFBuildingMapUrlChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingMapUrlChanged()
    End Sub
    Partial Private Sub OnMFBuildingMemoChanging(value As String)
    End Sub
    Partial Private Sub OnMFBuildingMemoChanged()
    End Sub
    Partial Private Sub OnMFBuildingFloorCountChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMFBuildingFloorCountChanged()
    End Sub
    Partial Private Sub OnMFBuildingShopCountChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMFBuildingShopCountChanged()
    End Sub
    Partial Private Sub OnMFBuildingFlatCountChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMFBuildingFlatCountChanged()
    End Sub
    Partial Private Sub OnMFBuildingOfficeCountChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMFBuildingOfficeCountChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_MultiFloorBuildingFlatTemps = New EntitySet(Of APP_MultiFloorBuildingFlatTemp)(AddressOf Me.attach_APP_MultiFloorBuildingFlatTemps, AddressOf Me.detach_APP_MultiFloorBuildingFlatTemps)
		Me._APP_MultiFloorBuildingFloorTemps = New EntitySet(Of APP_MultiFloorBuildingFloorTemp)(AddressOf Me.attach_APP_MultiFloorBuildingFloorTemps, AddressOf Me.detach_APP_MultiFloorBuildingFloorTemps)
		Me._APP_MultiFloorBuildingOfficeTemps = New EntitySet(Of APP_MultiFloorBuildingOfficeTemp)(AddressOf Me.attach_APP_MultiFloorBuildingOfficeTemps, AddressOf Me.detach_APP_MultiFloorBuildingOfficeTemps)
		Me._APP_MultiFloorBuildingShopTemps = New EntitySet(Of APP_MultiFloorBuildingShopTemp)(AddressOf Me.attach_APP_MultiFloorBuildingShopTemps, AddressOf Me.detach_APP_MultiFloorBuildingShopTemps)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="UniqueIdentifier")>  _
	Public Property UserID() As System.Nullable(Of System.Guid)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me.OnUserIDChanging(value)
				Me.SendPropertyChanging
				Me._UserID = value
				Me.SendPropertyChanged("UserID")
				Me.OnUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingName", DbType:="NVarChar(150)")>  _
	Public Property MFBuildingName() As String
		Get
			Return Me._MFBuildingName
		End Get
		Set
			If (String.Equals(Me._MFBuildingName, value) = false) Then
				Me.OnMFBuildingNameChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingName = value
				Me.SendPropertyChanged("MFBuildingName")
				Me.OnMFBuildingNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingOfficialName", DbType:="NVarChar(150)")>  _
	Public Property MFBuildingOfficialName() As String
		Get
			Return Me._MFBuildingOfficialName
		End Get
		Set
			If (String.Equals(Me._MFBuildingOfficialName, value) = false) Then
				Me.OnMFBuildingOfficialNameChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingOfficialName = value
				Me.SendPropertyChanged("MFBuildingOfficialName")
				Me.OnMFBuildingOfficialNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingOwnerID", DbType:="BigInt")>  _
	Public Property MFBuildingOwnerID() As System.Nullable(Of Long)
		Get
			Return Me._MFBuildingOwnerID
		End Get
		Set
			If (Me._MFBuildingOwnerID.Equals(value) = false) Then
				Me.OnMFBuildingOwnerIDChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingOwnerID = value
				Me.SendPropertyChanged("MFBuildingOwnerID")
				Me.OnMFBuildingOwnerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingContactName", DbType:="NVarChar(150)")>  _
	Public Property MFBuildingContactName() As String
		Get
			Return Me._MFBuildingContactName
		End Get
		Set
			If (String.Equals(Me._MFBuildingContactName, value) = false) Then
				Me.OnMFBuildingContactNameChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingContactName = value
				Me.SendPropertyChanged("MFBuildingContactName")
				Me.OnMFBuildingContactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingContactGSMCountryCodeID", DbType:="BigInt")>  _
	Public Property MFBuildingContactGSMCountryCodeID() As System.Nullable(Of Long)
		Get
			Return Me._MFBuildingContactGSMCountryCodeID
		End Get
		Set
			If (Me._MFBuildingContactGSMCountryCodeID.Equals(value) = false) Then
				Me.OnMFBuildingContactGSMCountryCodeIDChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingContactGSMCountryCodeID = value
				Me.SendPropertyChanged("MFBuildingContactGSMCountryCodeID")
				Me.OnMFBuildingContactGSMCountryCodeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingContactGSM", DbType:="NVarChar(10)")>  _
	Public Property MFBuildingContactGSM() As String
		Get
			Return Me._MFBuildingContactGSM
		End Get
		Set
			If (String.Equals(Me._MFBuildingContactGSM, value) = false) Then
				Me.OnMFBuildingContactGSMChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingContactGSM = value
				Me.SendPropertyChanged("MFBuildingContactGSM")
				Me.OnMFBuildingContactGSMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFCurrencyTypeCountryCodeID", DbType:="NVarChar(6)")>  _
	Public Property MFCurrencyTypeCountryCodeID() As String
		Get
			Return Me._MFCurrencyTypeCountryCodeID
		End Get
		Set
			If (String.Equals(Me._MFCurrencyTypeCountryCodeID, value) = false) Then
				Me.OnMFCurrencyTypeCountryCodeIDChanging(value)
				Me.SendPropertyChanging
				Me._MFCurrencyTypeCountryCodeID = value
				Me.SendPropertyChanged("MFCurrencyTypeCountryCodeID")
				Me.OnMFCurrencyTypeCountryCodeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingRentingPrice", DbType:="Money")>  _
	Public Property MFBuildingRentingPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._MFBuildingRentingPrice
		End Get
		Set
			If (Me._MFBuildingRentingPrice.Equals(value) = false) Then
				Me.OnMFBuildingRentingPriceChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingRentingPrice = value
				Me.SendPropertyChanged("MFBuildingRentingPrice")
				Me.OnMFBuildingRentingPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingAddress", DbType:="NVarChar(MAX)")>  _
	Public Property MFBuildingAddress() As String
		Get
			Return Me._MFBuildingAddress
		End Get
		Set
			If (String.Equals(Me._MFBuildingAddress, value) = false) Then
				Me.OnMFBuildingAddressChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingAddress = value
				Me.SendPropertyChanged("MFBuildingAddress")
				Me.OnMFBuildingAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingGPS", DbType:="NVarChar(150)")>  _
	Public Property MFBuildingGPS() As String
		Get
			Return Me._MFBuildingGPS
		End Get
		Set
			If (String.Equals(Me._MFBuildingGPS, value) = false) Then
				Me.OnMFBuildingGPSChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingGPS = value
				Me.SendPropertyChanged("MFBuildingGPS")
				Me.OnMFBuildingGPSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingMapUrl", DbType:="NVarChar(150)")>  _
	Public Property MFBuildingMapUrl() As String
		Get
			Return Me._MFBuildingMapUrl
		End Get
		Set
			If (String.Equals(Me._MFBuildingMapUrl, value) = false) Then
				Me.OnMFBuildingMapUrlChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingMapUrl = value
				Me.SendPropertyChanged("MFBuildingMapUrl")
				Me.OnMFBuildingMapUrlChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingMemo", DbType:="NVarChar(MAX)")>  _
	Public Property MFBuildingMemo() As String
		Get
			Return Me._MFBuildingMemo
		End Get
		Set
			If (String.Equals(Me._MFBuildingMemo, value) = false) Then
				Me.OnMFBuildingMemoChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingMemo = value
				Me.SendPropertyChanged("MFBuildingMemo")
				Me.OnMFBuildingMemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingFloorCount", DbType:="BigInt")>  _
	Public Property MFBuildingFloorCount() As System.Nullable(Of Long)
		Get
			Return Me._MFBuildingFloorCount
		End Get
		Set
			If (Me._MFBuildingFloorCount.Equals(value) = false) Then
				Me.OnMFBuildingFloorCountChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingFloorCount = value
				Me.SendPropertyChanged("MFBuildingFloorCount")
				Me.OnMFBuildingFloorCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingShopCount", DbType:="BigInt")>  _
	Public Property MFBuildingShopCount() As System.Nullable(Of Long)
		Get
			Return Me._MFBuildingShopCount
		End Get
		Set
			If (Me._MFBuildingShopCount.Equals(value) = false) Then
				Me.OnMFBuildingShopCountChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingShopCount = value
				Me.SendPropertyChanged("MFBuildingShopCount")
				Me.OnMFBuildingShopCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingFlatCount", DbType:="BigInt")>  _
	Public Property MFBuildingFlatCount() As System.Nullable(Of Long)
		Get
			Return Me._MFBuildingFlatCount
		End Get
		Set
			If (Me._MFBuildingFlatCount.Equals(value) = false) Then
				Me.OnMFBuildingFlatCountChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingFlatCount = value
				Me.SendPropertyChanged("MFBuildingFlatCount")
				Me.OnMFBuildingFlatCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MFBuildingOfficeCount", DbType:="BigInt")>  _
	Public Property MFBuildingOfficeCount() As System.Nullable(Of Long)
		Get
			Return Me._MFBuildingOfficeCount
		End Get
		Set
			If (Me._MFBuildingOfficeCount.Equals(value) = false) Then
				Me.OnMFBuildingOfficeCountChanging(value)
				Me.SendPropertyChanging
				Me._MFBuildingOfficeCount = value
				Me.SendPropertyChanged("MFBuildingOfficeCount")
				Me.OnMFBuildingOfficeCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuildingTemp_APP_MultiFloorBuildingFlatTemp", Storage:="_APP_MultiFloorBuildingFlatTemps", ThisKey:="ID", OtherKey:="MultiFloorBuildingID")>  _
	Public Property APP_MultiFloorBuildingFlatTemps() As EntitySet(Of APP_MultiFloorBuildingFlatTemp)
		Get
			Return Me._APP_MultiFloorBuildingFlatTemps
		End Get
		Set
			Me._APP_MultiFloorBuildingFlatTemps.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuildingTemp_APP_MultiFloorBuildingFloorTemp", Storage:="_APP_MultiFloorBuildingFloorTemps", ThisKey:="ID", OtherKey:="MultiFloorBuildingTempID")>  _
	Public Property APP_MultiFloorBuildingFloorTemps() As EntitySet(Of APP_MultiFloorBuildingFloorTemp)
		Get
			Return Me._APP_MultiFloorBuildingFloorTemps
		End Get
		Set
			Me._APP_MultiFloorBuildingFloorTemps.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuildingTemp_APP_MultiFloorBuildingOfficeTemp", Storage:="_APP_MultiFloorBuildingOfficeTemps", ThisKey:="ID", OtherKey:="MultiFloorBuildingID")>  _
	Public Property APP_MultiFloorBuildingOfficeTemps() As EntitySet(Of APP_MultiFloorBuildingOfficeTemp)
		Get
			Return Me._APP_MultiFloorBuildingOfficeTemps
		End Get
		Set
			Me._APP_MultiFloorBuildingOfficeTemps.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_MultiFloorBuildingTemp_APP_MultiFloorBuildingShopTemp", Storage:="_APP_MultiFloorBuildingShopTemps", ThisKey:="ID", OtherKey:="MultiFloorBuildingID")>  _
	Public Property APP_MultiFloorBuildingShopTemps() As EntitySet(Of APP_MultiFloorBuildingShopTemp)
		Get
			Return Me._APP_MultiFloorBuildingShopTemps
		End Get
		Set
			Me._APP_MultiFloorBuildingShopTemps.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_APP_MultiFloorBuildingFlatTemps(ByVal entity As APP_MultiFloorBuildingFlatTemp)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuildingTemp = Me
	End Sub
	
	Private Sub detach_APP_MultiFloorBuildingFlatTemps(ByVal entity As APP_MultiFloorBuildingFlatTemp)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuildingTemp = Nothing
	End Sub
	
	Private Sub attach_APP_MultiFloorBuildingFloorTemps(ByVal entity As APP_MultiFloorBuildingFloorTemp)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuildingTemp = Me
	End Sub
	
	Private Sub detach_APP_MultiFloorBuildingFloorTemps(ByVal entity As APP_MultiFloorBuildingFloorTemp)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuildingTemp = Nothing
	End Sub
	
	Private Sub attach_APP_MultiFloorBuildingOfficeTemps(ByVal entity As APP_MultiFloorBuildingOfficeTemp)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuildingTemp = Me
	End Sub
	
	Private Sub detach_APP_MultiFloorBuildingOfficeTemps(ByVal entity As APP_MultiFloorBuildingOfficeTemp)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuildingTemp = Nothing
	End Sub
	
	Private Sub attach_APP_MultiFloorBuildingShopTemps(ByVal entity As APP_MultiFloorBuildingShopTemp)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuildingTemp = Me
	End Sub
	
	Private Sub detach_APP_MultiFloorBuildingShopTemps(ByVal entity As APP_MultiFloorBuildingShopTemp)
		Me.SendPropertyChanging
		entity.APP_MultiFloorBuildingTemp = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_Owners")>  _
Partial Public Class APP_Owner
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _OwnerContactID As System.Nullable(Of Long)
	
	Private _OwnerstaffName1 As String
	
	Private _OwnerstaffName1GSM As String
	
	Private _OwnerstaffName2 As String
	
	Private _OwnerstaffName2GSM As String
	
	Private _OwnerDocument As String
	
	Private _OwnerMemo As String
	
	Private _OwnerAddedBy As System.Nullable(Of System.Guid)
	
	Private _OwnerAddedDate As System.Nullable(Of Date)
	
	Private _OwnerUpdatedBy As System.Nullable(Of System.Guid)
	
	Private _OwnerUpdatedDate As System.Nullable(Of Date)
	
	Private _Ownerstatus As System.Nullable(Of Boolean)
	
	Private _APP_MultiFloorBuildings As EntitySet(Of APP_MultiFloorBuilding)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnOwnerContactIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnOwnerContactIDChanged()
    End Sub
    Partial Private Sub OnOwnerstaffName1Changing(value As String)
    End Sub
    Partial Private Sub OnOwnerstaffName1Changed()
    End Sub
    Partial Private Sub OnOwnerstaffName1GSMChanging(value As String)
    End Sub
    Partial Private Sub OnOwnerstaffName1GSMChanged()
    End Sub
    Partial Private Sub OnOwnerstaffName2Changing(value As String)
    End Sub
    Partial Private Sub OnOwnerstaffName2Changed()
    End Sub
    Partial Private Sub OnOwnerstaffName2GSMChanging(value As String)
    End Sub
    Partial Private Sub OnOwnerstaffName2GSMChanged()
    End Sub
    Partial Private Sub OnOwnerDocumentChanging(value As String)
    End Sub
    Partial Private Sub OnOwnerDocumentChanged()
    End Sub
    Partial Private Sub OnOwnerMemoChanging(value As String)
    End Sub
    Partial Private Sub OnOwnerMemoChanged()
    End Sub
    Partial Private Sub OnOwnerAddedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnOwnerAddedByChanged()
    End Sub
    Partial Private Sub OnOwnerAddedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnOwnerAddedDateChanged()
    End Sub
    Partial Private Sub OnOwnerUpdatedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnOwnerUpdatedByChanged()
    End Sub
    Partial Private Sub OnOwnerUpdatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnOwnerUpdatedDateChanged()
    End Sub
    Partial Private Sub OnOwnerstatusChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnOwnerstatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_MultiFloorBuildings = New EntitySet(Of APP_MultiFloorBuilding)(AddressOf Me.attach_APP_MultiFloorBuildings, AddressOf Me.detach_APP_MultiFloorBuildings)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnerContactID", DbType:="BigInt")>  _
	Public Property OwnerContactID() As System.Nullable(Of Long)
		Get
			Return Me._OwnerContactID
		End Get
		Set
			If (Me._OwnerContactID.Equals(value) = false) Then
				Me.OnOwnerContactIDChanging(value)
				Me.SendPropertyChanging
				Me._OwnerContactID = value
				Me.SendPropertyChanged("OwnerContactID")
				Me.OnOwnerContactIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnerstaffName1", DbType:="NVarChar(50)")>  _
	Public Property OwnerstaffName1() As String
		Get
			Return Me._OwnerstaffName1
		End Get
		Set
			If (String.Equals(Me._OwnerstaffName1, value) = false) Then
				Me.OnOwnerstaffName1Changing(value)
				Me.SendPropertyChanging
				Me._OwnerstaffName1 = value
				Me.SendPropertyChanged("OwnerstaffName1")
				Me.OnOwnerstaffName1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnerstaffName1GSM", DbType:="NVarChar(20)")>  _
	Public Property OwnerstaffName1GSM() As String
		Get
			Return Me._OwnerstaffName1GSM
		End Get
		Set
			If (String.Equals(Me._OwnerstaffName1GSM, value) = false) Then
				Me.OnOwnerstaffName1GSMChanging(value)
				Me.SendPropertyChanging
				Me._OwnerstaffName1GSM = value
				Me.SendPropertyChanged("OwnerstaffName1GSM")
				Me.OnOwnerstaffName1GSMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnerstaffName2", DbType:="NVarChar(50)")>  _
	Public Property OwnerstaffName2() As String
		Get
			Return Me._OwnerstaffName2
		End Get
		Set
			If (String.Equals(Me._OwnerstaffName2, value) = false) Then
				Me.OnOwnerstaffName2Changing(value)
				Me.SendPropertyChanging
				Me._OwnerstaffName2 = value
				Me.SendPropertyChanged("OwnerstaffName2")
				Me.OnOwnerstaffName2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnerstaffName2GSM", DbType:="NVarChar(20)")>  _
	Public Property OwnerstaffName2GSM() As String
		Get
			Return Me._OwnerstaffName2GSM
		End Get
		Set
			If (String.Equals(Me._OwnerstaffName2GSM, value) = false) Then
				Me.OnOwnerstaffName2GSMChanging(value)
				Me.SendPropertyChanging
				Me._OwnerstaffName2GSM = value
				Me.SendPropertyChanged("OwnerstaffName2GSM")
				Me.OnOwnerstaffName2GSMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnerDocument", DbType:="NVarChar(120)")>  _
	Public Property OwnerDocument() As String
		Get
			Return Me._OwnerDocument
		End Get
		Set
			If (String.Equals(Me._OwnerDocument, value) = false) Then
				Me.OnOwnerDocumentChanging(value)
				Me.SendPropertyChanging
				Me._OwnerDocument = value
				Me.SendPropertyChanged("OwnerDocument")
				Me.OnOwnerDocumentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnerMemo", DbType:="NVarChar(MAX)")>  _
	Public Property OwnerMemo() As String
		Get
			Return Me._OwnerMemo
		End Get
		Set
			If (String.Equals(Me._OwnerMemo, value) = false) Then
				Me.OnOwnerMemoChanging(value)
				Me.SendPropertyChanging
				Me._OwnerMemo = value
				Me.SendPropertyChanged("OwnerMemo")
				Me.OnOwnerMemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnerAddedBy", DbType:="UniqueIdentifier")>  _
	Public Property OwnerAddedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._OwnerAddedBy
		End Get
		Set
			If (Me._OwnerAddedBy.Equals(value) = false) Then
				Me.OnOwnerAddedByChanging(value)
				Me.SendPropertyChanging
				Me._OwnerAddedBy = value
				Me.SendPropertyChanged("OwnerAddedBy")
				Me.OnOwnerAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnerAddedDate", DbType:="DateTime")>  _
	Public Property OwnerAddedDate() As System.Nullable(Of Date)
		Get
			Return Me._OwnerAddedDate
		End Get
		Set
			If (Me._OwnerAddedDate.Equals(value) = false) Then
				Me.OnOwnerAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._OwnerAddedDate = value
				Me.SendPropertyChanged("OwnerAddedDate")
				Me.OnOwnerAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnerUpdatedBy", DbType:="UniqueIdentifier")>  _
	Public Property OwnerUpdatedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._OwnerUpdatedBy
		End Get
		Set
			If (Me._OwnerUpdatedBy.Equals(value) = false) Then
				Me.OnOwnerUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._OwnerUpdatedBy = value
				Me.SendPropertyChanged("OwnerUpdatedBy")
				Me.OnOwnerUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnerUpdatedDate", DbType:="DateTime")>  _
	Public Property OwnerUpdatedDate() As System.Nullable(Of Date)
		Get
			Return Me._OwnerUpdatedDate
		End Get
		Set
			If (Me._OwnerUpdatedDate.Equals(value) = false) Then
				Me.OnOwnerUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._OwnerUpdatedDate = value
				Me.SendPropertyChanged("OwnerUpdatedDate")
				Me.OnOwnerUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ownerstatus", DbType:="Bit")>  _
	Public Property Ownerstatus() As System.Nullable(Of Boolean)
		Get
			Return Me._Ownerstatus
		End Get
		Set
			If (Me._Ownerstatus.Equals(value) = false) Then
				Me.OnOwnerstatusChanging(value)
				Me.SendPropertyChanging
				Me._Ownerstatus = value
				Me.SendPropertyChanged("Ownerstatus")
				Me.OnOwnerstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_Owner_APP_MultiFloorBuilding", Storage:="_APP_MultiFloorBuildings", ThisKey:="ID", OtherKey:="MFBuildingOwnerID")>  _
	Public Property APP_MultiFloorBuildings() As EntitySet(Of APP_MultiFloorBuilding)
		Get
			Return Me._APP_MultiFloorBuildings
		End Get
		Set
			Me._APP_MultiFloorBuildings.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_APP_MultiFloorBuildings(ByVal entity As APP_MultiFloorBuilding)
		Me.SendPropertyChanging
		entity.APP_Owner = Me
	End Sub
	
	Private Sub detach_APP_MultiFloorBuildings(ByVal entity As APP_MultiFloorBuilding)
		Me.SendPropertyChanging
		entity.APP_Owner = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_Suppliers")>  _
Partial Public Class APP_Supplier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _SupplierContactID As System.Nullable(Of Long)
	
	Private _SupplierStaffName1 As String
	
	Private _SupplierStaffName1GSM As String
	
	Private _SupplierStaffName2 As String
	
	Private _SupplierStaffName2GSM As String
	
	Private _SupplierDocument As String
	
	Private _SupplierMemo As String
	
	Private _SupplierAddedBy As System.Nullable(Of System.Guid)
	
	Private _SupplierAddedDate As System.Nullable(Of Date)
	
	Private _SupplierUpdatedBy As System.Nullable(Of System.Guid)
	
	Private _SupplierUpdatedDate As System.Nullable(Of Date)
	
	Private _SupplierStatus As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSupplierContactIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnSupplierContactIDChanged()
    End Sub
    Partial Private Sub OnSupplierStaffName1Changing(value As String)
    End Sub
    Partial Private Sub OnSupplierStaffName1Changed()
    End Sub
    Partial Private Sub OnSupplierStaffName1GSMChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierStaffName1GSMChanged()
    End Sub
    Partial Private Sub OnSupplierStaffName2Changing(value As String)
    End Sub
    Partial Private Sub OnSupplierStaffName2Changed()
    End Sub
    Partial Private Sub OnSupplierStaffName2GSMChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierStaffName2GSMChanged()
    End Sub
    Partial Private Sub OnSupplierDocumentChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierDocumentChanged()
    End Sub
    Partial Private Sub OnSupplierMemoChanging(value As String)
    End Sub
    Partial Private Sub OnSupplierMemoChanged()
    End Sub
    Partial Private Sub OnSupplierAddedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnSupplierAddedByChanged()
    End Sub
    Partial Private Sub OnSupplierAddedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSupplierAddedDateChanged()
    End Sub
    Partial Private Sub OnSupplierUpdatedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnSupplierUpdatedByChanged()
    End Sub
    Partial Private Sub OnSupplierUpdatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSupplierUpdatedDateChanged()
    End Sub
    Partial Private Sub OnSupplierStatusChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSupplierStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierContactID", DbType:="BigInt")>  _
	Public Property SupplierContactID() As System.Nullable(Of Long)
		Get
			Return Me._SupplierContactID
		End Get
		Set
			If (Me._SupplierContactID.Equals(value) = false) Then
				Me.OnSupplierContactIDChanging(value)
				Me.SendPropertyChanging
				Me._SupplierContactID = value
				Me.SendPropertyChanged("SupplierContactID")
				Me.OnSupplierContactIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierStaffName1", DbType:="NVarChar(50)")>  _
	Public Property SupplierStaffName1() As String
		Get
			Return Me._SupplierStaffName1
		End Get
		Set
			If (String.Equals(Me._SupplierStaffName1, value) = false) Then
				Me.OnSupplierStaffName1Changing(value)
				Me.SendPropertyChanging
				Me._SupplierStaffName1 = value
				Me.SendPropertyChanged("SupplierStaffName1")
				Me.OnSupplierStaffName1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierStaffName1GSM", DbType:="NVarChar(20)")>  _
	Public Property SupplierStaffName1GSM() As String
		Get
			Return Me._SupplierStaffName1GSM
		End Get
		Set
			If (String.Equals(Me._SupplierStaffName1GSM, value) = false) Then
				Me.OnSupplierStaffName1GSMChanging(value)
				Me.SendPropertyChanging
				Me._SupplierStaffName1GSM = value
				Me.SendPropertyChanged("SupplierStaffName1GSM")
				Me.OnSupplierStaffName1GSMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierStaffName2", DbType:="NVarChar(50)")>  _
	Public Property SupplierStaffName2() As String
		Get
			Return Me._SupplierStaffName2
		End Get
		Set
			If (String.Equals(Me._SupplierStaffName2, value) = false) Then
				Me.OnSupplierStaffName2Changing(value)
				Me.SendPropertyChanging
				Me._SupplierStaffName2 = value
				Me.SendPropertyChanged("SupplierStaffName2")
				Me.OnSupplierStaffName2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierStaffName2GSM", DbType:="NVarChar(20)")>  _
	Public Property SupplierStaffName2GSM() As String
		Get
			Return Me._SupplierStaffName2GSM
		End Get
		Set
			If (String.Equals(Me._SupplierStaffName2GSM, value) = false) Then
				Me.OnSupplierStaffName2GSMChanging(value)
				Me.SendPropertyChanging
				Me._SupplierStaffName2GSM = value
				Me.SendPropertyChanged("SupplierStaffName2GSM")
				Me.OnSupplierStaffName2GSMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierDocument", DbType:="NVarChar(120)")>  _
	Public Property SupplierDocument() As String
		Get
			Return Me._SupplierDocument
		End Get
		Set
			If (String.Equals(Me._SupplierDocument, value) = false) Then
				Me.OnSupplierDocumentChanging(value)
				Me.SendPropertyChanging
				Me._SupplierDocument = value
				Me.SendPropertyChanged("SupplierDocument")
				Me.OnSupplierDocumentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierMemo", DbType:="NVarChar(MAX)")>  _
	Public Property SupplierMemo() As String
		Get
			Return Me._SupplierMemo
		End Get
		Set
			If (String.Equals(Me._SupplierMemo, value) = false) Then
				Me.OnSupplierMemoChanging(value)
				Me.SendPropertyChanging
				Me._SupplierMemo = value
				Me.SendPropertyChanged("SupplierMemo")
				Me.OnSupplierMemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierAddedBy", DbType:="UniqueIdentifier")>  _
	Public Property SupplierAddedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._SupplierAddedBy
		End Get
		Set
			If (Me._SupplierAddedBy.Equals(value) = false) Then
				Me.OnSupplierAddedByChanging(value)
				Me.SendPropertyChanging
				Me._SupplierAddedBy = value
				Me.SendPropertyChanged("SupplierAddedBy")
				Me.OnSupplierAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierAddedDate", DbType:="DateTime")>  _
	Public Property SupplierAddedDate() As System.Nullable(Of Date)
		Get
			Return Me._SupplierAddedDate
		End Get
		Set
			If (Me._SupplierAddedDate.Equals(value) = false) Then
				Me.OnSupplierAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._SupplierAddedDate = value
				Me.SendPropertyChanged("SupplierAddedDate")
				Me.OnSupplierAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierUpdatedBy", DbType:="UniqueIdentifier")>  _
	Public Property SupplierUpdatedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._SupplierUpdatedBy
		End Get
		Set
			If (Me._SupplierUpdatedBy.Equals(value) = false) Then
				Me.OnSupplierUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._SupplierUpdatedBy = value
				Me.SendPropertyChanged("SupplierUpdatedBy")
				Me.OnSupplierUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierUpdatedDate", DbType:="DateTime")>  _
	Public Property SupplierUpdatedDate() As System.Nullable(Of Date)
		Get
			Return Me._SupplierUpdatedDate
		End Get
		Set
			If (Me._SupplierUpdatedDate.Equals(value) = false) Then
				Me.OnSupplierUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._SupplierUpdatedDate = value
				Me.SendPropertyChanged("SupplierUpdatedDate")
				Me.OnSupplierUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierStatus", DbType:="Bit")>  _
	Public Property SupplierStatus() As System.Nullable(Of Boolean)
		Get
			Return Me._SupplierStatus
		End Get
		Set
			If (Me._SupplierStatus.Equals(value) = false) Then
				Me.OnSupplierStatusChanging(value)
				Me.SendPropertyChanging
				Me._SupplierStatus = value
				Me.SendPropertyChanged("SupplierStatus")
				Me.OnSupplierStatusChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_UserProfiles")>  _
Partial Public Class APP_UserProfile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As System.Guid
	
	Private _UserSignature As String
	
	Private _UserTreasurerSalesAccount As System.Nullable(Of Decimal)
	
	Private _UserAccountantSalesAccount As System.Nullable(Of Decimal)
	
	Private _UserTreasurerExpensesAccount As System.Nullable(Of Decimal)
	
	Private _UserAccountantExpensesAccount As System.Nullable(Of Decimal)
	
	Private _UserContactID As System.Nullable(Of Long)
	
	Private _UserCurrentBranchID As System.Nullable(Of Long)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnUserSignatureChanging(value As String)
    End Sub
    Partial Private Sub OnUserSignatureChanged()
    End Sub
    Partial Private Sub OnUserTreasurerSalesAccountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUserTreasurerSalesAccountChanged()
    End Sub
    Partial Private Sub OnUserAccountantSalesAccountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUserAccountantSalesAccountChanged()
    End Sub
    Partial Private Sub OnUserTreasurerExpensesAccountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUserTreasurerExpensesAccountChanged()
    End Sub
    Partial Private Sub OnUserAccountantExpensesAccountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUserAccountantExpensesAccountChanged()
    End Sub
    Partial Private Sub OnUserContactIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUserContactIDChanged()
    End Sub
    Partial Private Sub OnUserCurrentBranchIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUserCurrentBranchIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserSignature", DbType:="NVarChar(50)")>  _
	Public Property UserSignature() As String
		Get
			Return Me._UserSignature
		End Get
		Set
			If (String.Equals(Me._UserSignature, value) = false) Then
				Me.OnUserSignatureChanging(value)
				Me.SendPropertyChanging
				Me._UserSignature = value
				Me.SendPropertyChanged("UserSignature")
				Me.OnUserSignatureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserTreasurerSalesAccount", DbType:="Money")>  _
	Public Property UserTreasurerSalesAccount() As System.Nullable(Of Decimal)
		Get
			Return Me._UserTreasurerSalesAccount
		End Get
		Set
			If (Me._UserTreasurerSalesAccount.Equals(value) = false) Then
				Me.OnUserTreasurerSalesAccountChanging(value)
				Me.SendPropertyChanging
				Me._UserTreasurerSalesAccount = value
				Me.SendPropertyChanged("UserTreasurerSalesAccount")
				Me.OnUserTreasurerSalesAccountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserAccountantSalesAccount", DbType:="Money")>  _
	Public Property UserAccountantSalesAccount() As System.Nullable(Of Decimal)
		Get
			Return Me._UserAccountantSalesAccount
		End Get
		Set
			If (Me._UserAccountantSalesAccount.Equals(value) = false) Then
				Me.OnUserAccountantSalesAccountChanging(value)
				Me.SendPropertyChanging
				Me._UserAccountantSalesAccount = value
				Me.SendPropertyChanged("UserAccountantSalesAccount")
				Me.OnUserAccountantSalesAccountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserTreasurerExpensesAccount", DbType:="Money")>  _
	Public Property UserTreasurerExpensesAccount() As System.Nullable(Of Decimal)
		Get
			Return Me._UserTreasurerExpensesAccount
		End Get
		Set
			If (Me._UserTreasurerExpensesAccount.Equals(value) = false) Then
				Me.OnUserTreasurerExpensesAccountChanging(value)
				Me.SendPropertyChanging
				Me._UserTreasurerExpensesAccount = value
				Me.SendPropertyChanged("UserTreasurerExpensesAccount")
				Me.OnUserTreasurerExpensesAccountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserAccountantExpensesAccount", DbType:="Money")>  _
	Public Property UserAccountantExpensesAccount() As System.Nullable(Of Decimal)
		Get
			Return Me._UserAccountantExpensesAccount
		End Get
		Set
			If (Me._UserAccountantExpensesAccount.Equals(value) = false) Then
				Me.OnUserAccountantExpensesAccountChanging(value)
				Me.SendPropertyChanging
				Me._UserAccountantExpensesAccount = value
				Me.SendPropertyChanged("UserAccountantExpensesAccount")
				Me.OnUserAccountantExpensesAccountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserContactID", DbType:="BigInt")>  _
	Public Property UserContactID() As System.Nullable(Of Long)
		Get
			Return Me._UserContactID
		End Get
		Set
			If (Me._UserContactID.Equals(value) = false) Then
				Me.OnUserContactIDChanging(value)
				Me.SendPropertyChanging
				Me._UserContactID = value
				Me.SendPropertyChanged("UserContactID")
				Me.OnUserContactIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserCurrentBranchID", DbType:="BigInt")>  _
	Public Property UserCurrentBranchID() As System.Nullable(Of Long)
		Get
			Return Me._UserCurrentBranchID
		End Get
		Set
			If (Me._UserCurrentBranchID.Equals(value) = false) Then
				Me.OnUserCurrentBranchIDChanging(value)
				Me.SendPropertyChanging
				Me._UserCurrentBranchID = value
				Me.SendPropertyChanged("UserCurrentBranchID")
				Me.OnUserCurrentBranchIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_VillaAttachments")>  _
Partial Public Class APP_VillaAttachment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _VillaID As System.Nullable(Of Long)
	
	Private _VillaAttachmentName As String
	
	Private _VillaAttachment As String
	
	Private _APP_Villa As EntityRef(Of APP_Villa)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnVillaIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnVillaIDChanged()
    End Sub
    Partial Private Sub OnVillaAttachmentNameChanging(value As String)
    End Sub
    Partial Private Sub OnVillaAttachmentNameChanged()
    End Sub
    Partial Private Sub OnVillaAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnVillaAttachmentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_Villa = CType(Nothing, EntityRef(Of APP_Villa))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaID", DbType:="BigInt")>  _
	Public Property VillaID() As System.Nullable(Of Long)
		Get
			Return Me._VillaID
		End Get
		Set
			If (Me._VillaID.Equals(value) = false) Then
				If Me._APP_Villa.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVillaIDChanging(value)
				Me.SendPropertyChanging
				Me._VillaID = value
				Me.SendPropertyChanged("VillaID")
				Me.OnVillaIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaAttachmentName", DbType:="NVarChar(50)")>  _
	Public Property VillaAttachmentName() As String
		Get
			Return Me._VillaAttachmentName
		End Get
		Set
			If (String.Equals(Me._VillaAttachmentName, value) = false) Then
				Me.OnVillaAttachmentNameChanging(value)
				Me.SendPropertyChanging
				Me._VillaAttachmentName = value
				Me.SendPropertyChanged("VillaAttachmentName")
				Me.OnVillaAttachmentNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaAttachment", DbType:="NVarChar(MAX)")>  _
	Public Property VillaAttachment() As String
		Get
			Return Me._VillaAttachment
		End Get
		Set
			If (String.Equals(Me._VillaAttachment, value) = false) Then
				Me.OnVillaAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._VillaAttachment = value
				Me.SendPropertyChanged("VillaAttachment")
				Me.OnVillaAttachmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_Villa_APP_VillaAttachment", Storage:="_APP_Villa", ThisKey:="VillaID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property APP_Villa() As APP_Villa
		Get
			Return Me._APP_Villa.Entity
		End Get
		Set
			Dim previousValue As APP_Villa = Me._APP_Villa.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._APP_Villa.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._APP_Villa.Entity = Nothing
					previousValue.APP_VillaAttachments.Remove(Me)
				End If
				Me._APP_Villa.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.APP_VillaAttachments.Add(Me)
					Me._VillaID = value.ID
				Else
					Me._VillaID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("APP_Villa")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.APP_Villas")>  _
Partial Public Class APP_Villa
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _VillaName As String
	
	Private _VillaOfficialName As String
	
	Private _VillaCompanyName As String
	
	Private _VillaRentingPrice As System.Nullable(Of Decimal)
	
	Private _VillaProvince As System.Nullable(Of Long)
	
	Private _VillaCity As System.Nullable(Of Long)
	
	Private _VillaVillage As System.Nullable(Of Long)
	
	Private _VillaPlace As String
	
	Private _VillaMemo As String
	
	Private _VillaRoomNumber As System.Nullable(Of Long)
	
	Private _VillaBathroomNumber As System.Nullable(Of Long)
	
	Private _VillaFloorNumber As System.Nullable(Of Long)
	
	Private _VillaBathroomType As String
	
	Private _VillaAddedBy As System.Nullable(Of System.Guid)
	
	Private _VillaAddedDate As System.Nullable(Of Date)
	
	Private _VillaUpdatedBy As System.Nullable(Of System.Guid)
	
	Private _VillaUpdatedDate As System.Nullable(Of Date)
	
	Private _APP_VillaAttachments As EntitySet(Of APP_VillaAttachment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnVillaNameChanging(value As String)
    End Sub
    Partial Private Sub OnVillaNameChanged()
    End Sub
    Partial Private Sub OnVillaOfficialNameChanging(value As String)
    End Sub
    Partial Private Sub OnVillaOfficialNameChanged()
    End Sub
    Partial Private Sub OnVillaCompanyNameChanging(value As String)
    End Sub
    Partial Private Sub OnVillaCompanyNameChanged()
    End Sub
    Partial Private Sub OnVillaRentingPriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnVillaRentingPriceChanged()
    End Sub
    Partial Private Sub OnVillaProvinceChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnVillaProvinceChanged()
    End Sub
    Partial Private Sub OnVillaCityChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnVillaCityChanged()
    End Sub
    Partial Private Sub OnVillaVillageChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnVillaVillageChanged()
    End Sub
    Partial Private Sub OnVillaPlaceChanging(value As String)
    End Sub
    Partial Private Sub OnVillaPlaceChanged()
    End Sub
    Partial Private Sub OnVillaMemoChanging(value As String)
    End Sub
    Partial Private Sub OnVillaMemoChanged()
    End Sub
    Partial Private Sub OnVillaRoomNumberChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnVillaRoomNumberChanged()
    End Sub
    Partial Private Sub OnVillaBathroomNumberChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnVillaBathroomNumberChanged()
    End Sub
    Partial Private Sub OnVillaFloorNumberChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnVillaFloorNumberChanged()
    End Sub
    Partial Private Sub OnVillaBathroomTypeChanging(value As String)
    End Sub
    Partial Private Sub OnVillaBathroomTypeChanged()
    End Sub
    Partial Private Sub OnVillaAddedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnVillaAddedByChanged()
    End Sub
    Partial Private Sub OnVillaAddedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnVillaAddedDateChanged()
    End Sub
    Partial Private Sub OnVillaUpdatedByChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnVillaUpdatedByChanged()
    End Sub
    Partial Private Sub OnVillaUpdatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnVillaUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._APP_VillaAttachments = New EntitySet(Of APP_VillaAttachment)(AddressOf Me.attach_APP_VillaAttachments, AddressOf Me.detach_APP_VillaAttachments)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaName", DbType:="NVarChar(150)")>  _
	Public Property VillaName() As String
		Get
			Return Me._VillaName
		End Get
		Set
			If (String.Equals(Me._VillaName, value) = false) Then
				Me.OnVillaNameChanging(value)
				Me.SendPropertyChanging
				Me._VillaName = value
				Me.SendPropertyChanged("VillaName")
				Me.OnVillaNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaOfficialName", DbType:="NVarChar(150)")>  _
	Public Property VillaOfficialName() As String
		Get
			Return Me._VillaOfficialName
		End Get
		Set
			If (String.Equals(Me._VillaOfficialName, value) = false) Then
				Me.OnVillaOfficialNameChanging(value)
				Me.SendPropertyChanging
				Me._VillaOfficialName = value
				Me.SendPropertyChanged("VillaOfficialName")
				Me.OnVillaOfficialNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaCompanyName", DbType:="NVarChar(150)")>  _
	Public Property VillaCompanyName() As String
		Get
			Return Me._VillaCompanyName
		End Get
		Set
			If (String.Equals(Me._VillaCompanyName, value) = false) Then
				Me.OnVillaCompanyNameChanging(value)
				Me.SendPropertyChanging
				Me._VillaCompanyName = value
				Me.SendPropertyChanged("VillaCompanyName")
				Me.OnVillaCompanyNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaRentingPrice", DbType:="Money")>  _
	Public Property VillaRentingPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._VillaRentingPrice
		End Get
		Set
			If (Me._VillaRentingPrice.Equals(value) = false) Then
				Me.OnVillaRentingPriceChanging(value)
				Me.SendPropertyChanging
				Me._VillaRentingPrice = value
				Me.SendPropertyChanged("VillaRentingPrice")
				Me.OnVillaRentingPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaProvince", DbType:="BigInt")>  _
	Public Property VillaProvince() As System.Nullable(Of Long)
		Get
			Return Me._VillaProvince
		End Get
		Set
			If (Me._VillaProvince.Equals(value) = false) Then
				Me.OnVillaProvinceChanging(value)
				Me.SendPropertyChanging
				Me._VillaProvince = value
				Me.SendPropertyChanged("VillaProvince")
				Me.OnVillaProvinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaCity", DbType:="BigInt")>  _
	Public Property VillaCity() As System.Nullable(Of Long)
		Get
			Return Me._VillaCity
		End Get
		Set
			If (Me._VillaCity.Equals(value) = false) Then
				Me.OnVillaCityChanging(value)
				Me.SendPropertyChanging
				Me._VillaCity = value
				Me.SendPropertyChanged("VillaCity")
				Me.OnVillaCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaVillage", DbType:="BigInt")>  _
	Public Property VillaVillage() As System.Nullable(Of Long)
		Get
			Return Me._VillaVillage
		End Get
		Set
			If (Me._VillaVillage.Equals(value) = false) Then
				Me.OnVillaVillageChanging(value)
				Me.SendPropertyChanging
				Me._VillaVillage = value
				Me.SendPropertyChanged("VillaVillage")
				Me.OnVillaVillageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaPlace", DbType:="NVarChar(50)")>  _
	Public Property VillaPlace() As String
		Get
			Return Me._VillaPlace
		End Get
		Set
			If (String.Equals(Me._VillaPlace, value) = false) Then
				Me.OnVillaPlaceChanging(value)
				Me.SendPropertyChanging
				Me._VillaPlace = value
				Me.SendPropertyChanged("VillaPlace")
				Me.OnVillaPlaceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaMemo", DbType:="NVarChar(MAX)")>  _
	Public Property VillaMemo() As String
		Get
			Return Me._VillaMemo
		End Get
		Set
			If (String.Equals(Me._VillaMemo, value) = false) Then
				Me.OnVillaMemoChanging(value)
				Me.SendPropertyChanging
				Me._VillaMemo = value
				Me.SendPropertyChanged("VillaMemo")
				Me.OnVillaMemoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaRoomNumber", DbType:="BigInt")>  _
	Public Property VillaRoomNumber() As System.Nullable(Of Long)
		Get
			Return Me._VillaRoomNumber
		End Get
		Set
			If (Me._VillaRoomNumber.Equals(value) = false) Then
				Me.OnVillaRoomNumberChanging(value)
				Me.SendPropertyChanging
				Me._VillaRoomNumber = value
				Me.SendPropertyChanged("VillaRoomNumber")
				Me.OnVillaRoomNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaBathroomNumber", DbType:="BigInt")>  _
	Public Property VillaBathroomNumber() As System.Nullable(Of Long)
		Get
			Return Me._VillaBathroomNumber
		End Get
		Set
			If (Me._VillaBathroomNumber.Equals(value) = false) Then
				Me.OnVillaBathroomNumberChanging(value)
				Me.SendPropertyChanging
				Me._VillaBathroomNumber = value
				Me.SendPropertyChanged("VillaBathroomNumber")
				Me.OnVillaBathroomNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaFloorNumber", DbType:="BigInt")>  _
	Public Property VillaFloorNumber() As System.Nullable(Of Long)
		Get
			Return Me._VillaFloorNumber
		End Get
		Set
			If (Me._VillaFloorNumber.Equals(value) = false) Then
				Me.OnVillaFloorNumberChanging(value)
				Me.SendPropertyChanging
				Me._VillaFloorNumber = value
				Me.SendPropertyChanged("VillaFloorNumber")
				Me.OnVillaFloorNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaBathroomType", DbType:="NVarChar(50)")>  _
	Public Property VillaBathroomType() As String
		Get
			Return Me._VillaBathroomType
		End Get
		Set
			If (String.Equals(Me._VillaBathroomType, value) = false) Then
				Me.OnVillaBathroomTypeChanging(value)
				Me.SendPropertyChanging
				Me._VillaBathroomType = value
				Me.SendPropertyChanged("VillaBathroomType")
				Me.OnVillaBathroomTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaAddedBy", DbType:="UniqueIdentifier")>  _
	Public Property VillaAddedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._VillaAddedBy
		End Get
		Set
			If (Me._VillaAddedBy.Equals(value) = false) Then
				Me.OnVillaAddedByChanging(value)
				Me.SendPropertyChanging
				Me._VillaAddedBy = value
				Me.SendPropertyChanged("VillaAddedBy")
				Me.OnVillaAddedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaAddedDate", DbType:="DateTime")>  _
	Public Property VillaAddedDate() As System.Nullable(Of Date)
		Get
			Return Me._VillaAddedDate
		End Get
		Set
			If (Me._VillaAddedDate.Equals(value) = false) Then
				Me.OnVillaAddedDateChanging(value)
				Me.SendPropertyChanging
				Me._VillaAddedDate = value
				Me.SendPropertyChanged("VillaAddedDate")
				Me.OnVillaAddedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaUpdatedBy", DbType:="UniqueIdentifier")>  _
	Public Property VillaUpdatedBy() As System.Nullable(Of System.Guid)
		Get
			Return Me._VillaUpdatedBy
		End Get
		Set
			If (Me._VillaUpdatedBy.Equals(value) = false) Then
				Me.OnVillaUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._VillaUpdatedBy = value
				Me.SendPropertyChanged("VillaUpdatedBy")
				Me.OnVillaUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VillaUpdatedDate", DbType:="DateTime")>  _
	Public Property VillaUpdatedDate() As System.Nullable(Of Date)
		Get
			Return Me._VillaUpdatedDate
		End Get
		Set
			If (Me._VillaUpdatedDate.Equals(value) = false) Then
				Me.OnVillaUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._VillaUpdatedDate = value
				Me.SendPropertyChanged("VillaUpdatedDate")
				Me.OnVillaUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="APP_Villa_APP_VillaAttachment", Storage:="_APP_VillaAttachments", ThisKey:="ID", OtherKey:="VillaID")>  _
	Public Property APP_VillaAttachments() As EntitySet(Of APP_VillaAttachment)
		Get
			Return Me._APP_VillaAttachments
		End Get
		Set
			Me._APP_VillaAttachments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_APP_VillaAttachments(ByVal entity As APP_VillaAttachment)
		Me.SendPropertyChanging
		entity.APP_Villa = Me
	End Sub
	
	Private Sub detach_APP_VillaAttachments(ByVal entity As APP_VillaAttachment)
		Me.SendPropertyChanging
		entity.APP_Villa = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Profiles")>  _
Partial Public Class Profile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As System.Guid
	
	Private _PropertyNames As String
	
	Private _PropertyValueStrings As String
	
	Private _PropertyValueBinary As System.Data.Linq.Binary
	
	Private _LastUpdatedDate As Date
	
	Private _User As EntityRef(Of User)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnPropertyNamesChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyNamesChanged()
    End Sub
    Partial Private Sub OnPropertyValueStringsChanging(value As String)
    End Sub
    Partial Private Sub OnPropertyValueStringsChanged()
    End Sub
    Partial Private Sub OnPropertyValueBinaryChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPropertyValueBinaryChanged()
    End Sub
    Partial Private Sub OnLastUpdatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastUpdatedDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._User = CType(Nothing, EntityRef(Of User))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				If Me._User.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyNames", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property PropertyNames() As String
		Get
			Return Me._PropertyNames
		End Get
		Set
			If (String.Equals(Me._PropertyNames, value) = false) Then
				Me.OnPropertyNamesChanging(value)
				Me.SendPropertyChanging
				Me._PropertyNames = value
				Me.SendPropertyChanged("PropertyNames")
				Me.OnPropertyNamesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValueStrings", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property PropertyValueStrings() As String
		Get
			Return Me._PropertyValueStrings
		End Get
		Set
			If (String.Equals(Me._PropertyValueStrings, value) = false) Then
				Me.OnPropertyValueStringsChanging(value)
				Me.SendPropertyChanging
				Me._PropertyValueStrings = value
				Me.SendPropertyChanged("PropertyValueStrings")
				Me.OnPropertyValueStringsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PropertyValueBinary", DbType:="VarBinary(MAX) NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PropertyValueBinary() As System.Data.Linq.Binary
		Get
			Return Me._PropertyValueBinary
		End Get
		Set
			If (Object.Equals(Me._PropertyValueBinary, value) = false) Then
				Me.OnPropertyValueBinaryChanging(value)
				Me.SendPropertyChanging
				Me._PropertyValueBinary = value
				Me.SendPropertyChanged("PropertyValueBinary")
				Me.OnPropertyValueBinaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastUpdatedDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastUpdatedDate() As Date
		Get
			Return Me._LastUpdatedDate
		End Get
		Set
			If ((Me._LastUpdatedDate = value)  _
						= false) Then
				Me.OnLastUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._LastUpdatedDate = value
				Me.SendPropertyChanged("LastUpdatedDate")
				Me.OnLastUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Profile", Storage:="_User", ThisKey:="UserId", OtherKey:="UserId", IsForeignKey:=true)>  _
	Public Property User() As User
		Get
			Return Me._User.Entity
		End Get
		Set
			Dim previousValue As User = Me._User.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._User.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._User.Entity = Nothing
					previousValue.Profile = Nothing
				End If
				Me._User.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Profile = Me
					Me._UserId = value.UserId
				Else
					Me._UserId = CType(Nothing, System.Guid)
				End If
				Me.SendPropertyChanged("User")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Roles")>  _
Partial Public Class Role
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RoleId As System.Guid
	
	Private _ApplicationId As System.Guid
	
	Private _RoleName As String
	
	Private _Description As String
	
	Private _UsersInRoles As EntitySet(Of UsersInRole)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRoleIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRoleIdChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnRoleNameChanging(value As String)
    End Sub
    Partial Private Sub OnRoleNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UsersInRoles = New EntitySet(Of UsersInRole)(AddressOf Me.attach_UsersInRoles, AddressOf Me.detach_UsersInRoles)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RoleId() As System.Guid
		Get
			Return Me._RoleId
		End Get
		Set
			If ((Me._RoleId = value)  _
						= false) Then
				Me.OnRoleIdChanging(value)
				Me.SendPropertyChanging
				Me._RoleId = value
				Me.SendPropertyChanged("RoleId")
				Me.OnRoleIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RoleName", DbType:="NVarChar(256) NOT NULL", CanBeNull:=false)>  _
	Public Property RoleName() As String
		Get
			Return Me._RoleName
		End Get
		Set
			If (String.Equals(Me._RoleName, value) = false) Then
				Me.OnRoleNameChanging(value)
				Me.SendPropertyChanging
				Me._RoleName = value
				Me.SendPropertyChanged("RoleName")
				Me.OnRoleNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(256)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Role_UsersInRole", Storage:="_UsersInRoles", ThisKey:="RoleId", OtherKey:="RoleId")>  _
	Public Property UsersInRoles() As EntitySet(Of UsersInRole)
		Get
			Return Me._UsersInRoles
		End Get
		Set
			Me._UsersInRoles.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_UsersInRoles(ByVal entity As UsersInRole)
		Me.SendPropertyChanging
		entity.Role = Me
	End Sub
	
	Private Sub detach_UsersInRoles(ByVal entity As UsersInRole)
		Me.SendPropertyChanging
		entity.Role = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SystemDetails")>  _
Partial Public Class SystemDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ApplicationID As System.Guid
	
	Private _SystemTitle As String
	
	Private _SystemUserLimit As String
	
	Private _SystemMailID As String
	
	Private _SystemMailPassword As String
	
	Private _AllowSystemMail As String
	
	Private _SystemMailSender As String
	
	Private _SystemSMSAPI As String
	
	Private _SystemSMSUser As String
	
	Private _SystemSMSPassword As String
	
	Private _AllowSystemSMS As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnSystemTitleChanging(value As String)
    End Sub
    Partial Private Sub OnSystemTitleChanged()
    End Sub
    Partial Private Sub OnSystemUserLimitChanging(value As String)
    End Sub
    Partial Private Sub OnSystemUserLimitChanged()
    End Sub
    Partial Private Sub OnSystemMailIDChanging(value As String)
    End Sub
    Partial Private Sub OnSystemMailIDChanged()
    End Sub
    Partial Private Sub OnSystemMailPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnSystemMailPasswordChanged()
    End Sub
    Partial Private Sub OnAllowSystemMailChanging(value As String)
    End Sub
    Partial Private Sub OnAllowSystemMailChanged()
    End Sub
    Partial Private Sub OnSystemMailSenderChanging(value As String)
    End Sub
    Partial Private Sub OnSystemMailSenderChanged()
    End Sub
    Partial Private Sub OnSystemSMSAPIChanging(value As String)
    End Sub
    Partial Private Sub OnSystemSMSAPIChanged()
    End Sub
    Partial Private Sub OnSystemSMSUserChanging(value As String)
    End Sub
    Partial Private Sub OnSystemSMSUserChanged()
    End Sub
    Partial Private Sub OnSystemSMSPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnSystemSMSPasswordChanged()
    End Sub
    Partial Private Sub OnAllowSystemSMSChanging(value As String)
    End Sub
    Partial Private Sub OnAllowSystemSMSChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ApplicationID() As System.Guid
		Get
			Return Me._ApplicationID
		End Get
		Set
			If ((Me._ApplicationID = value)  _
						= false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SystemTitle", DbType:="NVarChar(200)")>  _
	Public Property SystemTitle() As String
		Get
			Return Me._SystemTitle
		End Get
		Set
			If (String.Equals(Me._SystemTitle, value) = false) Then
				Me.OnSystemTitleChanging(value)
				Me.SendPropertyChanging
				Me._SystemTitle = value
				Me.SendPropertyChanged("SystemTitle")
				Me.OnSystemTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SystemUserLimit", DbType:="NVarChar(MAX)")>  _
	Public Property SystemUserLimit() As String
		Get
			Return Me._SystemUserLimit
		End Get
		Set
			If (String.Equals(Me._SystemUserLimit, value) = false) Then
				Me.OnSystemUserLimitChanging(value)
				Me.SendPropertyChanging
				Me._SystemUserLimit = value
				Me.SendPropertyChanged("SystemUserLimit")
				Me.OnSystemUserLimitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SystemMailID", DbType:="NVarChar(150)")>  _
	Public Property SystemMailID() As String
		Get
			Return Me._SystemMailID
		End Get
		Set
			If (String.Equals(Me._SystemMailID, value) = false) Then
				Me.OnSystemMailIDChanging(value)
				Me.SendPropertyChanging
				Me._SystemMailID = value
				Me.SendPropertyChanged("SystemMailID")
				Me.OnSystemMailIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SystemMailPassword", DbType:="NVarChar(MAX)")>  _
	Public Property SystemMailPassword() As String
		Get
			Return Me._SystemMailPassword
		End Get
		Set
			If (String.Equals(Me._SystemMailPassword, value) = false) Then
				Me.OnSystemMailPasswordChanging(value)
				Me.SendPropertyChanging
				Me._SystemMailPassword = value
				Me.SendPropertyChanged("SystemMailPassword")
				Me.OnSystemMailPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AllowSystemMail", DbType:="NVarChar(MAX)")>  _
	Public Property AllowSystemMail() As String
		Get
			Return Me._AllowSystemMail
		End Get
		Set
			If (String.Equals(Me._AllowSystemMail, value) = false) Then
				Me.OnAllowSystemMailChanging(value)
				Me.SendPropertyChanging
				Me._AllowSystemMail = value
				Me.SendPropertyChanged("AllowSystemMail")
				Me.OnAllowSystemMailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SystemMailSender", DbType:="NVarChar(50)")>  _
	Public Property SystemMailSender() As String
		Get
			Return Me._SystemMailSender
		End Get
		Set
			If (String.Equals(Me._SystemMailSender, value) = false) Then
				Me.OnSystemMailSenderChanging(value)
				Me.SendPropertyChanging
				Me._SystemMailSender = value
				Me.SendPropertyChanged("SystemMailSender")
				Me.OnSystemMailSenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SystemSMSAPI", DbType:="NVarChar(300)")>  _
	Public Property SystemSMSAPI() As String
		Get
			Return Me._SystemSMSAPI
		End Get
		Set
			If (String.Equals(Me._SystemSMSAPI, value) = false) Then
				Me.OnSystemSMSAPIChanging(value)
				Me.SendPropertyChanging
				Me._SystemSMSAPI = value
				Me.SendPropertyChanged("SystemSMSAPI")
				Me.OnSystemSMSAPIChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SystemSMSUser", DbType:="NVarChar(150)")>  _
	Public Property SystemSMSUser() As String
		Get
			Return Me._SystemSMSUser
		End Get
		Set
			If (String.Equals(Me._SystemSMSUser, value) = false) Then
				Me.OnSystemSMSUserChanging(value)
				Me.SendPropertyChanging
				Me._SystemSMSUser = value
				Me.SendPropertyChanged("SystemSMSUser")
				Me.OnSystemSMSUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SystemSMSPassword", DbType:="NVarChar(MAX)")>  _
	Public Property SystemSMSPassword() As String
		Get
			Return Me._SystemSMSPassword
		End Get
		Set
			If (String.Equals(Me._SystemSMSPassword, value) = false) Then
				Me.OnSystemSMSPasswordChanging(value)
				Me.SendPropertyChanging
				Me._SystemSMSPassword = value
				Me.SendPropertyChanged("SystemSMSPassword")
				Me.OnSystemSMSPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AllowSystemSMS", DbType:="NVarChar(MAX)")>  _
	Public Property AllowSystemSMS() As String
		Get
			Return Me._AllowSystemSMS
		End Get
		Set
			If (String.Equals(Me._AllowSystemSMS, value) = false) Then
				Me.OnAllowSystemSMSChanging(value)
				Me.SendPropertyChanging
				Me._AllowSystemSMS = value
				Me.SendPropertyChanged("AllowSystemSMS")
				Me.OnAllowSystemSMSChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Users")>  _
Partial Public Class User
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UserId As System.Guid
	
	Private _ApplicationId As System.Guid
	
	Private _UserName As String
	
	Private _IsAnonymous As Boolean
	
	Private _LastActivityDate As Date
	
	Private _UsersInRoles As EntitySet(Of UsersInRole)
	
	Private _Profile As EntityRef(Of Profile)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUserIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnUserIdChanged()
    End Sub
    Partial Private Sub OnApplicationIdChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnApplicationIdChanged()
    End Sub
    Partial Private Sub OnUserNameChanging(value As String)
    End Sub
    Partial Private Sub OnUserNameChanged()
    End Sub
    Partial Private Sub OnIsAnonymousChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsAnonymousChanged()
    End Sub
    Partial Private Sub OnLastActivityDateChanging(value As Date)
    End Sub
    Partial Private Sub OnLastActivityDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._UsersInRoles = New EntitySet(Of UsersInRole)(AddressOf Me.attach_UsersInRoles, AddressOf Me.detach_UsersInRoles)
		Me._Profile = CType(Nothing, EntityRef(Of Profile))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserId", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property UserId() As System.Guid
		Get
			Return Me._UserId
		End Get
		Set
			If ((Me._UserId = value)  _
						= false) Then
				Me.OnUserIdChanging(value)
				Me.SendPropertyChanging
				Me._UserId = value
				Me.SendPropertyChanged("UserId")
				Me.OnUserIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationId", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ApplicationId() As System.Guid
		Get
			Return Me._ApplicationId
		End Get
		Set
			If ((Me._ApplicationId = value)  _
						= false) Then
				Me.OnApplicationIdChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationId = value
				Me.SendPropertyChanged("ApplicationId")
				Me.OnApplicationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserName", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property UserName() As String
		Get
			Return Me._UserName
		End Get
		Set
			If (String.Equals(Me._UserName, value) = false) Then
				Me.OnUserNameChanging(value)
				Me.SendPropertyChanging
				Me._UserName = value
				Me.SendPropertyChanged("UserName")
				Me.OnUserNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAnonymous", DbType:="Bit NOT NULL")>  _
	Public Property IsAnonymous() As Boolean
		Get
			Return Me._IsAnonymous
		End Get
		Set
			If ((Me._IsAnonymous = value)  _
						= false) Then
				Me.OnIsAnonymousChanging(value)
				Me.SendPropertyChanging
				Me._IsAnonymous = value
				Me.SendPropertyChanged("IsAnonymous")
				Me.OnIsAnonymousChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastActivityDate", DbType:="DateTime NOT NULL")>  _
	Public Property LastActivityDate() As Date
		Get
			Return Me._LastActivityDate
		End Get
		Set
			If ((Me._LastActivityDate = value)  _
						= false) Then
				Me.OnLastActivityDateChanging(value)
				Me.SendPropertyChanging
				Me._LastActivityDate = value
				Me.SendPropertyChanged("LastActivityDate")
				Me.OnLastActivityDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_UsersInRole", Storage:="_UsersInRoles", ThisKey:="UserId", OtherKey:="UserId")>  _
	Public Property UsersInRoles() As EntitySet(Of UsersInRole)
		Get
			Return Me._UsersInRoles
		End Get
		Set
			Me._UsersInRoles.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="User_Profile", Storage:="_Profile", ThisKey:="UserId", OtherKey:="UserId", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property Profile() As Profile
		Get
			Return Me._Profile.Entity
		End Get
		Set
			Dim previousValue As Profile = Me._Profile.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Profile.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Profile.Entity = Nothing
					previousValue.User = Nothing
				End If
				Me._Profile.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.User = Me
				End If
				Me.SendPropertyChanged("Profile")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_UsersInRoles(ByVal entity As UsersInRole)
		Me.SendPropertyChanging
		entity.User = Me
	End Sub
	
	Private Sub detach_UsersInRoles(ByVal entity As UsersInRole)
		Me.SendPropertyChanging
		entity.User = Nothing
	End Sub
End Class

Partial Public Class PROC_GetApplicationIDResult
	
	Private _Column1 As System.Nullable(Of System.Guid)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="", Storage:="_Column1", DbType:="UniqueIdentifier")>  _
	Public Property Column1() As System.Nullable(Of System.Guid)
		Get
			Return Me._Column1
		End Get
		Set
			If (Me._Column1.Equals(value) = false) Then
				Me._Column1 = value
			End If
		End Set
	End Property
End Class
